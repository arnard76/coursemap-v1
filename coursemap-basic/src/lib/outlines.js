export let example = [
  {
    name: "Logic and Proofs",
    definition: {
      simple:
        "\n\nLogic refers to the branch of philosophy that deals with reasoning and inference. It involves the use of reasoning to make inferences, identify patterns, and reach conclusions about various concepts, ideas, or beliefs. Logic is often used in mathematics, computer science, and artificial intelligence to solve problems or develop algorithms.\n\nProofs refer to the evidence or arguments used to establish the truth or validity of a statement or theorem. In mathematics, proofs are used to demonstrate the accuracy and correctness of a theorem or conjecture. A proof typically involves a series of logical arguments, deductions, or inferences that establish the validity of a claim or proposition. Proofs are essential in mathematics as they provide a rigorous means of verifying the truth of mathematical statements.",
    },
    childs: [
      {
        name: "Introduction to logic",
        content:
          "Logic and Proofs\n1.1 Introduction to logic\nAproposition is a statement which is either true or false.\nFor example:\n1. \u201cThe sun is a star.\u201d\n2. \u201cThe moon is made of cheese.\u201d\n3. \u201c 2 + 2 = 4.\u201d\n4. \u201c 2 + 3 = 7.\u201d\n5. \u201cEvery even integer greater than 4 is the sum of\ntwo prime numbers.\u201d\n6. \u201c 2 >3 or 2 <3.\u201d\n7. \u201cIf the world is flat then 2 + 2 = 4.\u201d\nWe only insist that the statement is true or false, we\ndo not need to know which it is. Notice that the last\ntwo examples are formed by combining simpler proposi-\ntions, namely \u201c2 >3\u201d, \u201c2 <3\u201d, \u201cThe world is flat\u201d, and\n\u201c2 + 2 = 4\u201d. A proposition which has been built up in\nthis way is called a compound proposition, as opposed to\nasimple proposition which cannot be split into simpler\npropositions.\nExample 1.1 Identify which of the following are propo-\nsitions, and which are not:\n1. \u201c 2x= 100 \u201d\n2. \u201c 2x= 100 for some integer x\u201d\n3. \u201cShake well before opening\u201d\n4. \u201cCompSci 225 is the largest course at the Univer-\nsity of Auckland\u201d\nNotation\nWe typically use letters like p,qandrto stand for simple\npropositions: we call these propositional variables . We\nusually use capital letters like A,BandCto denote\ncompound propositions, or propositions which might be\nsimple or might be compound.\n1\n\n\n\n\n2 TOPIC 1. LOGIC AND PROOFS\nConnectives\nWhen we want to build more complicated propositions\nout of simpler ones, we use connectives . IfAandBare\npropositions, then so are the following:\n\u00acA A \u2227B A \u2228B A \u2192B A \u2194B\nWe read these as \u201cnot A\u201d, \u201cAandB\u201d, \u201cAorB\u201d, \u201cAim-\nplies B\u201d (or \u201cif Athen B\u201d) and \u201c Ais equivalent to B\u201d\n(or \u201cAif and only if B\u201d) respectively. We can combine\ncompound propositions into more and more complicated\npropositions. For example, if pdenotes the proposition\n\u201cIt is raining\u201d, qdenotes the proposition \u201cThe sun is\nshining\u201d and rdenotes the proposition \u201cThere is a rain-\nbow\u201d, then ( p\u2227q)\u2192rrepresents the proposition \u201cIf it\nis raining and the sun is shining, then there is a rain-\nbow\u201d, while ( p\u2227\u00acr)\u2192 \u00acqrepresents the proposition \u201cIf\nit is raining and there is no rainbow, then the sun is not\nshining\u201d.\nExample 1.2 How can the following advertising slogan\nbe translated into a logical expression?\n\u201cIf you drink and drive, you\u2019re a bloody\nidiot.\u201d\nSolution. Letpdenote the proposition \u201dYou drink\u201d.\nLetqdenote the proposition \u201dYou drive\u201d.\nLetrdenote the proposition \u201dYou\u2019re a bloody idiot\u201d\nThen the slogan can be expressed as\n(p\u2227q)\u2192r\nExample 1.3 How can the following English sentence be\ntranslated into a logical expression?\n\u201cYou cannot go to the pub if you are under\n18 years old, unless you are accompanied by\na parent.\u201d\n1.2 Truth values\nWe refer to the truth or falsity of a proposition as its\ntruth value . The truth value of a compound proposition\ndepends only on the truth or falsity of the propositions\nfrom which it was built, according to rules which we can\ngive for each connective. We will consider these in detail\nlater, but we can summarize them in the following table,\n\n\n\n\n",
      },
      {
        name: "Truth values",
        content:
          "2 TOPIC 1. LOGIC AND PROOFS\nConnectives\nWhen we want to build more complicated propositions\nout of simpler ones, we use connectives . IfAandBare\npropositions, then so are the following:\n\u00acA A \u2227B A \u2228B A \u2192B A \u2194B\nWe read these as \u201cnot A\u201d, \u201cAandB\u201d, \u201cAorB\u201d, \u201cAim-\nplies B\u201d (or \u201cif Athen B\u201d) and \u201c Ais equivalent to B\u201d\n(or \u201cAif and only if B\u201d) respectively. We can combine\ncompound propositions into more and more complicated\npropositions. For example, if pdenotes the proposition\n\u201cIt is raining\u201d, qdenotes the proposition \u201cThe sun is\nshining\u201d and rdenotes the proposition \u201cThere is a rain-\nbow\u201d, then ( p\u2227q)\u2192rrepresents the proposition \u201cIf it\nis raining and the sun is shining, then there is a rain-\nbow\u201d, while ( p\u2227\u00acr)\u2192 \u00acqrepresents the proposition \u201cIf\nit is raining and there is no rainbow, then the sun is not\nshining\u201d.\nExample 1.2 How can the following advertising slogan\nbe translated into a logical expression?\n\u201cIf you drink and drive, you\u2019re a bloody\nidiot.\u201d\nSolution. Letpdenote the proposition \u201dYou drink\u201d.\nLetqdenote the proposition \u201dYou drive\u201d.\nLetrdenote the proposition \u201dYou\u2019re a bloody idiot\u201d\nThen the slogan can be expressed as\n(p\u2227q)\u2192r\nExample 1.3 How can the following English sentence be\ntranslated into a logical expression?\n\u201cYou cannot go to the pub if you are under\n18 years old, unless you are accompanied by\na parent.\u201d\n1.2 Truth values\nWe refer to the truth or falsity of a proposition as its\ntruth value . The truth value of a compound proposition\ndepends only on the truth or falsity of the propositions\nfrom which it was built, according to rules which we can\ngive for each connective. We will consider these in detail\nlater, but we can summarize them in the following table,\n\n\n\n\n1.2. TRUTH VALUES 3\nwhich we call a \u201ctruth table\u201d. In this table, 0 represents\n\u201cfalse\u201d and 1 represents \u201ctrue\u201d.\nA B \u00acA A \u2227B A \u2228B A \u2192B A \u2194B\n0 0 1 0 0 1 1\n0 1 1 0 1 1 0\n1 0 0 0 1 0 0\n1 1 0 1 1 1 1\nTruth\nThe truth value of a compound proposition depends on\nthe truth values of the propositions it was built from,\naccording to the following rules:\n\u0088\u00acAis false if Ais true, and it is true if Ais false.\n\u0088A\u2227Bis true if both AandBare true: otherwise\nit is false.\n\u0088A\u2228Bis true if either AorBis true, or if both are\ntrue (so \u2228represents \u201cinclusive or\u201d).\n\u0088A\u2192Bis true unless Ais true and Bis false. [This\nrule may seem odd\u2014why is (0 = 1) \u2192(2 + 2 = 5)\ntrue? This rule is a standard convention in logic.\nTo help make sense of it, consider the statement\n\u201cFor any real number x, ifx > 2 then x2>4\u201d.\nTry substituting the values x= 1 and x=\u22123 into\n\u201cifx >2 then x2>4\u201d.]\n\u0088A\u2194Bis true if AandBhave the same truth\nvalue, and false otherwise.\nExample 1.4 It is important to distinguish the logical\nconnective \u2192from the rules of deduction.\nSuppose that the proposition \u201cif it snows today, then we\nwill go skiing\u201d is true. Suppose also that the hypothe-\nsis\u201cit is snowing today\u201d is true. Then from these two\npropositions we can deduce the conclusion \u201cwe will go\nskiing\u201d.\nThe rule of deduction is called modus ponens and can be\nwritten as (p\u2227(p\u2192q))\u2192q.\nTruth tables\nUsing these rules, we can build up the truth table for any\ncompound proposition.\n\n\n\n\n4 TOPIC 1. LOGIC AND PROOFS\nExample 1.5 For example, here are the truth tables for\np\u2192(q\u2228 \u00acr)and(p\u2192q)\u2228(q\u2192r).\np q r \u00acr q\u2228 \u00acr p\u2192(q\u2228 \u00acr)\n0 0 0 1 1 1\n0 0 1 0 0 1\n0 1 0 1 1 1\n0 1 1 0 1 1\n1 0 0 1 1 1\n1 0 1 0 0 0\n1 1 0 1 1 1\n1 1 1 0 1 1\np q r (p\u2192 q)\u2228(q\u2192 r)\n0 0 0 0 1 0 1 0 1 0\n0 0 1 0 1 0 1 0 1 1\n0 1 0 0 1 1 1 1 0 0\n0 1 1 0 1 1 1 1 1 1\n1 0 0 1 0 0 1 0 1 0\n1 0 1 1 0 0 1 0 1 1\n1 1 0 1 1 1 1 1 0 0\n1 1 1 1 1 1 1 1 1 1\nThe second style becomes more useful as the propositions\nget more complicated. The column between the vertical\nlines gives the truth value of the whole proposition.\nExample 1.6 Write out the truth table for p\u2192(q\u2228r).\nExample 1.7 Let\np : Blaise Pascal invented several calculating ma-\nchines,\nq : The first all-electronic digital computer was\nconstructed in the twentieth century,\nr : \u03c0was calculated to 1,000,000 decimal digits in\n1954.\nRepresent the following proposition symbolically and con-\nstruct a truth table.\nEither Blaise Pascal invented several calcu-\nlating machines and it is not the case that\nthe first all-electronic digital computer was\nconstructed in the twentieth century: or \u03c0\nwas calculated to 1,000,000 decimal digits in\n1954.\nOther connectives\nWe can define some other useful binary connectives be-\nsides the ones we have already mentioned. The most\n\n\n\n\n1.3. TAUTOLOGIES, CONTRADICTIONS AND CONTINGENT PROPOSITIONS 5\nuseful ones are \u2295,nand andnor, which denote \u201cexclu-\nsive or\u201d, \u201cnot-and\u201d and \u201cnot-or\u201d. Thus A\u2295Bis true if\nand only if either Ais true or Bis true, but not both.\nAlso Anand Bis true if and only if A\u2227Bis false, and\nAnorBis true if and only if A\u2228Bis false.\nExample 1.8 Complete the following truth table:\np q p\u2295q p nand q p norq\n0 0\n0 1\n1 0\n1 1\n1.3 Tautologies, contradictions and contingent\npropositions\nAtautology is a proposition that is always true , no mat-\nter what truth values we assign to the propositional vari-\nables it contains. For example, we showed in an earlier\nexample that ( p\u2192q)\u2228(q\u2192r) is a tautology. A contra-\ndiction is a proposition that is always false , no matter\nwhat truth values we assign to the propositional variables\nit contains. A proposition that is neither a tautology nor\na contradiction is said to be contingent . Here are some\nexamples.\n1.p\u2228 \u00acpis a tautology.\n2.p\u2192pis a tautology.\n3.p\u2227 \u00acpis a contradiction.\n4.\u00ac(p\u2192q)\u2227 \u00acpis a contradiction.\n5.p\u2192(q\u2192r) is contingent.\n6.p\u2227(q\u2192p) is contingent.\n1.4 Logical equivalence and logical implication\nTwo propositions AandBarelogically equivalent , writ-\ntenA\u21d4B, if, whenever we assign truth values to the\npropositional variables they contain, AandBhave the\nsame truth value. Thus A\u21d4Bholds if and only if\nA\u2194Bis a tautology. To decide whether or not two\npropositions are logically equivalent, we can use truth\ntables. For example, to show that p\u2192q\u21d4 \u00acq\u2192 \u00acp,\nwe build up the following truth table:\np q p\u2192q \u00acq\u2192\u00acp\n0 0 1 1 1 1\n0 1 1 0 1 1\n1 0 0 1 0 0\n1 1 1 0 1 0\nNotice that columns 3 and 5 are identical.\n\n\n\n\n",
      },
      {
        name: "Tautologies, contradictions and contingent propositions",
        content:
          "1.3. TAUTOLOGIES, CONTRADICTIONS AND CONTINGENT PROPOSITIONS 5\nuseful ones are \u2295,nand andnor, which denote \u201cexclu-\nsive or\u201d, \u201cnot-and\u201d and \u201cnot-or\u201d. Thus A\u2295Bis true if\nand only if either Ais true or Bis true, but not both.\nAlso Anand Bis true if and only if A\u2227Bis false, and\nAnorBis true if and only if A\u2228Bis false.\nExample 1.8 Complete the following truth table:\np q p\u2295q p nand q p norq\n0 0\n0 1\n1 0\n1 1\n1.3 Tautologies, contradictions and contingent\npropositions\nAtautology is a proposition that is always true , no mat-\nter what truth values we assign to the propositional vari-\nables it contains. For example, we showed in an earlier\nexample that ( p\u2192q)\u2228(q\u2192r) is a tautology. A contra-\ndiction is a proposition that is always false , no matter\nwhat truth values we assign to the propositional variables\nit contains. A proposition that is neither a tautology nor\na contradiction is said to be contingent . Here are some\nexamples.\n1.p\u2228 \u00acpis a tautology.\n2.p\u2192pis a tautology.\n3.p\u2227 \u00acpis a contradiction.\n4.\u00ac(p\u2192q)\u2227 \u00acpis a contradiction.\n5.p\u2192(q\u2192r) is contingent.\n6.p\u2227(q\u2192p) is contingent.\n1.4 Logical equivalence and logical implication\nTwo propositions AandBarelogically equivalent , writ-\ntenA\u21d4B, if, whenever we assign truth values to the\npropositional variables they contain, AandBhave the\nsame truth value. Thus A\u21d4Bholds if and only if\nA\u2194Bis a tautology. To decide whether or not two\npropositions are logically equivalent, we can use truth\ntables. For example, to show that p\u2192q\u21d4 \u00acq\u2192 \u00acp,\nwe build up the following truth table:\np q p\u2192q \u00acq\u2192\u00acp\n0 0 1 1 1 1\n0 1 1 0 1 1\n1 0 0 1 0 0\n1 1 1 0 1 0\nNotice that columns 3 and 5 are identical.\n\n\n\n\n",
      },
      {
        name: "Logical equivalence and logical implication",
        content:
          "1.3. TAUTOLOGIES, CONTRADICTIONS AND CONTINGENT PROPOSITIONS 5\nuseful ones are \u2295,nand andnor, which denote \u201cexclu-\nsive or\u201d, \u201cnot-and\u201d and \u201cnot-or\u201d. Thus A\u2295Bis true if\nand only if either Ais true or Bis true, but not both.\nAlso Anand Bis true if and only if A\u2227Bis false, and\nAnorBis true if and only if A\u2228Bis false.\nExample 1.8 Complete the following truth table:\np q p\u2295q p nand q p norq\n0 0\n0 1\n1 0\n1 1\n1.3 Tautologies, contradictions and contingent\npropositions\nAtautology is a proposition that is always true , no mat-\nter what truth values we assign to the propositional vari-\nables it contains. For example, we showed in an earlier\nexample that ( p\u2192q)\u2228(q\u2192r) is a tautology. A contra-\ndiction is a proposition that is always false , no matter\nwhat truth values we assign to the propositional variables\nit contains. A proposition that is neither a tautology nor\na contradiction is said to be contingent . Here are some\nexamples.\n1.p\u2228 \u00acpis a tautology.\n2.p\u2192pis a tautology.\n3.p\u2227 \u00acpis a contradiction.\n4.\u00ac(p\u2192q)\u2227 \u00acpis a contradiction.\n5.p\u2192(q\u2192r) is contingent.\n6.p\u2227(q\u2192p) is contingent.\n1.4 Logical equivalence and logical implication\nTwo propositions AandBarelogically equivalent , writ-\ntenA\u21d4B, if, whenever we assign truth values to the\npropositional variables they contain, AandBhave the\nsame truth value. Thus A\u21d4Bholds if and only if\nA\u2194Bis a tautology. To decide whether or not two\npropositions are logically equivalent, we can use truth\ntables. For example, to show that p\u2192q\u21d4 \u00acq\u2192 \u00acp,\nwe build up the following truth table:\np q p\u2192q \u00acq\u2192\u00acp\n0 0 1 1 1 1\n0 1 1 0 1 1\n1 0 0 1 0 0\n1 1 1 0 1 0\nNotice that columns 3 and 5 are identical.\n\n\n\n\n6 TOPIC 1. LOGIC AND PROOFS\nAlternatively, we can try to convert one to the other\nusing the following standard logical equivalences:\n\u00ac\u00acp\u21d4 p Double negation\np\u2227q\np\u2228q\u21d4\n\u21d4q\u2227p\nq\u2228p)\nCommutative laws\np\u2227(q\u2227r)\np\u2228(q\u2228r)\u21d4\n\u21d4(p\u2227q)\u2227r\n(p\u2228q)\u2228r)\nAssociative laws\np\u2227(q\u2228r)\np\u2228(q\u2227r)\u21d4\n\u21d4(p\u2227q)\u2228(p\u2227r)\n(p\u2228q)\u2227(p\u2228r))\nDistributive laws\np\u2227p\np\u2228p\u21d4\n\u21d4p\np)\nIdempotent laws\n\u00ac(p\u2227q)\n\u00ac(p\u2228q)\u21d4\n\u21d4\u00acp\u2228 \u00acq\n\u00acp\u2227 \u00acq)\nDe Morgan\u2019s laws\np\u2192q\np\u2192q\u21d4\n\u21d4\u00acp\u2228q\n\u00ac(p\u2227 \u00acq))\nImplication laws\nFor example, we can show that p\u2192q\u21d4 \u00acq\u2192 \u00acpas\nfollows:\np\u2192q\u21d4 \u00acp\u2228q\n\u21d4q\u2228 \u00acp\n\u21d4 \u00ac\u00ac q\u2228 \u00acp\n\u21d4 \u00acq\u2192 \u00acp\nExample 1.9 Show that \u00ac(p\u2228q)and\u00acp\u2227\u00acqare logically\nequivalent. This equivalence is one of De Morgan\u2019s laws\nfor propositions, named after the English mathematician\nAugustus De Morgan, of the mid-19th century.\nExample 1.10 Use De Morgan\u2019s laws (and the other\nlogic laws) to expand and simplify the negations of these\npropositions.\n1.p\u2227 \u00acq\n2.(p\u2192q)\n3.(p\u2228 \u00acq)\u2227(\u00acp\u2228r)\n4.(p\u2227 \u00acq\u2227 \u00acr)\u2228 \u00ac(q\u2228 \u00acr).\n\n\n\n\n1.5. INTRODUCTION TO PROOFS 7\nLogical implication\nLetAandBbe propositions. We say that Alogically\nimplies B, written A\u21d2B, if, whenever we assign truth\nvalues to the propositional variables they contain, if A\nis true then Bis also true. Thus A\u21d2Bif and only if\nA\u2192Bis a tautology, and A\u21d4Bif and only if A\u21d2B\nandB\u21d2A. That is, A\u21d4Bif and only if A\u2194Bis a\ntautology.\nTo clarify, the symbol \u2192is a logical operation (defined\nusing a truth table) while the symbol \u21d2usually denotes\nsome process of deduction.\n1.5 Introduction to proofs\nMathematics is different from many other facets of life, as\nit is based on logic and proof. One of the most important\nreasons to study mathematics is to improve your ability\nto think logically, precisely, carefully and critically.\nDefinitions\nAn important principle in mathematics is the need for\nprecise definitions. Every technical word or symbol in\nmathematics has a precise definition. It must be un-\nambiguous whether an object satisfies a definition or not.\nExample 1.11 Which of the following are good defini-\ntions?\n1. An integer is even if it is something like 2 or 4.\n2. An integer niseven if there exists an integer k\nsuch that n= 2k.\n3. An integer niseven if there exists an integer k\nsuch that n= 2k+ 1.\n4. An integer niseven ifn\u2208A.\n5. An integer niseven ifsin(n) = cos( n) = 0 .\nTheorems\nAtheorem is a mathematical proposition that\nis true.\nTheorems are essentially conditional statements, although\nthe wording of a theorem may obscure this fact. Since\ntheorems are conditional then we have to start doing\nmathematics with some initial facts that are assumed\nto be true: these are given by definitions and axioms.\nThere are several basic types of theorem:\n\n\n\n\n",
      },
      {
        name: "Introduction to proofs",
        content:
          "1.5. INTRODUCTION TO PROOFS 7\nLogical implication\nLetAandBbe propositions. We say that Alogically\nimplies B, written A\u21d2B, if, whenever we assign truth\nvalues to the propositional variables they contain, if A\nis true then Bis also true. Thus A\u21d2Bif and only if\nA\u2192Bis a tautology, and A\u21d4Bif and only if A\u21d2B\nandB\u21d2A. That is, A\u21d4Bif and only if A\u2194Bis a\ntautology.\nTo clarify, the symbol \u2192is a logical operation (defined\nusing a truth table) while the symbol \u21d2usually denotes\nsome process of deduction.\n1.5 Introduction to proofs\nMathematics is different from many other facets of life, as\nit is based on logic and proof. One of the most important\nreasons to study mathematics is to improve your ability\nto think logically, precisely, carefully and critically.\nDefinitions\nAn important principle in mathematics is the need for\nprecise definitions. Every technical word or symbol in\nmathematics has a precise definition. It must be un-\nambiguous whether an object satisfies a definition or not.\nExample 1.11 Which of the following are good defini-\ntions?\n1. An integer is even if it is something like 2 or 4.\n2. An integer niseven if there exists an integer k\nsuch that n= 2k.\n3. An integer niseven if there exists an integer k\nsuch that n= 2k+ 1.\n4. An integer niseven ifn\u2208A.\n5. An integer niseven ifsin(n) = cos( n) = 0 .\nTheorems\nAtheorem is a mathematical proposition that\nis true.\nTheorems are essentially conditional statements, although\nthe wording of a theorem may obscure this fact. Since\ntheorems are conditional then we have to start doing\nmathematics with some initial facts that are assumed\nto be true: these are given by definitions and axioms.\nThere are several basic types of theorem:\n\n\n\n\n8 TOPIC 1. LOGIC AND PROOFS\n\u0088\u2018ais aB\u2019 (i.e., the object asatisfies the definition\nB).\n\u0088\u2018ifAthen B\u2019 (i.e., if ais an object that satisfies\ndefinition Athen it also satisfies definition B).\n\u0088\u2018there is an athat satisfies B\u2019 (i.e., a definition is\nnot vacuous).\nExample 1.12 Theorem: 8 is an even integer.\nExample 1.13 Theorem: If nis even then n2is even.\nExample 1.14 Theorem: Let n\u2208N. A set with nele-\nments has exactly 2nsubsets. (In this wording the theo-\nrem does not seem to be a conditional statement; express\nthis theorem as a conditional statement.)\nExample 1.15 Theorem: Let n\u2208N. There exists a set\nwithnelements.\nHypothesis and conclusion\nWhen the theorem is expressed as a conditional state-\nment A\u21d2Bthen Ais called the hypothesis andBis\ncalled the conclusion of the theorem.\nProofs\nMathematics is about facts (theorems). The interesting\nquestion is how do facts become \u201caccepted\u201d or \u201cagreed\u201d\nas part of mathematics. The discoverer of a mathemat-\nical fact is required to communicate their ideas to the\nwider community of mathematicians. But mathemati-\ncians are a hard audience to please: they are sceptical\nand don\u2019t want to be fooled. So they do not simply\nbelieve everything that they are told is true. Mathe-\nmaticians first insist on precise definitions before even\nagreeing that a claim is meaningful. Then, mathemati-\ncians are not convinced that a statement is true until\na precise, rigorous, logical argument has been provided\nand checked: a mathematical proof. The ability to think\nlogically and to read proofs not only increases mathe-\nmatical understanding, but also hones skills that can be\nused in other situations. In this section we will discuss\nsome basic methods of proof.\n\n\n\n\n1.5. INTRODUCTION TO PROOFS 9\nDirect proofs\nBy a proof of a theorem we mean a logical argument that\nestablishes the theorem to be true.\nThe most natural form of proof is a direct proof.\nSuppose that we wish to prove the theorem P\u21d2Q.\nSince P\u2192Qis true whenever Pis false, we need only\nshow that whenever Pis true, so is Q.\nTherefore:\nin a direct proof we assume that the hypothe-\nsis of the theorem, P, is true and demonstrate\nthat the conclusion, Qis true.\nIt then follows that P\u2192Qis always true.\nExamples with integers\nWe will illustrate some types of proofs by proving certain\nelementary facts about the integers. (Later on we will\nprove results about Sets and Graphs using the same types\nof proofs). We will use the following two definitions.\n1. An integer nis called even if it can be written in\nthe form n= 2kfor some integer k.\n2. An integer nis called oddif it can be written in the\nform n= 2k+ 1 for some integer k.\nExample 1.16 Prove the theorem: n= 7 is an odd\ninteger.\nExample 1.17 Prove the theorem: If nis an odd integer\nthen n+ 1is an even integer.\nProof: Let n= 2k+ 1for some integer k. Then n+ 1 =\n2k+ 1 + 1 = 2( k+ 1) is of the form 2lfor some integer\nl, and so n+ 1is even.\nWe will also use the fact that every integer is either even\nor odd but not both. The following theorem is proved\nusing a direct proof.\nExample 1.18 Prove the theorem: If nis an even inte-\nger, then n2is an even integer.\n\n\n\n\n10 TOPIC 1. LOGIC AND PROOFS\nExample 1.19 Is the following argument correct? It\nsupposedly shows that nis an even integer whenever n2\nis an even integer.\nSuppose that n2is even. Then n2= 2kfor\nsome integer k. Let n= 2lfor some integer\nl. This shows that nis even.\nExample 1.20 Prove the theorem: If xis a real number\nandx2\u22121 = 0 , then x=\u22121orx= 1.\nLaw of syllogism\nMany proofs use the law of syllogism, which states\n[(p\u2192q)\u2227(q\u2192r)]\u21d2(p\u2192r).\nExample 1.21 Suppose that xis some fixed real number,\nand let p,q,randsbe the propositions\np:x2\u22121 = 0\nr:(x+ 1)( x\u22121) = 0\ns:x+ 1 = 0 orx\u22121 = 0\nq:x=\u22121orx= 1.\nWrite out the logical expression established in the previ-\nous example. Hence, by two applications of the law of\nsyllogism we conclude that p\u21d2q, that is, the theorem is\nproved.\n1.6 Proofs by contraposition and contradiction\nThe law of contraposition\nThecontrapositive law states that the propositions p\u2192q\nand\u00acq\u2192 \u00acpare logically equivalent.\nTo prove a theorem p\u2192qby this method, we give a\ndirect proof of the proposition \u00acq\u2192 \u00acpby assuming\n\u00acqand proving \u00acp. The contrapositive law allows us to\nconclude that p\u2192q.\n\n\n\n\n",
      },
      {
        name: "Proofs by contraposition and contradiction",
        content:
          "10 TOPIC 1. LOGIC AND PROOFS\nExample 1.19 Is the following argument correct? It\nsupposedly shows that nis an even integer whenever n2\nis an even integer.\nSuppose that n2is even. Then n2= 2kfor\nsome integer k. Let n= 2lfor some integer\nl. This shows that nis even.\nExample 1.20 Prove the theorem: If xis a real number\nandx2\u22121 = 0 , then x=\u22121orx= 1.\nLaw of syllogism\nMany proofs use the law of syllogism, which states\n[(p\u2192q)\u2227(q\u2192r)]\u21d2(p\u2192r).\nExample 1.21 Suppose that xis some fixed real number,\nand let p,q,randsbe the propositions\np:x2\u22121 = 0\nr:(x+ 1)( x\u22121) = 0\ns:x+ 1 = 0 orx\u22121 = 0\nq:x=\u22121orx= 1.\nWrite out the logical expression established in the previ-\nous example. Hence, by two applications of the law of\nsyllogism we conclude that p\u21d2q, that is, the theorem is\nproved.\n1.6 Proofs by contraposition and contradiction\nThe law of contraposition\nThecontrapositive law states that the propositions p\u2192q\nand\u00acq\u2192 \u00acpare logically equivalent.\nTo prove a theorem p\u2192qby this method, we give a\ndirect proof of the proposition \u00acq\u2192 \u00acpby assuming\n\u00acqand proving \u00acp. The contrapositive law allows us to\nconclude that p\u2192q.\n\n\n\n\n1.6. PROOFS BY CONTRAPOSITION AND CONTRADICTION 11\nExample 1.22 Find the contrapositive of the statement:\nIf I have studied hard enough, I will find the\nexam easy.\nSolution. If I find the exam difficult, then I didn\u2019t study hard\nenough.\nExample 1.23 Prove the following theorem using the\nlaw of contrapositive: If x+y > 100, then x > 50or\ny >50.\nExample 1.24 Prove the following theorem using the\nlaw of contrapositive: If nis an integer and n2is even,\nthen nis even.\nProof by contradiction\nA very different style of proof is proof by contradiction.\nTo prove the theorem p\u2192q: Assume pand\u00acqare true\nand deduce a false statement r. Since ( p\u2227 \u00acq)\u2192ris\ntrue but ris false, we can conclude that the premise\np\u2227\u00acqof this conditional statement is false. But then its\nnegation \u00ac(p\u2227 \u00acq) is true, which is logically equivalent\nto the desired statement p\u2192q.\nExample 1.25 Show that \u00ac(p\u2227\u00acq)is logically equivalent\ntop\u2192q.\nExample 1.26 Prove by contradiction: If a, b\u2208Zare\nsuch that ais odd and a+bis even then bis odd.\nSolution. Assume, for a contradiction, that ais odd, a+bis\neven and bis even. So a= 2k+ 1andb= 2lfor some integers\nk, l. But then a+b= 2k+ 1 + 2 l= 2(k+l) + 1. Since k+l\u2208Zit\nfollows that a+bis odd, but this contradicts the fact that a+bis\neven. Hence bcannot have been even and so bmust be odd.\nExample 1.27 Prove by contradiction: If a, b\u2208Zthen\na2\u22124b\u0338= 2.\nProving this theorem by contradiction seems natural be-\n\n\n\n\n12 TOPIC 1. LOGIC AND PROOFS\ncause the theorem expresses a negative idea (that a2\u22124b\nis not equal to 2). Thus, when we negate the conclusion,\nwe obtain the positive statement that a2\u22124b= 2.\nExample 1.28 Prove by contradiction that there is no\nrational number rsuch that r2= 2.\nRecall that a rational number is one that can be writ-\nten as the quotient of two integers. Note also that the\ntheorem to be proved can be written as the conditional\nstatement: If ris a rational number, then r2\u0338= 2. Again\nproving this theorem by contradiction seems natural be-\ncause the theorem expresses a negative idea (that r2is\nnot equal to 2). Thus, when we negate the conclusion,\nwe obtain the positive statement that there is a rational\nnumber rsuch that r2= 2.\nExample 1.29 Prove by contradiction: If a, b\u2208Rare\nsuch that a\u2208Qanda+b\u0338\u2208Qthen b\u0338\u2208Q.\nExample 1.30 Prove by contradiction: If nis the sum\nof the squares of two odd integers, then nis not a perfect\nsquare.\nExample 1.31 Prove by contradiction that there are in-\nfinitely many prime numbers.\nSolution. (This proof is due to the great Euclid, who lived around\n300 BC in ancient Greece.)\nAssume, for a contradiction, that there are finitely many primes.\nWrite them as {p1, p2, ...p n}for some natural number n. Consider\nthe number q=p1p2...pn+1. By its construction, qis not divisible\nby any of the primes p1, p2, ...p n. Hence, qmust itself be prime\nor it must be divisible by another prime that is not in the set\n{p1, p2, ...p n}. In either case, we find a prime that is not in our\noriginal set. Hence we achieve our contradiction.\nIf and only if statements\nTo prove: Aif and only if Bthen we need to prove A\u2192B\nandB\u2192A. Sometimes \u201cif and only if\u201d is abbreviated\nas \u201ciff\u201d.\nExample 1.32 Prove that nis even if and only if n2is\neven.\n\n\n\n\n1.7. COUNTEREXAMPLES AND PROOF BY CASES 13\n1.7 Counterexamples and proof by cases\nProof by cases\nThere are other types of proofs as well. One method\nof proof that is quite important in discrete mathematics\nis proof by mathematical induction , which is discussed\nlater in the course. Another type of proof is a proof by\ncases, in which the theorem to be proved is subdivided\ninto parts, each of which is proved separately. The next\nexample demonstrates this technique.\nExample 1.33 Show that if nis an integer then n3\u2212n\nis even. (Since every integer nis either even or odd,\nconsider these two cases.)\nExample 1.34 Letx, y\u2208R. Prove that |xy|=|x| \u00b7 |y|.\nCounterexamples\nTo close this section, we will briefly consider the problem\nof disproving a proposition p\u2192q, that is, of showing that\nit is false. A conditional statement is false only when its\npremise is true and its conclusion is false, we must find\nan instance in which pis true and qis false. Such an\ninstance is called a counter-example to the statement.\nExample 1.35 For example, consider the statement: If\nan integer nis the sum of the squares of two even in-\ntegers, then nis not a perfect square. To disprove this\nstatement, find a counterexample.\n1.8 Proof by construction\nThis method is a much more \u2018positive\u2019 method than proof\nby contradiction. It is a method for proving the existence\nof certain objects, by actually finding one.\nExample 1.36 Prove that for every positive integer k\nthere exists a positive integer ngreater than ksuch that\nthe remainder of nwhen divided by 5is1.\nWe can prove it by constructing such a positive integer\n\n\n\n\n",
      },
      {
        name: "Counterexamples and proof by cases",
        content:
          "1.7. COUNTEREXAMPLES AND PROOF BY CASES 13\n1.7 Counterexamples and proof by cases\nProof by cases\nThere are other types of proofs as well. One method\nof proof that is quite important in discrete mathematics\nis proof by mathematical induction , which is discussed\nlater in the course. Another type of proof is a proof by\ncases, in which the theorem to be proved is subdivided\ninto parts, each of which is proved separately. The next\nexample demonstrates this technique.\nExample 1.33 Show that if nis an integer then n3\u2212n\nis even. (Since every integer nis either even or odd,\nconsider these two cases.)\nExample 1.34 Letx, y\u2208R. Prove that |xy|=|x| \u00b7 |y|.\nCounterexamples\nTo close this section, we will briefly consider the problem\nof disproving a proposition p\u2192q, that is, of showing that\nit is false. A conditional statement is false only when its\npremise is true and its conclusion is false, we must find\nan instance in which pis true and qis false. Such an\ninstance is called a counter-example to the statement.\nExample 1.35 For example, consider the statement: If\nan integer nis the sum of the squares of two even in-\ntegers, then nis not a perfect square. To disprove this\nstatement, find a counterexample.\n1.8 Proof by construction\nThis method is a much more \u2018positive\u2019 method than proof\nby contradiction. It is a method for proving the existence\nof certain objects, by actually finding one.\nExample 1.36 Prove that for every positive integer k\nthere exists a positive integer ngreater than ksuch that\nthe remainder of nwhen divided by 5is1.\nWe can prove it by constructing such a positive integer\n\n\n\n\n",
      },
      {
        name: "Proof by construction",
        content:
          "1.7. COUNTEREXAMPLES AND PROOF BY CASES 13\n1.7 Counterexamples and proof by cases\nProof by cases\nThere are other types of proofs as well. One method\nof proof that is quite important in discrete mathematics\nis proof by mathematical induction , which is discussed\nlater in the course. Another type of proof is a proof by\ncases, in which the theorem to be proved is subdivided\ninto parts, each of which is proved separately. The next\nexample demonstrates this technique.\nExample 1.33 Show that if nis an integer then n3\u2212n\nis even. (Since every integer nis either even or odd,\nconsider these two cases.)\nExample 1.34 Letx, y\u2208R. Prove that |xy|=|x| \u00b7 |y|.\nCounterexamples\nTo close this section, we will briefly consider the problem\nof disproving a proposition p\u2192q, that is, of showing that\nit is false. A conditional statement is false only when its\npremise is true and its conclusion is false, we must find\nan instance in which pis true and qis false. Such an\ninstance is called a counter-example to the statement.\nExample 1.35 For example, consider the statement: If\nan integer nis the sum of the squares of two even in-\ntegers, then nis not a perfect square. To disprove this\nstatement, find a counterexample.\n1.8 Proof by construction\nThis method is a much more \u2018positive\u2019 method than proof\nby contradiction. It is a method for proving the existence\nof certain objects, by actually finding one.\nExample 1.36 Prove that for every positive integer k\nthere exists a positive integer ngreater than ksuch that\nthe remainder of nwhen divided by 5is1.\nWe can prove it by constructing such a positive integer\n\n\n\n\n14 TOPIC 1. LOGIC AND PROOFS\nn. Simply take n= 5k+ 1. This is greater than k, and\nwhen we divide nby 5 we get remainder 1.\n1.9 Language in proofs\nHuman understanding and communication rely on lan-\nguage. The purpose of a proof is to communicate the\ntruth of a statement through language. Remember that\na proof is supposed to convince a sceptical reader that a\nstatement is true. The right way to read a proof is to not\nbelieve it, but to challenge the proof and argue with it,\nand to try to break it. The right way to write a proof is\nto make the argument so clear and natural that no-one\ncan doubt that the statement is true. To write a beauti-\nful and convincing proof you should give the reader clues\nto what is going on both locally and in the proof as a\nwhole. In the previous sections we looked at the proof\nstructure as a whole; now we look at the usage of ordi-\nnary English, which mostly gives the local information\nabout the proof.\nRules of thumb for proofs\n1. Tell the reader from the start what the general ap-\nproach of the proof will be.\n2. Introduce names for objects before you use them.\nEnsure that every technical word has a precise mean-\ning that has been defined earlier (or is standard\nterminology in the subject).\n3. Use words like \u201chence\u201d, \u201ctherefore\u201d, \u201cthus\u201d, \u201cso\u201d,\n\u201cthen\u201d, \u201cnote,\u201d \u201crecall\u201d etc as signposts.\nA proof that is well laid-out and signposted is much easier\nto read.\nWe now outline some starting statements and end cues\nthat you might use in some common proof formats.\nDirect proof\nTo Prove: Implication p\u2192q. Ifptrue then qtrue.\nMethod: Assume ptrue and deduce qtrue.\nStart Cues: \u201cWe prove directly . . . \u201d, \u201cLet pbe as in\nthe statement\u201d.\nEnd Cues: \u201cq, as required.\u201d \u201cQ.E.D.\u201d, 2, \u201c. . . as was\nto be shown\u201d/ Restatement of the result.\nThe logical structure of direct proof is the most simple-\nminded and most common: assume the hypothesis or\nhypotheses and deduce the conclusion. Direct proof is\nfrequently cued in the first sentence.\nThe \u201cQ.E.D.\u201d abbreviating the Latin \u201cQuod Erat Demon-\nstrandum\u201d that you may have seen or written ought to\nbe a reliable cue to the end of a direct proof.\n\n\n\n\n",
      },
      {
        name: "Language in proofs",
        content:
          "14 TOPIC 1. LOGIC AND PROOFS\nn. Simply take n= 5k+ 1. This is greater than k, and\nwhen we divide nby 5 we get remainder 1.\n1.9 Language in proofs\nHuman understanding and communication rely on lan-\nguage. The purpose of a proof is to communicate the\ntruth of a statement through language. Remember that\na proof is supposed to convince a sceptical reader that a\nstatement is true. The right way to read a proof is to not\nbelieve it, but to challenge the proof and argue with it,\nand to try to break it. The right way to write a proof is\nto make the argument so clear and natural that no-one\ncan doubt that the statement is true. To write a beauti-\nful and convincing proof you should give the reader clues\nto what is going on both locally and in the proof as a\nwhole. In the previous sections we looked at the proof\nstructure as a whole; now we look at the usage of ordi-\nnary English, which mostly gives the local information\nabout the proof.\nRules of thumb for proofs\n1. Tell the reader from the start what the general ap-\nproach of the proof will be.\n2. Introduce names for objects before you use them.\nEnsure that every technical word has a precise mean-\ning that has been defined earlier (or is standard\nterminology in the subject).\n3. Use words like \u201chence\u201d, \u201ctherefore\u201d, \u201cthus\u201d, \u201cso\u201d,\n\u201cthen\u201d, \u201cnote,\u201d \u201crecall\u201d etc as signposts.\nA proof that is well laid-out and signposted is much easier\nto read.\nWe now outline some starting statements and end cues\nthat you might use in some common proof formats.\nDirect proof\nTo Prove: Implication p\u2192q. Ifptrue then qtrue.\nMethod: Assume ptrue and deduce qtrue.\nStart Cues: \u201cWe prove directly . . . \u201d, \u201cLet pbe as in\nthe statement\u201d.\nEnd Cues: \u201cq, as required.\u201d \u201cQ.E.D.\u201d, 2, \u201c. . . as was\nto be shown\u201d/ Restatement of the result.\nThe logical structure of direct proof is the most simple-\nminded and most common: assume the hypothesis or\nhypotheses and deduce the conclusion. Direct proof is\nfrequently cued in the first sentence.\nThe \u201cQ.E.D.\u201d abbreviating the Latin \u201cQuod Erat Demon-\nstrandum\u201d that you may have seen or written ought to\nbe a reliable cue to the end of a direct proof.\n\n\n\n\n1.10. PREDICATES AND QUANTIFIERS 15\nProof by contraposition\nTo Prove: Implication p\u2192q. Ifp(true) then q(true).\nMethod: Prove \u201c \u00acq\u2192 \u00acp\u201d. Assume not q, deduce not\np.\nStart Cues: \u201cWe prove the contrapositive\u201d, \u201cWe show\nnotqimplies not p\u201d, \u201cWe procede indirectly\u201d, \u201cAs-\nsume not q. . . \u201d\nEnd Cues: \u201cSo, by contraposition\u201d, Restatement of the\noriginal \u2018 p\u2192q\u2019\nThe thing to remember is that once you start down this\npath assuming \u00acqand deducing \u00acp, the proof is really a\ndirect one, although something different than what you\nstarted with.\nProof by contradiction\nTo Prove: Implication p\u2192q. Ifpthen q.\nMethod: Assume pAND not q, deduce a contradiction\nStart Cues: \u201cWe prove by contradiction\u201d, \u201cAssume, for\na contradiction\u201d, \u201cSuppose (not q)\u201d\nEnd Cues: \u201cWhich is a contradiction. Hence qmust be\ntrue, which completes the proof.\u201d\nProof by cases\nTo Prove: (p\u2228q)\u2192r\nMethod: Prove p\u2192r, then prove q\u2192r\nStart Cues: \u201cWe prove by cases . . . \u201d\nCase start: \u201cCase 1 (2, . . . )\u201d, \u201cIn the first case\u201d\nCase end: \u201c. . . finishes Case 1\u201d, \u201cSo we are done in the\nfirst case\u201d\nEnd Cues: \u201cSo in either case . . . \u201d\n1.10 Predicates and quantifiers\nApredicate is a function on some domain Dsuch that\nP(x) is a proposition/statement for each value x\u2208D.\nFor example, for D=N,P(n) could be any of\n1.nis even.\n2.nis prime\n3.n= 3\n4.n >512\n5. 1 + 2 + \u00b7\u00b7\u00b7+n=n(n+ 1)/2\nThese are not predicates P(n):\n\n\n\n\n",
      },
      {
        name: "Predicates and quantifiers",
        content:
          "1.10. PREDICATES AND QUANTIFIERS 15\nProof by contraposition\nTo Prove: Implication p\u2192q. Ifp(true) then q(true).\nMethod: Prove \u201c \u00acq\u2192 \u00acp\u201d. Assume not q, deduce not\np.\nStart Cues: \u201cWe prove the contrapositive\u201d, \u201cWe show\nnotqimplies not p\u201d, \u201cWe procede indirectly\u201d, \u201cAs-\nsume not q. . . \u201d\nEnd Cues: \u201cSo, by contraposition\u201d, Restatement of the\noriginal \u2018 p\u2192q\u2019\nThe thing to remember is that once you start down this\npath assuming \u00acqand deducing \u00acp, the proof is really a\ndirect one, although something different than what you\nstarted with.\nProof by contradiction\nTo Prove: Implication p\u2192q. Ifpthen q.\nMethod: Assume pAND not q, deduce a contradiction\nStart Cues: \u201cWe prove by contradiction\u201d, \u201cAssume, for\na contradiction\u201d, \u201cSuppose (not q)\u201d\nEnd Cues: \u201cWhich is a contradiction. Hence qmust be\ntrue, which completes the proof.\u201d\nProof by cases\nTo Prove: (p\u2228q)\u2192r\nMethod: Prove p\u2192r, then prove q\u2192r\nStart Cues: \u201cWe prove by cases . . . \u201d\nCase start: \u201cCase 1 (2, . . . )\u201d, \u201cIn the first case\u201d\nCase end: \u201c. . . finishes Case 1\u201d, \u201cSo we are done in the\nfirst case\u201d\nEnd Cues: \u201cSo in either case . . . \u201d\n1.10 Predicates and quantifiers\nApredicate is a function on some domain Dsuch that\nP(x) is a proposition/statement for each value x\u2208D.\nFor example, for D=N,P(n) could be any of\n1.nis even.\n2.nis prime\n3.n= 3\n4.n >512\n5. 1 + 2 + \u00b7\u00b7\u00b7+n=n(n+ 1)/2\nThese are not predicates P(n):\n\n\n\n\n16 TOPIC 1. LOGIC AND PROOFS\n1.n=x\n2. 1 + 2 + \u00b7\u00b7\u00b7+n=n(n+ 1)/2 for all n\nA statement like p(n) that includes the variable nis not\na proposition, since it cannot be said to be true or false\nuntil we know what nis. There are two ways we can turn\nit into a proposition. The first is to substitute in some\nparticular value of n, to get propositions like p(4) and\np(17). The other way is to quantify the predicate. To do\nthis we use one of the two quantifiers \u2200and\u2203. The first\nof these, \u2200, is called the universal quantifier . It means\n\u201cFor all \u201d, or \u201cFor every \u201d. So, for example, the\nstatement \u2200n p(n) means \u201cFor every n,nis even\u201d. The\nsecond quantifier, \u2203, is called the existential quantifier .\nIt means \u201cFor some \u201d, or \u201cThere exists such that\u201d.\nFor example, \u2203n p(n) means \u201cThere is some nsuch that n\nis even\u201d. So in this case \u2200n p(n) is false, whereas \u2203n p(n)\nis true. Sometimes we make the domain of definition\nmore explicit: for example, we could have written these\nexamples as \u2200n\u2208N(p(n)) and \u2203n\u2208N(p(n)).\nIf we quantify a predicate pto get a proposition, the truth\nvalue of a resulting proposition depends on the truth val-\nues of the various propositions p(d) for the elements dof\nthe domain of definition. To be precise, \u2200x p(x) is true if\np(d) is true for every element dof the domain of defini-\ntion of p. On the other hand, \u2203x p(x) is true if p(d) is true\nforat least one element dof the domain of definition.\nExample 1.37 LetP(n)be the predicate with domain N\nsuch that P(n)is true if and only if nis even. So P(1)\nis false and P(2)is true.\nThen\u2200n\u2208N, P(n)is false and \u2203n\u2208N, P(n)is true.\nExample 1.38 LetP(n)be the predicate with domain Z\nsuch that P(n)is true if and only if n2\u2265n.\nWhat are P(1)andP(2)?\nIs\u2200n\u2208Z, P(n)true or false?\nIs\u2203n\u2208Z, P(n)true or false?\nWhat happens if we change P(n)to be the predicate n2>\nn?\nExample 1.39 Consider the following statements (this\nexample is due to Lewis Carroll, and is discussed in Rosen\u2019s\nbook). The first two are called premises and the third is\ncalled the conclusion . The entire set is called an argu-\nment .\n\u201cAll lions are fierce\u201d\n\u201cSome lions do not drink coffee.\u201d\n\u201cSome fierce creatures do not drink coffee.\u201d\nLetP(x),Q(x), and R(x)be the statements \u201c xis a lion,\u201d\n\n\n\n\n1.10. PREDICATES AND QUANTIFIERS 17\n\u201cxis fierce,\u201d and \u201c xdrinks coffee,\u201d respectively. As-\nsuming that the universe of discourse is the set of all\ncreatures, express the statements in the argument using\nquantifiers and P(x),Q(x), and R(x).\nExample 1.40 Consider the following argument:\nAll humans make mistakes.\nI do not make mistakes.\nTherefore, I am not a human.\nExpress this argument using quantifiers.\nSolution. Letp(x)be the statement \u201dx is human\u201d.\nLetq(x)be the statement \u201dx makes mistakes\u201d.\nThe statement \u201cAll humans make mistakes\u201d is \u2200x, p(x)\u2192q(x).\nLet the constant symbol astand for the individual \u201dI\u201d.\nThen the argument becomes:\n(\u2200x(p(x)\u2192q(x)))\u2227 \u00acq(a)\u2192 \u00acp(a).\nFree and bound variables\nWe refer to the variable nin a predicate p(n) as a free\nvariable. This is because we are free to substitute any\nparticular value of nto get a proposition. In contrast,\nthe variables nin\u2200n p(n) or in \u2203n p(n) are called bound\nvariables. They are bound by the quantifiers, so we can-\nnot substitute particular values in.\nPredicates with more than one variable\nWe allow predicates to have two or more variables. For\nexample, we may use p(x, y) to denote the predicate \u201c x\nis greater than y\u201d, (\u201cx > y \u201d) with domain of definition\nthe set R\u00d7R. Then xandyare both free variables in\np(x, y). We can quantify either one of the variables, or\nwe can quantify both of them. For example, \u2200y p(x, y)\nis a predicate that has only one free variable, namely\nx. In this case, it means \u201c xis greater than every real\nnumber\u201d. Of course, this is false for every real number\nx(since p(x, x+ 1) is false), so \u2203x\u2200y p(x, y) is a false\nproposition. On the other hand, consider the predicate\n\u2203x p(x, y), which has yas its only free variable. This\nmeans \u201cSome real number is greater than y\u201d. This is true\nfor every y, since for example p(y+ 1, y) holds. So the\nproposition \u2200y\u2203x p(x, y) is true. This example shows that\nwe have to be careful about the order of the quantifiers:\n\u2203x\u2200y p(x, y) and\u2200y\u2203x p(x, y) do not have the same truth\nvalue.\nIf the predicate has more than one variable, it is not\nnecessary for the domains of definition for the different\nvariables to be the same. For example, if Pdenotes the\nset of all people, then we can use p(x, y) to denote the\nrelation \u201cperson xis more than yyears old\u201d, with domain\n\n\n\n\n18 TOPIC 1. LOGIC AND PROOFS\nof definition P\u00d7N. Of course, if we intend to use both\np(x, y) and p(y, x) then the domains should be the same.\nExample 1.41 Suppose we define the predicates p(x, y)\nfor \u201cxknows y\u201d,q(x, y)for \u201cxlikes y\u201d,r(x)for \u201cxis\nrich\u201d and s(x)for \u201cxis famous\u201d, and the constant sym-\nbolafor Andrew. Here are some examples of statements\nwe can translate into predicate logic.\n\u0088Everybody knows Andrew: \u2200x p(x, a).\n\u0088Everybody who knows Andrew likes him: \u2200x(p(x, a)\u2192\nq(x, a)).\n\u0088Nobody likes a person who is famous but not rich:\n\u2200x\u2200y((s(x)\u2227 \u00acr(x))\u2192 \u00acq(y, x)).\n\u0088Some famous people are not rich: \u2203x(s(x)\u2227\u00acr(x)).\n\u0088Not every rich person is famous: either \u00ac\u2200x(r(x)\u2192\ns(x))or\u2203x(r(x)\u2227 \u00acs(x)).\n\u0088Everybody likes anybody who is rich: \u2200x\u2200y(r(y)\u2192\nq(x, y))or\u2200y(r(y)\u2192 \u2200x q(x, y)).\n\u0088Andrew likes everybody who is not rich: \u2200x(\u00acr(x)\u2192\nq(a, x)).\n\u0088Everybody likes somebody: \u2200x\u2203y q(x, y).\nNotice that we actually translate \u201cSome famous people\nare not rich\u201d as \u201cAt least one famous person is not rich\u201d.\nExample 1.42 LetQ(x, y, z )be the statement \u201c x+y=\nz\u201d. What are the truth values of the statements\n\u2200x\u2200y\u2203zQ(x, y, z )and \u2203z\u2200x\u2200yQ(x, y, z )?\nExample 1.43 Use quantifiers to express the statement\n\u201cThere is a woman who has taken a flight on every airline\nin the world.\u201d\n1.11 *Tautologies and implications in predicate\nlogic\nA proposition in predicate logic that is always true, no\nmatter what the domains of definition and meaning of\nthe predicates it contains (so long as the domains of def-\ninition are non-empty) is said to be a tautology .\n\n\n\n\n",
      },
      {
        name: "*Tautologies and implications in predicate logic",
        content:
          "18 TOPIC 1. LOGIC AND PROOFS\nof definition P\u00d7N. Of course, if we intend to use both\np(x, y) and p(y, x) then the domains should be the same.\nExample 1.41 Suppose we define the predicates p(x, y)\nfor \u201cxknows y\u201d,q(x, y)for \u201cxlikes y\u201d,r(x)for \u201cxis\nrich\u201d and s(x)for \u201cxis famous\u201d, and the constant sym-\nbolafor Andrew. Here are some examples of statements\nwe can translate into predicate logic.\n\u0088Everybody knows Andrew: \u2200x p(x, a).\n\u0088Everybody who knows Andrew likes him: \u2200x(p(x, a)\u2192\nq(x, a)).\n\u0088Nobody likes a person who is famous but not rich:\n\u2200x\u2200y((s(x)\u2227 \u00acr(x))\u2192 \u00acq(y, x)).\n\u0088Some famous people are not rich: \u2203x(s(x)\u2227\u00acr(x)).\n\u0088Not every rich person is famous: either \u00ac\u2200x(r(x)\u2192\ns(x))or\u2203x(r(x)\u2227 \u00acs(x)).\n\u0088Everybody likes anybody who is rich: \u2200x\u2200y(r(y)\u2192\nq(x, y))or\u2200y(r(y)\u2192 \u2200x q(x, y)).\n\u0088Andrew likes everybody who is not rich: \u2200x(\u00acr(x)\u2192\nq(a, x)).\n\u0088Everybody likes somebody: \u2200x\u2203y q(x, y).\nNotice that we actually translate \u201cSome famous people\nare not rich\u201d as \u201cAt least one famous person is not rich\u201d.\nExample 1.42 LetQ(x, y, z )be the statement \u201c x+y=\nz\u201d. What are the truth values of the statements\n\u2200x\u2200y\u2203zQ(x, y, z )and \u2203z\u2200x\u2200yQ(x, y, z )?\nExample 1.43 Use quantifiers to express the statement\n\u201cThere is a woman who has taken a flight on every airline\nin the world.\u201d\n1.11 *Tautologies and implications in predicate\nlogic\nA proposition in predicate logic that is always true, no\nmatter what the domains of definition and meaning of\nthe predicates it contains (so long as the domains of def-\ninition are non-empty) is said to be a tautology .\n\n\n\n\n1.11. *TAUTOLOGIES AND IMPLICATIONS IN PREDICATE LOGIC 19\nExample 1.44\n1.\u2200x\u2200y(p(x, y)\u2192p(y, x))is not a tautology.\n2.\u2203x\u2203y(p(x, y)\u2192p(y, x))is a tautology.\n3.\u2203x\u2200y p(x, y)\u2192 \u2200y\u2203x p(x, y)is a tautology.\n4.\u2200y\u2203x p(x, y)\u2192 \u2203x\u2200y p(x, y)is not a tautology.\nProof:\n1. To show that a proposition is nota tautology, we\nneed to find some domain of definition and some\nmeaning for the predicate in which the proposition\nis false. In this case we can take the domain to\nbeRandp(x, y) to be \u201c x > y \u201d. Then p(1,0) is\ntrue and p(0,1) is false, so p(1,0)\u2192p(0,1) is false.\nThus there is some ysuch that p(1, y)\u2192p(y,1) is\nfalse, so \u2200y(p(1, y)\u2192p(y,1)) is false. Therefore\nthere is some xfor which \u2200y(p(x, y)\u2192p(y, x))\nis false, so \u2200x\u2200y(p(x, y)\u2192p(y, x)) is false. Thus\n\u2200x\u2200y(p(x, y)\u2192p(y, x)) is not a tautology.\n2. To show that a proposition isa tautology, we need\nto show it is true in any non-empty domain of def-\ninition and any meaning of the predicate. So let D\nbe a non-empty set, and let p(x, y) be a predicate\nwith domain of definition D\u00d7D. Then, since Dis\nnon-empty, we can find some d\u2208D. Now p(d, d)\nis either true or it is false: either way, p(d, d)\u2192\np(d, d) is true. Therefore there is some y\u2208D\nsuch that p(d, y)\u2192p(y, d) is true, so \u2203y(p(d, y)\u2192\np(y, d)) is true. Thus there is some x\u2208Dsuch that\n\u2203y(p(x, y)\u2192p(y, x)) is true, so \u2203x\u2203y(p(x, y)\u2192\np(y, x)) is true. Since this is true for any domain\nDand any predicate p,\u2203x\u2203y(p(x, y)\u2192p(y, x)) is\na tautology.\n3. Exercise\n4. Exercise\nSome implications\nRecall that we say propositions AandBarelogically\nequivalent (written A\u21d4B) ifA\u2194Bis a tautology, in\nother words if AandBmust have the same truth value.\nWe say that Alogically implies B(written A\u21d2B) if\nA\u2192Bis a tautology, in other words, if Ais true then\nBmust be true.\n\n\n\n\n20 TOPIC 1. LOGIC AND PROOFS\nExample 1.45\n1.\u2200x\u2200y p(x, y)\u21d4 \u2200y\u2200x p(x, y).\n2.\u2203x\u2203y p(x, y)\u21d4 \u2203y\u2203x p(x, y).\nProof:\n1. Let DandEbe non-empty sets, and let pbe a\npredicate with domain of definition D\u00d7E. Then\n\u2200x\u2200y p(x, y) is true if and only if p(x, y) is true\nfor every ( x, y)\u2208D\u00d7E, and the same holds for\n\u2200y\u2200x p(x, y). So \u2200x\u2200y p(x, y) and \u2200y\u2200x p(x, y) al-\nways have the same truth value.\n2. Exercise.\nNegating quantifiers\n1.\u00ac(\u2200n, p(n))\u21d4 \u2203 n,(\u00acp(n))\n2.\u00ac(\u2203n, p(n))\u21d4 \u2200 n,(\u00acp(n))\nProof:\n1. Let Dbe a non-empty set and let pbe a predicate\nwith domain of definition D. Suppose \u00ac\u2200x p(x) is\ntrue. Then \u2200x p(x) is false, in other words it is not\nthe case that p(x) is true for every x\u2208D. So there\nmust be some x\u2208Dfor which p(x) is false. Then\n\u00acp(x) is true, so \u2203x\u00acp(x) is true.\nOn the other hand, if \u00ac\u2200x p(x) is false, then \u2200x p(x)\nis true, so p(x) is true for every x\u2208D. Thus \u00acp(x)\nis false for every x\u2208D, in other words there is no\nx\u2208Dfor which \u00acp(x) is true, so \u2203x\u00acp(x) is false.\n2. Exercise.\nExample 1.46 Re-write these propositions without using\nany negation symbols.\n1.\u00ac\u2200x\u2208Z,\u2203y\u2208Z, xy= 1.\n2.\u00ac\u2203x\u2208R,\u2203y\u2208Q, xy > 1.\nSolution.\n1.\u2203x\u2208Z,\u2200y\u2208Z, xy\u0338= 1.\n2.\u2200x\u2208R,\u2200y\u2208Q, xy\u2a7d1.\n\n\n\n\nIntegers and Divisibility\n2.1 Definitions\nBasic objects we use in this course\n\u0088Natural numbers : These are 0, 1, 2, 3, 4, 5, . . ..\nThe set of all natural numbers is denoted by N.\nWe sometimes write Z\u22651orPfor the set {1,2,3, . . .}\nof natural numbers that are \u22651.\n\u0088Integers : These are . . ., \u20133, \u20132, \u20131, 0, 1, 2, 3, . . ..\nThe set of all integers is denoted by Z.\n\u0088Variables : We use symbols such as m,n,r,s,t\nto denote integers whose values are variable or un-\nknown; we call these integer variables .\nFactors\nLetmandnbe integers. Then we say that mis afactor\nofn(or a divisor ofn), or that mdivides n, ifn=k\u00b7m\nfor some integer k.\nPrime numbers\nAprime number is a positive integer nwhich has exactly\ntwo positive factors, namely 1 and nitself.\nRational numbers\nArational number is any number rthat can be written\nin the formm\nnwhere mandnare integers and n >0.\nThe integer mis called the numerator and the integer n\nis called the denominator of the rational number r=m\nn.\nThe set of all rational numbers is denoted by Q.\nExample 2.1 5,0,2\n\u22123(=\u22122\n3), and11\n123are rational\nnumbers.\nEvery integer kis a rational number (because k=k\n1).\n21\n\n\n\n\n",
      },
    ],
  },
  {
    name: "Integers and Divisibility",
    definition: {
      simple:
        "\n\nIntegers are whole numbers that can be positive, negative or zero. Divisibility refers to the property of a number being divisible by another number without leaving a remainder. For example, 10 is divisible by 2 because 10 can be divided into 2 equal parts of 5.",
    },
    childs: [
      {
        name: "Definitions",
        content:
          "Integers and Divisibility\n2.1 Definitions\nBasic objects we use in this course\n\u0088Natural numbers : These are 0, 1, 2, 3, 4, 5, . . ..\nThe set of all natural numbers is denoted by N.\nWe sometimes write Z\u22651orPfor the set {1,2,3, . . .}\nof natural numbers that are \u22651.\n\u0088Integers : These are . . ., \u20133, \u20132, \u20131, 0, 1, 2, 3, . . ..\nThe set of all integers is denoted by Z.\n\u0088Variables : We use symbols such as m,n,r,s,t\nto denote integers whose values are variable or un-\nknown; we call these integer variables .\nFactors\nLetmandnbe integers. Then we say that mis afactor\nofn(or a divisor ofn), or that mdivides n, ifn=k\u00b7m\nfor some integer k.\nPrime numbers\nAprime number is a positive integer nwhich has exactly\ntwo positive factors, namely 1 and nitself.\nRational numbers\nArational number is any number rthat can be written\nin the formm\nnwhere mandnare integers and n >0.\nThe integer mis called the numerator and the integer n\nis called the denominator of the rational number r=m\nn.\nThe set of all rational numbers is denoted by Q.\nExample 2.1 5,0,2\n\u22123(=\u22122\n3), and11\n123are rational\nnumbers.\nEvery integer kis a rational number (because k=k\n1).\n21\n\n\n\n\n22 TOPIC 2. INTEGERS AND DIVISIBILITY\n2.2 Basic properties of integers\nThe following hold for all integers k,mandn:\nAssociative laws:\nk+ (m+n) = ( k+m) +n k \u00b7(m\u00b7n) = ( k\u00b7m)\u00b7n\nCommutative laws:\nk+m=m+k k \u00b7m=m\u00b7k\nIdentity laws:\nk+ 0 = k k \u00b71 =k\nDistributive law:\nk\u00b7(m+n) = ( k\u00b7m) + (k\u00b7n)\nOther properties:\nk+ (\u2212k) = 0 k\u00b70 = 0\nTransitivity\nIfkis a factor of m, and mis a factor of n, then kis a\nfactor of n.\nProof. Ifm=kuandn=mvfor integers uandv, then\nn=mv= (ku)v=k(uv), with uv\u2208Z.\nAnti-symmetry\nLetm, n be integers such that m > 0 and n >0: If mis\na factor of n, and nis a factor of m, then m=n.\nProof. Since mis a factor of nwe have n=mkfor some\ninteger k\u22651. Hence m\u2a7dn. Similarly, if nis a factor of\nmthen n\u2a7dm. Thus m\u2a7dnandn\u2a7dm, which together\nimply that m=n.\nNotation and summary\nWe often write m|nwhen mis a factor of n.\nWith this notation, we can summarise properties of the\n\u201cfactor\u201d relation as follows. For all positive integers m\nandn:\n\u0088n|n [reflexive ]\n\u0088Ifk|mandm|nthen k|n [transitive ]\n\u0088Ifm|nandn|mthen m=n [anti-symmetric ]\nFurther exercises\nLeta, b, c\u2208Z. Prove the following statements.\n\u0088a|0 for all a\u2208Z.\n\u0088Ifa|bandb|athen a=\u00b1b.\n\u0088Ifa|banda|cthen a|(b+c).\n\n\n\n\n",
      },
      {
        name: "Basic properties of integers",
        content:
          "22 TOPIC 2. INTEGERS AND DIVISIBILITY\n2.2 Basic properties of integers\nThe following hold for all integers k,mandn:\nAssociative laws:\nk+ (m+n) = ( k+m) +n k \u00b7(m\u00b7n) = ( k\u00b7m)\u00b7n\nCommutative laws:\nk+m=m+k k \u00b7m=m\u00b7k\nIdentity laws:\nk+ 0 = k k \u00b71 =k\nDistributive law:\nk\u00b7(m+n) = ( k\u00b7m) + (k\u00b7n)\nOther properties:\nk+ (\u2212k) = 0 k\u00b70 = 0\nTransitivity\nIfkis a factor of m, and mis a factor of n, then kis a\nfactor of n.\nProof. Ifm=kuandn=mvfor integers uandv, then\nn=mv= (ku)v=k(uv), with uv\u2208Z.\nAnti-symmetry\nLetm, n be integers such that m > 0 and n >0: If mis\na factor of n, and nis a factor of m, then m=n.\nProof. Since mis a factor of nwe have n=mkfor some\ninteger k\u22651. Hence m\u2a7dn. Similarly, if nis a factor of\nmthen n\u2a7dm. Thus m\u2a7dnandn\u2a7dm, which together\nimply that m=n.\nNotation and summary\nWe often write m|nwhen mis a factor of n.\nWith this notation, we can summarise properties of the\n\u201cfactor\u201d relation as follows. For all positive integers m\nandn:\n\u0088n|n [reflexive ]\n\u0088Ifk|mandm|nthen k|n [transitive ]\n\u0088Ifm|nandn|mthen m=n [anti-symmetric ]\nFurther exercises\nLeta, b, c\u2208Z. Prove the following statements.\n\u0088a|0 for all a\u2208Z.\n\u0088Ifa|bandb|athen a=\u00b1b.\n\u0088Ifa|banda|cthen a|(b+c).\n\n\n\n\n2.3. FINDING ALL FACTORS OF A POSITIVE INTEGER 23\n\u0088Ifa|bthen ac|bc.\nIs it true that if a|(bc) then either a|bora|c?\nWarning: Do not confuse the statement (orrelation )\na|bwith the number a/b.\n2.3 Finding all factors of a positive integer\nLetnbe a positive integer. How do we find all factors\nofn?\nBut first, why would we want to find all factors of n?\nSecure data transmission (e.g. for internet banking) re-\nquires methods of encryption that are impervious to in-\nterception.\nOne of the principal methods (called the \u2018RSA algo-\nrithm\u2019) uses arithmetic based on integers expressible as\nproduct of two large prime numbers, and the difficulty of\n\u2018cracking\u2019 messages encrypted using this method relies\non the difficulty of factorising large integers (with 300\ndigits or more). For more discussion see Section 8.3.\nAlgorithm for finding all factors of a positive in-\nteger\nFor any positive integer n, let Factors( n) denote the set\nof all (positive) factors of n.\nFor example, Factors(90) = {1,2,3,5,6,9,10,15,18,30,45,90}.\nQuestion : Given n, how do we find Factors( n)?\nSimple algorithm \u2014 called FindFactors( n):\nGiven the positive integer nas input,\n1. Initialise k= 1;\n2. if k > n then stop; otherwise if k|nthen output\nk;\n3. Increment kby 1 (i.e. k\u2190k+ 1), then go to step\n2.\nAlgorithm correctness\nAn algorithm is called correct if it terminates and satisfies\nits specification \u2014 that is, if it does what it is expected\nto do.\nThis algorithm terminates after nsteps, since kis incre-\nmented at each iteration.\nCorrectness in this case means that the algorithm should\nfind all factors of n.\nProof of correctness of FindFactors (n):\n\u0088Ifmis a factor of n, then the algorithm outputs m\nwhen step 2 is executed for the mth time (that is,\nwhen k=m), and\n\u0088Ifmis an output of the algorithm, then by step 2\nit must be a factor of n.\n\n\n\n\n",
      },
      {
        name: "Finding all factors of a positive integer",
        content:
          "2.3. FINDING ALL FACTORS OF A POSITIVE INTEGER 23\n\u0088Ifa|bthen ac|bc.\nIs it true that if a|(bc) then either a|bora|c?\nWarning: Do not confuse the statement (orrelation )\na|bwith the number a/b.\n2.3 Finding all factors of a positive integer\nLetnbe a positive integer. How do we find all factors\nofn?\nBut first, why would we want to find all factors of n?\nSecure data transmission (e.g. for internet banking) re-\nquires methods of encryption that are impervious to in-\nterception.\nOne of the principal methods (called the \u2018RSA algo-\nrithm\u2019) uses arithmetic based on integers expressible as\nproduct of two large prime numbers, and the difficulty of\n\u2018cracking\u2019 messages encrypted using this method relies\non the difficulty of factorising large integers (with 300\ndigits or more). For more discussion see Section 8.3.\nAlgorithm for finding all factors of a positive in-\nteger\nFor any positive integer n, let Factors( n) denote the set\nof all (positive) factors of n.\nFor example, Factors(90) = {1,2,3,5,6,9,10,15,18,30,45,90}.\nQuestion : Given n, how do we find Factors( n)?\nSimple algorithm \u2014 called FindFactors( n):\nGiven the positive integer nas input,\n1. Initialise k= 1;\n2. if k > n then stop; otherwise if k|nthen output\nk;\n3. Increment kby 1 (i.e. k\u2190k+ 1), then go to step\n2.\nAlgorithm correctness\nAn algorithm is called correct if it terminates and satisfies\nits specification \u2014 that is, if it does what it is expected\nto do.\nThis algorithm terminates after nsteps, since kis incre-\nmented at each iteration.\nCorrectness in this case means that the algorithm should\nfind all factors of n.\nProof of correctness of FindFactors (n):\n\u0088Ifmis a factor of n, then the algorithm outputs m\nwhen step 2 is executed for the mth time (that is,\nwhen k=m), and\n\u0088Ifmis an output of the algorithm, then by step 2\nit must be a factor of n.\n\n\n\n\n24 TOPIC 2. INTEGERS AND DIVISIBILITY\nThese two things ensure that mis an output of the algo-\nrithm if and only if mis a factor of m, so the algorithm\nis correct.\nLemma 2.1 Letnbe any positive integer, and also sup-\npose that n > 1. If kis the smallest factor of nwith\nk >1, then kis prime.\nFor example, the smallest factor of 15 is 3, which is prime.\nProof (by contradiction).\nLetkbe the smallest factor of nwith k >1. Suppose,\nfor a contradiction, that kis NOT prime. Then khas\nsome factor jwith 1 < j < k . But now j|kandk|n,\nsoj|n, and therefore jis a factor of nsmaller than\nk, and with j > 1. This contradicts the definition of\nk. Hence the supposition that kwas not prime is false,\nwhich completes the proof.\nThe Fundamental Theorem of Arithmetic\nThis theorem is fundamental to the study of integers:\nEvery integer n >1 can be written as a product of prime\nnumbers.\nFor example, 90 = 2 \u00b73\u00b73\u00b75 and 2016 = 25\u00b732\u00b77.\nWe will discuss this theorem again in Section 3.2. There\nare many ways to prove this. One of them is to prove\nthe correctness of the following \u2018constructive\u2019 algorithm:\nGiven the integer n >1 as input,\n1. Initialise m=n;\n2. Find and output the smallest factor kofmwith\nk >1;\n3. If k=mthen stop; otherwise replace mbym\nk, and\ngo to step 2.\nProof of correctness\nThe algorithm always terminates, since the value of m\ndecreases each time that step (3) is executed, unless k=\nm.\nNext, let the outputs of the algorithm be k1, k2, . . . , k s,\nand let m1, m2, . . . , m sbe the corresponding values taken\nbym.\nBy Lemma 2.1 each kiis prime, since it is the smallest\nfactor of some integer migreater than 1.\nAlso m1=n=k1\u00b7m2, and then m2=k2\u00b7m3, and so\non, until ms\u22121=ks\u22121\u00b7ms, and then ms=ks\u00b71 =ks.\nThus\nn=k1\u00b7m2=k1\u00b7k2\u00b7m3=. . .=k1\u00b7k2\u00b7k3\u00b7. . .\u00b7ks\u22122\u00b7ms\u22121\n=k1\u00b7k2\u00b7k3\u00b7. . .\u00b7ks\u22121\u00b7ms=k1\u00b7k2\u00b7k3\u00b7. . .\u00b7ks\u22121\u00b7ks,\nwhich gives nas a product of the primes k1, k2, . . . , k s.\n\n\n\n\n2.4. COMMON DIVISORS 25\nExample 2.2 Take n= 90. Then the algorithm proceeds\nas follows:\n\u0088m= 90 [initialisation];\n\u0088Output k= 2, and replace mby90\n2= 45;\n\u0088Output k= 3, and replace mby45\n3= 15;\n\u0088Output k= 3, and replace mby15\n3= 5;\n\u0088Output k= 5, and stop [since k= 5 = m].\nThis algorithm gives 90 = 2 \u00b73\u00b73\u00b75.\nExample 2.3 Take n= 63756 . Then the algorithm pro-\nceeds as follows:\n\u0088m= 63756 [initialisation];\n\u0088Output k= 2, and replace mby63756\n2= 31878 ;\n\u0088Output k= 2, and replace mby31878\n2= 15939 ;\n\u0088Output k= 3, and replace mby15939\n3= 5313 ;\n\u0088Output k= 3, and replace mby5313\n3= 1771 ;\n\u0088Output k= 7, and replace mby1771\n7= 253 ;\n\u0088Output k= 11, and replace mby253\n11= 23;\n\u0088Output k= 23, and stop [since k= 23 = m].\nThis algorithm gives 63756 = 2 \u00b72\u00b73\u00b73\u00b77\u00b711\u00b723.\n2.4 Common divisors\nLetmandnbe positive integers.\nAcommon divisor ofmandnis any (positive) integer k\nthat divides both mandn.\nThe greatest common divisor ofmandnis the largest\ninteger kthat divides both mandn. It is denoted by\ngcd(m, n).\nExample 2.4 The divisors of 18are1,2,3,6,9and18,\nand the divisors of 24are1,2,3,4,6,8,12and24, and\ntherefore the common divisors of 18and24are1,2,3\nand6.\nThe greatest common divisor is gcd(18 ,24) = 6\nLemma 2.2 Ifkis a common divisor of mandn, then\nkdivides am+bnfor all integers aandb.\n\n\n\n\n",
      },
      {
        name: "Common divisors",
        content:
          "2.4. COMMON DIVISORS 25\nExample 2.2 Take n= 90. Then the algorithm proceeds\nas follows:\n\u0088m= 90 [initialisation];\n\u0088Output k= 2, and replace mby90\n2= 45;\n\u0088Output k= 3, and replace mby45\n3= 15;\n\u0088Output k= 3, and replace mby15\n3= 5;\n\u0088Output k= 5, and stop [since k= 5 = m].\nThis algorithm gives 90 = 2 \u00b73\u00b73\u00b75.\nExample 2.3 Take n= 63756 . Then the algorithm pro-\nceeds as follows:\n\u0088m= 63756 [initialisation];\n\u0088Output k= 2, and replace mby63756\n2= 31878 ;\n\u0088Output k= 2, and replace mby31878\n2= 15939 ;\n\u0088Output k= 3, and replace mby15939\n3= 5313 ;\n\u0088Output k= 3, and replace mby5313\n3= 1771 ;\n\u0088Output k= 7, and replace mby1771\n7= 253 ;\n\u0088Output k= 11, and replace mby253\n11= 23;\n\u0088Output k= 23, and stop [since k= 23 = m].\nThis algorithm gives 63756 = 2 \u00b72\u00b73\u00b73\u00b77\u00b711\u00b723.\n2.4 Common divisors\nLetmandnbe positive integers.\nAcommon divisor ofmandnis any (positive) integer k\nthat divides both mandn.\nThe greatest common divisor ofmandnis the largest\ninteger kthat divides both mandn. It is denoted by\ngcd(m, n).\nExample 2.4 The divisors of 18are1,2,3,6,9and18,\nand the divisors of 24are1,2,3,4,6,8,12and24, and\ntherefore the common divisors of 18and24are1,2,3\nand6.\nThe greatest common divisor is gcd(18 ,24) = 6\nLemma 2.2 Ifkis a common divisor of mandn, then\nkdivides am+bnfor all integers aandb.\n\n\n\n\n26 TOPIC 2. INTEGERS AND DIVISIBILITY\nProof. Since kdivides mandn, we know that m=kr\nandn=ksfor integers rands. It then follows that\nam+bn=a(kr) +b(ks) =k(ar+bs)\nand therefore kdivides am+bn.2\nAs a corollary, also kdivides am\u2212bnfor all integers\naandb(because we can simply replace bby\u2212bin the\nabove proof).\nExample 2.5 Letm\u2208Nbe an integer such that m > 0.\nShow that gcd(m,0) = m.\nDoes gcd(0 ,0)make sense?\nThe Division Theorem (Quotient and Remain-\nder)\nLetmandnbe integers with n > 0. Then there exist\nintegers qandrsuch that m=qn+r, with 0 \u2a7dr < n .\nThe integers qandrare called the quotient andremain-\nderofmon division by n, respectively.\nNote that the remainder rhas to be less than n. Also\nnote that nis a factor of mif and only if the remainder\nris zero.\nProof: Consider all multiples of nin increasing order,\nnamely\n. . . ,\u22124n,\u22123n,\u22122n,\u2212n,0, n,2n,3n,4n, . . . .\nAmong these, find the largest multiple qnofnwith the\nproperty that qn\u2a7dm, and then take r=m\u2212qn.\nThen r\u22650 (because m\u2265qn), and if r\u2265nthen we have\nm\u2212qn=r\u2265n, and therefore m\u2265n+qn= (q+ 1)n.\nBut this shows there is a LARGER multiple ( q+ 1)nof\nnwith ( q+ 1)n\u2a7dm, and so contradicts the choice of q.\nThus m=qn+r, and 0 \u2a7dr < n , as required.\nExample 2.6 When we divide m= 111 byn= 15 we\nget111 = 7 \u00b715 + 6 , with quotient q= 7and remainder\nr= 6.\n2.5 The Euclidean algorithm\nThis is a fast algorithm for finding greatest common divi-\nsors. It was written down by Euclid in about 300BC, and\nre-discovered independently in India and China centuries\nlater.\n\n\n\n\n",
      },
      {
        name: "The Euclidean algorithm",
        content:
          "26 TOPIC 2. INTEGERS AND DIVISIBILITY\nProof. Since kdivides mandn, we know that m=kr\nandn=ksfor integers rands. It then follows that\nam+bn=a(kr) +b(ks) =k(ar+bs)\nand therefore kdivides am+bn.2\nAs a corollary, also kdivides am\u2212bnfor all integers\naandb(because we can simply replace bby\u2212bin the\nabove proof).\nExample 2.5 Letm\u2208Nbe an integer such that m > 0.\nShow that gcd(m,0) = m.\nDoes gcd(0 ,0)make sense?\nThe Division Theorem (Quotient and Remain-\nder)\nLetmandnbe integers with n > 0. Then there exist\nintegers qandrsuch that m=qn+r, with 0 \u2a7dr < n .\nThe integers qandrare called the quotient andremain-\nderofmon division by n, respectively.\nNote that the remainder rhas to be less than n. Also\nnote that nis a factor of mif and only if the remainder\nris zero.\nProof: Consider all multiples of nin increasing order,\nnamely\n. . . ,\u22124n,\u22123n,\u22122n,\u2212n,0, n,2n,3n,4n, . . . .\nAmong these, find the largest multiple qnofnwith the\nproperty that qn\u2a7dm, and then take r=m\u2212qn.\nThen r\u22650 (because m\u2265qn), and if r\u2265nthen we have\nm\u2212qn=r\u2265n, and therefore m\u2265n+qn= (q+ 1)n.\nBut this shows there is a LARGER multiple ( q+ 1)nof\nnwith ( q+ 1)n\u2a7dm, and so contradicts the choice of q.\nThus m=qn+r, and 0 \u2a7dr < n , as required.\nExample 2.6 When we divide m= 111 byn= 15 we\nget111 = 7 \u00b715 + 6 , with quotient q= 7and remainder\nr= 6.\n2.5 The Euclidean algorithm\nThis is a fast algorithm for finding greatest common divi-\nsors. It was written down by Euclid in about 300BC, and\nre-discovered independently in India and China centuries\nlater.\n\n\n\n\n2.5. THE EUCLIDEAN ALGORITHM 27\nEuclidean algorithm\nLet the input be positive integers mandn.\nThe main idea of the algorithm is that if m=qn+rthen\ngcd(m, n) = gcd( n, r).\nTermination of the algorithm is provided by the case\ngcd(m,0) = m.\nWe give the algorithm in detail:\n1. If m < n , then set a=nandb=m;\nor ifm > n , then set a=mandb=n;\nor if m=n, then output nas gcd( m, n) and\nstop;\n2. Apply the division theorem to find integers qand\nrsuch that a=qb+r, with 0 \u2a7dr < b ;\n3. If r= 0 then output bas gcd( m, n) and stop; oth-\nerwise re-set a=band then re-set b=r, and go to\nstep 2.\nExample 2.7 Take m= 120 andn= 25. Then proceed\nas follows:\n1.a= 120 andb= 25 [initialisation]\n2. Find 120 = 4 \u00b725+20 , and re-set a= 25 andb= 20;\n3. Find 25 = 1 \u00b720 + 5 , and re-set a= 20 andb= 5;\n4. Find 20 = 4 \u00b75 + 0 , output b= 5and stop [since\nr= 0].\nThis algorithm gives gcd(120 ,25) = 5 .\nExample 2.8 Take m= 148 andn= 784 . Then proceed\nas follows:\n1.a= 784 andb= 148 [initialisation]\n2. Find 784 = 5 \u00b7148 + 44 , and re-set a= 148 and\nb= 44;\n3. Find 148 = 3 \u00b744+16 , and re-set a= 44 andb= 16;\n4. Find 44 = 2 \u00b716+12 , and re-set a= 16 andb= 12;\n5. Find 16 = 1 \u00b712 + 4 , and re-set a= 12 andb= 4;\n6. Find 12 = 3 \u00b74 + 0 , output b= 4and stop [since\nr= 0].\nThis algorithm gives gcd(148 ,784) = 4 .\n\n\n\n\n28 TOPIC 2. INTEGERS AND DIVISIBILITY\nAnalysis of the Euclidean Algorithm\nFirst, we can observe that the values of aandbdecrease\neach time that step (3) is executed, except when r= 0,\nand it follows that the algorithm always terminates.\nNow suppose the algorithm terminates after tsteps. We\nwish to show that the value output by the algorithm\nis the greatest common divisor of the integers aandb.\nThe simplest way to show this is to write a=bq+r,\nwhere 0 \u2a7dr < b , and to note that the correctness of the\nalgorithm follows from the correctness, at each iteration,\nof the statement\ngcd(a, b) = gcd( b, r).\nLemma 2.3 Leta, bbe positive integers and let a=bq+\nrwhere 0\u2a7dr < b . Then gcd(a, b) = gcd( b, r).\nProof. Consider the sets S1={d\u2208P:d|a\u2227d|b}and\nS2={d\u2208P:d|b\u2227d|r}. So S1is the set of common\ndivisors of aandb, while S2is the set of common divisors\nofbandr. We will show that S1=S2, and hence they\nhave the same largest element.\nSo let d\u2208S1. Then d|aandd|band so by Lemma 2.2\nwe have that dis a divisor of a\u2212bq=r. Hence d|band\nd|rand so d\u2208S2. Conversely, suppose d\u2208S2. Then\nd|bandd|rand so d|(bq+r) =a. So d|aand\nd\u2208S1. It follows that S1=S2.2\nExtended Euclidean Algorithm\nThe extended Euclidean algorithm computes not only\nthe integer d= gcd( a, b), but also integers s, tsuch that\nd=as+bt. These integers are interesting for some\napplications. These integers can also be computed by\n\u201creversing\u201d the calculations in Euclid\u2019s algorithm.\nExample 2.9 Recall the calculations from Example 2.7.\nWorking backwards we have\n5 = 25 \u22121\u00b720\n= 25 \u22121\u00b7(120\u22124\u00b725)\n= 5\u00b725\u22121\u00b7120.\nExample 2.10 Using the calculations from Example 2.8\nfind integers s, tsuch that 148s+ 784 t= 4.\n\n\n\n\n2.6. CONGRUENCES AND MODULAR ARITHMETIC 29\n2.6 Congruences and modular arithmetic\nBinary arithmetic\nThe set of integers can be partitioned into two subsets:\nEven integers {. . . ,\u22128,\u22126,\u22124,\u22122,0,2,4,6,8, . . .}\nOdd integers {. . . ,\u22127,\u22125,\u22123,\u22121,1,3,5,7,9, . . .}\nThese are the sets of integers that leave remainder 0 or\n1 on division by 2, respectively, so we can label them as\n[0] and [1].\nWe can write [0]+[0] = [0], [0]+[1] = [1], [1]+[0] = [1]\nand [1] + [1] = [0], to indicate that\n\u0088ifmis even and nis even then m+nis even,\n\u0088ifmis even and nis odd then m+nis odd,\n\u0088ifmis odd and nis even then m+nis odd,\n\u0088ifmis odd and nis odd then m+nis even.\nSimilarly, we write [0] \u00b7[0] = [0], [0] \u00b7[1] = [0], [1] \u00b7[0] = [0]\nand [1] \u00b7[1] = [1].\nInteger congruence\nLetmbe any integer greater than 1.\nWe say that two integers aandbarecongruent modulo\nm, and write a\u2261b(mod m), ifaandbleave the same\nremainder on division by m.\nExample 2.11 17\u226137(mod 10), since both leave re-\nmainder 7on division by 10.\nSimilarly, a\u2261b(mod 2) if and only if aandbare both\neven (leaving remainder 0on division by 2) or both odd\n(leaving remainder 1on division by 2).\nGenerally, n\u22610(mod m) if and only if nis a multiple\nofm(leaving remainder 0on division by m).\nExample 2.12 What are the integers congruent to 1mod\n3?\nThese are . . .\u201314, \u201311, \u20138, \u20135, \u20132,1,4,7,10,13,. . ..\nNote that any two of these differ by a multiple of 3.\nFor example, 16\u22124 = 12 = 3 \u00b74, and 10\u2212(\u22128) = 18 =\n3\u00b76.\nIn general, we have (3a+1)\u2212(3b+1) = 3 a\u22123b= 3(a\u2212b).\n\n\n\n\n",
      },
      {
        name: "Congruences and modular arithmetic",
        content:
          "2.6. CONGRUENCES AND MODULAR ARITHMETIC 29\n2.6 Congruences and modular arithmetic\nBinary arithmetic\nThe set of integers can be partitioned into two subsets:\nEven integers {. . . ,\u22128,\u22126,\u22124,\u22122,0,2,4,6,8, . . .}\nOdd integers {. . . ,\u22127,\u22125,\u22123,\u22121,1,3,5,7,9, . . .}\nThese are the sets of integers that leave remainder 0 or\n1 on division by 2, respectively, so we can label them as\n[0] and [1].\nWe can write [0]+[0] = [0], [0]+[1] = [1], [1]+[0] = [1]\nand [1] + [1] = [0], to indicate that\n\u0088ifmis even and nis even then m+nis even,\n\u0088ifmis even and nis odd then m+nis odd,\n\u0088ifmis odd and nis even then m+nis odd,\n\u0088ifmis odd and nis odd then m+nis even.\nSimilarly, we write [0] \u00b7[0] = [0], [0] \u00b7[1] = [0], [1] \u00b7[0] = [0]\nand [1] \u00b7[1] = [1].\nInteger congruence\nLetmbe any integer greater than 1.\nWe say that two integers aandbarecongruent modulo\nm, and write a\u2261b(mod m), ifaandbleave the same\nremainder on division by m.\nExample 2.11 17\u226137(mod 10), since both leave re-\nmainder 7on division by 10.\nSimilarly, a\u2261b(mod 2) if and only if aandbare both\neven (leaving remainder 0on division by 2) or both odd\n(leaving remainder 1on division by 2).\nGenerally, n\u22610(mod m) if and only if nis a multiple\nofm(leaving remainder 0on division by m).\nExample 2.12 What are the integers congruent to 1mod\n3?\nThese are . . .\u201314, \u201311, \u20138, \u20135, \u20132,1,4,7,10,13,. . ..\nNote that any two of these differ by a multiple of 3.\nFor example, 16\u22124 = 12 = 3 \u00b74, and 10\u2212(\u22128) = 18 =\n3\u00b76.\nIn general, we have (3a+1)\u2212(3b+1) = 3 a\u22123b= 3(a\u2212b).\n\n\n\n\n30 TOPIC 2. INTEGERS AND DIVISIBILITY\nTheorem 2.1 a\u2261b(mod m) if and only if a\u2212bis a\nmultiple of m\nProof: Suppose that division by mgives a=qm+r\nandb=sm+t, with remainders randt(both less than\nm). Then we have\na\u2212b= (qm+r)\u2212(sm+t) = (q\u2212s)m+ (r\u2212t).\n\u2018Only if\u2019 part : Ifa\u2261b(mod m), then by definition,\nr=t, and so a\u2212b= (q\u2212s)m, which is a multiple of m.\n\u2018If\u2019 part : Ifa\u2212bis a multiple of m, then so is\n(a\u2212b)\u2212(q\u2212s)m=r\u2212t.\nBut 0 \u2a7dr < m and 0 \u2a7dt < m , so\u2212m < r \u2212t < m .\nSince the only multiple of mstrictly between \u2212mand\n+mis 0, it follows that r\u2212t= 0, so r=t, and thus\na\u2261b(mod m).2\nProperties of congruence mod m\n\u0088a\u2261a(mod m) [ reflexive ]\n\u0088Ifa\u2261b(mod m) then b\u2261a(mod m) [symmetric ]\n\u0088Ifa\u2261b(mod m) and b\u2261c(mod m) then a\u2261c\n(mod m) [ transitive ]\nThese are easy to prove from the definition of congruence\nmod m(viz. leaving the same remainder on division by\nm).\nCongruence classes\nLetkbe any integer greater than 1, and let mbe any\ninteger.\nBy the division theorem, we have m=qk+rwith\n0\u2a7dr < k . Then the set of all integers congruent\ntommod kis the set of all integers leaving remainder r\non division by k, namely\n. . . ,\u22123k+r,\u22122k+r,\u2212k+r, r, k +r,2k+r,3k+r, . . . .\nThis set is called the congruence class ofmmod k, and\nis denoted by [ m].\nNote that [ m] contains m(since m=qk+r). Also\n[m] = [ r], and more generally, [ m] = [ n] if and only if\nm\u2261n(mod k).\nThe number of congruence classes mod kisk\nLetkbe any integer greater than 1. Then we know that\nfor any integer m, the congruence class [ m] consists of all\nintegers leaving the same remainder rasmon division\nbyk, and in particular, [ m] = [r], where 0 \u2a7dr < k .\n\n\n\n\n2.6. CONGRUENCES AND MODULAR ARITHMETIC 31\nIt follows that every integer mlies in exactly one of the\nkcongruence classes [0], [1], [2], . . . , [ k\u22121].\nExample 2.13 there are just two congruence classes mod\n2, namely\n[0] ={. . . ,\u22128,\u22126,\u22124,\u22122,0,2,4,6, . . .}even integers\n[1] ={. . . ,\u22127,\u22125,\u22123,\u22121,1,3,5,7, . . .}odd integers.\nSimilarly, the ten congruence classes mod 10are\n[0] ={. . . ,\u221250,\u221240,\u221230,\u221220,\u221210,0,10,20,30,40, . . .}\n[1] ={. . . ,\u221249,\u221239,\u221229,\u221219,\u22129,1,11,21,31,41, . . .}\n[2] ={. . . ,\u221248,\u221238,\u221228,\u221218,\u22128,2,12,22,32,42, . . .}\n[3] ={. . . ,\u221247,\u221237,\u221227,\u221217,\u22127,3,13,23,33,43, . . .}\n[4] ={. . . ,\u221246,\u221236,\u221226,\u221216,\u22126,4,14,24,34,44, . . .}\n[5] ={. . . ,\u221245,\u221235,\u221225,\u221215,\u22125,5,15,25,35,45, . . .}\n[6] ={. . . ,\u221244,\u221234,\u221224,\u221214,\u22124,6,16,26,36,46, . . .}\n[7] ={. . . ,\u221243,\u221233,\u221223,\u221213,\u22123,7,17,27,37,47, . . .}\n[8] ={. . . ,\u221242,\u221232,\u221222,\u221212,\u22122,8,18,28,38,48, . . .}\n[9] ={. . . ,\u221241,\u221231,\u221221,\u221211,\u22121,9,19,29,39,49, . . .}.\nThe ring of all congruence classes mod k\nAny integer ncontained in the congruence class [ r] is\ncalled a representative of the class.\nThe set of all congruence classes mod kis denoted by Zk.\nIn other words,\nZk={[0],[1],[2], . . . , [k\u22121]}.\nMost books simply write Zk={0,1, . . . , k \u22121}.\nWhen equipped with addition and multiplication, Zkis\nan example of an algebraic structure known as a \u2018ring\u2019,\ncalled the ring of integers modulo k, and if pis a prime\nnumber, then Zpis a field. Prime fields are very useful in\nconstructing error-correcting codes, and in cryptography.\nSome more exercises\nFixm\u2208Nand let a, b, c, d \u2208Zbe such that a\u2261b\n(mod m) and c\u2261d(mod m). Show that\n1.a+c\u2261b+d(mod m).\n2.ac\u2261bd(mod m).\n\n\n\n\n32 TOPIC 2. INTEGERS AND DIVISIBILITY\n\n\n\n\nInduction and Recursion\n3.1 Induction\nThe well-ordering property\nThe following fundamental fact about the set of integers\n{0,1,2, . . .}is useful for proofs. It leads to the idea of\nproof by induction.\nTheorem 3.1 (The Well-Ordering Property) Every\nnonempty set of nonnegative integers has a least element.\nMathematical induction\nMany theorems are that a statement P(n) is true for all\npositive integers n(here, P(n) is a predicate or proposi-\ntional function). Mathematical induction is a technique\nfor proving theorems of this kind. In other words, math-\nematical induction is used to prove propositions of the\nform\u2200n P(n), where the universe of discourse is the set\n{0,1,2, . . .}of non-negative integers, or sometimes the\nset{1,2, . . .}.\nA proof by mathematical induction that P(n) is true for\nevery positive integer nconsists of two steps:\nBasis step The proposition P(0) (or sometimes P(1))\nis shown to be true.\nInductive step The implication\nP(n)\u2192P(n+ 1)\nis shown to be true for every non-negative integer\nn.\nThe inductive hypothesis\nHere P(n) is called the inductive hypothesis . When we\ncomplete both steps of a proof by mathematical induc-\ntion, we have proved that P(n) is true for all positive\nintegers n; that is, we have shown that \u2200n P(n) is true.\nExpressed as a rule of inference, this proof technique can\nbe stated as\n[P(0)\u2227 \u2200n(P(n)\u2192P(n+ 1))] \u2192 \u2200n\u2208NP(n).\n33\n\n\n\n\n",
      },
    ],
  },
  {
    name: "Induction and Recursion",
    definition: {
      simple:
        "\n\nInduction refers to a mathematical proof technique where a statement is proven true for a base case and then for a generic case assuming it holds for a smaller case. This builds up to prove the statement holds true for all cases.\n\nRecursion refers to a programming or problem-solving technique where a problem is broken down into smaller subproblems that are solved recursively until the original problem is solved. The solution to the base case is provided, and the recursive function is used to solve the larger problem by aggregating the solutions of smaller subproblems.",
    },
    childs: [
      {
        name: "Induction",
        content:
          "Induction and Recursion\n3.1 Induction\nThe well-ordering property\nThe following fundamental fact about the set of integers\n{0,1,2, . . .}is useful for proofs. It leads to the idea of\nproof by induction.\nTheorem 3.1 (The Well-Ordering Property) Every\nnonempty set of nonnegative integers has a least element.\nMathematical induction\nMany theorems are that a statement P(n) is true for all\npositive integers n(here, P(n) is a predicate or proposi-\ntional function). Mathematical induction is a technique\nfor proving theorems of this kind. In other words, math-\nematical induction is used to prove propositions of the\nform\u2200n P(n), where the universe of discourse is the set\n{0,1,2, . . .}of non-negative integers, or sometimes the\nset{1,2, . . .}.\nA proof by mathematical induction that P(n) is true for\nevery positive integer nconsists of two steps:\nBasis step The proposition P(0) (or sometimes P(1))\nis shown to be true.\nInductive step The implication\nP(n)\u2192P(n+ 1)\nis shown to be true for every non-negative integer\nn.\nThe inductive hypothesis\nHere P(n) is called the inductive hypothesis . When we\ncomplete both steps of a proof by mathematical induc-\ntion, we have proved that P(n) is true for all positive\nintegers n; that is, we have shown that \u2200n P(n) is true.\nExpressed as a rule of inference, this proof technique can\nbe stated as\n[P(0)\u2227 \u2200n(P(n)\u2192P(n+ 1))] \u2192 \u2200n\u2208NP(n).\n33\n\n\n\n\n34 TOPIC 3. INDUCTION AND RECURSION\nHow to write a proof by induction\nThe first step in the proof is to show that P(0) is true.\nThis amounts to showing that the particular statement\nP(n) obtained when nis replaced by 0 is true.\nThe next step is to show that P(n)\u2192P(n+1) is true for\nevery positive integer n. This can be done by assuming\nthatP(n) is true and showing that under this hypothesis\nP(n+ 1) must also be true.\nThe final step of the proof is to invoke the \u201cprinciple\nof mathematical induction\u201d which implies the theorem\n\u2200n, P(n) is true.\nExample 3.1 When doing an inductive proof, think of\na (business) letter format.\nLetP(n)be the statement \u201c . . . \u201d.\nP(m)is true because . . .\nAssume P(k),for some k\u2265m, is true:\nHere is an argument that P(k+ 1)\nmust be true, assuming that P(k)\nis true. . . .\nThus, by the principle of mathematical induc-\ntion,\nP(n)is true for every integer n\u2265m.\nAlthough we are taking m= 0 in this discussion it is\nsometimes convenient to start with m= 1, or m= 2,\netc.\nImportant remark\nIn a proof by mathematical induction it is not assumed\nthatP(n) is true for all positive integers! It is only shown\nthat ifP(n) is true, then P(n+ 1) is also true, that\nis,P(n)\u2192P(n+ 1). Thus, a proof by mathematical\ninduction is not a circular argument.\nWhen we use mathematical induction to prove a theorem,\nwe first show that P(0) is true. Then we know that P(1)\nis true, since P(0) implies P(1). Further, we know that\nP(2) is true, since P(1) implies P(2). Continuing along\nthese lines, we see that P(k) is true, for any positive\ninteger k.\nThe domino illustration\nA way to illustrate the principle of mathematical induc-\ntion is to consider an infinite row of dominoes, labelled\n1,2,3, . . . , n , where each domino is standing up. Let\nP(n) be the proposition that domino nis knocked over.\nIfP(1) is true (meaning: the first domino is knocked\n\n\n\n\n3.1. INDUCTION 35\nover), and if P(n)\u2192P(n+ 1) is true (meaning: if the\nn-th domino is knocked over then it also knocks over the\n(n+ 1)-th domino), then all the dominoes are knocked\nover.\nWhy mathematical induction is valid\nThe validity of mathematical induction as a proof tech-\nnique comes from the well-ordering property of the nat-\nural numbers.\nSuppose we know that P(0) is true and that the propo-\nsition P(n)\u2192P(n+ 1) is true for all positive integers\nn. To show that P(n) must be true for all positive in-\ntegers, assume that there is at least one positive integer\nfor which P(n) is false.\n\u0088Then the set Sof non-negative integers for which\nP(n) is false is nonempty.\n\u0088Thus, by the well-ordering property, Shas a least\nelement, which will be denoted by k. We know that\nkcannot be 0 since P(0) is true.\n\u0088Since kis positive and greater than 1, k\u22121 is a\npositive integer.\n\u0088Furthermore, since k\u22121 is less than k, it is not in\nS, soP(k\u22121) must be true.\n\u0088Since the implication P( k\u22121)\u2192P(k) is also true,\nit must be the case that P(k) is true. This contra-\ndicts the choice of k.\n\u0088Hence, P(n) must be true for every positive integer\nn.\nWe will use a variety of examples to illustrate how the-\norems are proved using mathematical induction. (Many\ntheorems proved in this section via mathematical induc-\ntion can be proved using different methods. However, it\nis worthwhile to try to prove a theorem in more than one\nway, since one method of attack may succeed whereas\nanother approach may not.)\nSummation example\nMathematical induction is often used to verify summa-\ntion formulae.\nExample 3.2 Use mathematical induction to prove that\nthe sum of the first nodd positive integers is n2.\nSolution.\nLetP(n)denote the proposition that the sum of the first nodd\npositive integers is n2.\n\n\n\n\n36 TOPIC 3. INDUCTION AND RECURSION\nBasis step: P(0)is the claim that the sum of the first zero odd\npositive integers is 02= 0. This is true.\nSome students may be more comfortable starting with n= 1\nin this case. P(1)states that the sum of the first odd positive\ninteger is 12. This is true since the sum of the first odd\npositive integer is 1.\nInductive step: Show that P(n)\u2192P(n+ 1) is true \u2200n\u2208Z+.\nSuppose that P(n)is true for a positive integer n; that is\n1 + 3 + 5 + \u00b7\u00b7\u00b7+ (2n\u22121) = n2\n(Note that the nthodd positive integer is (2n\u22121), since\nthis integer is obtained by adding 2a total number of n\u22121\ntimes to 1). We must show that P(n+ 1) is true, assuming\nthatP(n)is true. Note that P(n+ 1) is the statement that\n1 + 3 + 5 + \u00b7\u00b7\u00b7+ (2n\u22121) + (2 n+ 1) = ( n+ 1)2\nSo, assuming that P(n)is true, it follows that\n1 + 3 + 5 + \u00b7\u00b7\u00b7+ (2n\u22121) + (2 n+ 1)\n= [1 + 3 + 5 + \u00b7\u00b7\u00b7+ (2n\u22121)] + (2 n+ 1)\n=n2+ (2n+ 1)\n= ( n+ 1)2\nThis shows that P(n+ 1) follows from P(n). Note that we\nused the inductive hypothesis P(n)in the second equality to\nreplace the sum of the first nodd positive integers by n2.\nSince P(1)is true and the implication P(n)\u2192P(n+ 1)\nis true \u2200n\u2208Z+, the principle of mathematical induction\nshows that P(n)is true for all positive integers n.\nExample 3.3 Use mathematical induction to show that\n1 + 2 + 22+\u00b7\u00b7\u00b7+ 2n= 2n+1\u22121\nfor all nonnegative integers n.\nInequality example\nThe next example uses the principle of mathematical in-\nduction to prove an inequality.\nExample 3.4 Use mathematical induction to prove the\ninequality\nn <2n\nfor all positive integers n.\nDivisibility examples\nExample 3.5 Letxbe a fixed integer. Use mathematical\ninduction to prove that, for all integers n\u22651,\nxn\u22121 = ( x\u22121)(xn\u22121+xn\u22122+\u00b7\u00b7\u00b7+x+ 1).\n[Hint: xn+1\u22121 = ( x\u22121)xn+ (xn\u22121).]\n\n\n\n\n3.1. INDUCTION 37\nExample 3.6 Use mathematical induction to prove that\nn3\u2212nis divisible by 3 whenever nis a positive integer.\nNumber of subsets example\nExample 3.7 Use mathematical induction to show that\nifSis a finite set with nelements, then Shas2nsubsets.\nFactorial example\nExample 3.8 Use mathematical induction to prove that\n2n< n!for every positive integer nwithn\u22654.\nGeometric examples\nExample 3.9 Letnbe a positive integer. Show that\nany2n\u00d72nchessboard with one square removed can be\ntiled using L-shaped pieces, where these pieces cover three\nsquares at a time.\nExample 3.10 A finite number of straight lines divides\nthe plane into regions. Prove that these regions can be\ncoloured using two colours so that adjacent regions (i.e.,\nregions that meet in more than just one corner) do not\nhave the same colour.\nBasis at other than 0 or 1\nSometimes we need to show that P(n) is true for n=\nk, k+1, k+2, . . ., where kis an integer other than 0 or 1.\nWe can use mathematical induction to accomplish this\nas long as we change the basis step.\n\n\n\n\n38 TOPIC 3. INDUCTION AND RECURSION\nExample 3.11 Prove using induction that if n >4is an\ninteger then n2> n+ 16.\n3.2 The second principle of mathematical\ninduction\nThere is another form of mathematical induction that is\noften useful in proofs. With this form we use the same\nbasis step as before, but we use a different inductive step.\nWe assume that P(k) is true for all values k= 1, . . . , n\nand show that P(n+ 1) must also be true based on this\nassumption. This is called the second principle of math-\nematical induction . We summarize the two steps used to\nshow that P(n) is true for all positive integers n:\nBasis step: The proposition P(1) is shown to be true.\nInductive step: It is shown that\n[P(1)\u2227P(2)\u2227 \u00b7\u00b7\u00b7 \u2227 P(n)]\u2192P(n+ 1)\nis true for every positive integer n.\nThe two forms of mathematical induction are equivalent;\nthat is, each can be shown to be a valid proof technique\nassuming the other. We leave it as an exercise for the\nstudent to show this.\nExample 3.12 Show that if nis an integer greater than\n1, then ncan be written as the product of primes.\nSolution.\nLetP(n)denote the proposition that ncan be written as a product\nof primes.\nBasis step: P(2)is true since it can be written as the product of\none prime, itself.\nInductive step: Assume that P(k)is true for all positive inte-\ngerskwithk\u2264n. To complete the inductive step it must be\nshown that P(n+ 1) is true under this assumption. There\nare two cases to consider, namely, when n+ 1is prime and\nwhen n+ 1is composite. If n+ 1is prime then we can\nimmediately see that P(n+ 1) is true. Otherwise n+ 1is\ncomposite and thus can be written as a product of two pos-\nitive integers aandbwith 2\u2264a\u2264b < n + 1. By the\ninduction hypothesis, both aandbcan be written as the\nproduct of primes. Thus, if n+ 1is composite, then it can\nbe written as the product of primes, namely, those primes\nin the factorizations of aandb.\nExample 3.13 Prove that every amount of postage of 12\ncents or more can be formed using just 4-cent and 5-cent\nstamps.\n\n\n\n\n",
      },
      {
        name: "The second principle of mathematical induction",
        content:
          "38 TOPIC 3. INDUCTION AND RECURSION\nExample 3.11 Prove using induction that if n >4is an\ninteger then n2> n+ 16.\n3.2 The second principle of mathematical\ninduction\nThere is another form of mathematical induction that is\noften useful in proofs. With this form we use the same\nbasis step as before, but we use a different inductive step.\nWe assume that P(k) is true for all values k= 1, . . . , n\nand show that P(n+ 1) must also be true based on this\nassumption. This is called the second principle of math-\nematical induction . We summarize the two steps used to\nshow that P(n) is true for all positive integers n:\nBasis step: The proposition P(1) is shown to be true.\nInductive step: It is shown that\n[P(1)\u2227P(2)\u2227 \u00b7\u00b7\u00b7 \u2227 P(n)]\u2192P(n+ 1)\nis true for every positive integer n.\nThe two forms of mathematical induction are equivalent;\nthat is, each can be shown to be a valid proof technique\nassuming the other. We leave it as an exercise for the\nstudent to show this.\nExample 3.12 Show that if nis an integer greater than\n1, then ncan be written as the product of primes.\nSolution.\nLetP(n)denote the proposition that ncan be written as a product\nof primes.\nBasis step: P(2)is true since it can be written as the product of\none prime, itself.\nInductive step: Assume that P(k)is true for all positive inte-\ngerskwithk\u2264n. To complete the inductive step it must be\nshown that P(n+ 1) is true under this assumption. There\nare two cases to consider, namely, when n+ 1is prime and\nwhen n+ 1is composite. If n+ 1is prime then we can\nimmediately see that P(n+ 1) is true. Otherwise n+ 1is\ncomposite and thus can be written as a product of two pos-\nitive integers aandbwith 2\u2264a\u2264b < n + 1. By the\ninduction hypothesis, both aandbcan be written as the\nproduct of primes. Thus, if n+ 1is composite, then it can\nbe written as the product of primes, namely, those primes\nin the factorizations of aandb.\nExample 3.13 Prove that every amount of postage of 12\ncents or more can be formed using just 4-cent and 5-cent\nstamps.\n\n\n\n\n3.3. LOOP INVARIANT THEOREM 39\n3.3 Loop invariant theorem\nConsider a segment of computer program of the form\nWhile GdoB\nThe condition Gis called the guard andBis called the\nbody. An iteration of the loop is one execution of B. The\nloop terminates when the guard condition becomes false.\nA statement Sis aloop invariant if, whenever Sis true\nbefore an iteration, Sremains true after the iteration.\nExample 3.14 The following is an inefficient algorithm\nto compute the quotient and remainder:\nInput: m, n\u2208P\n1. Set q= 0andr=n\n2. While ( r\u2265m) do\n\u0088q=q+ 1\n\u0088r=r\u2212m\nLetSbe the statement n=mq+r. Then Sis true at the\nbeginning of the loop and Sstays true through the body\nof the loop.\nTheorem 3.2 (Loop invariant theorem) Let Sbe an in-\nvariant of the loop \u201cwhile GdoB\u201d. Suppose Sis true on\nthe first entry into the loop. Then Sstays true at every\niteration of the loop, and if the loop terminates then Sis\ntrue after the last iteration.\n3.4 Recursive definitions\nSometimes it is difficult to define an object explicitly.\nHowever, it may be easy to define this object in terms of\nitself. This process is called recursion .\nWe can use recursion to define sequences, functions, and\nsets. In previous discussions, we specified the terms of a\nsequence using an explicit formula.\nExample 3.15 The sequence of powers of 2 is given by\nan= 2nforn= 0,1,2, . . .. However, this sequence can\nalso be defined by giving the first term of the sequence,\nnamely, a0= 1, and a rule for finding a term of the\nsequence from the previous one, namely, an+1= 2anfor\nn= 0,1,2, . . ..\n\n\n\n\n",
      },
      {
        name: "Loop invariant theorem",
        content:
          "3.3. LOOP INVARIANT THEOREM 39\n3.3 Loop invariant theorem\nConsider a segment of computer program of the form\nWhile GdoB\nThe condition Gis called the guard andBis called the\nbody. An iteration of the loop is one execution of B. The\nloop terminates when the guard condition becomes false.\nA statement Sis aloop invariant if, whenever Sis true\nbefore an iteration, Sremains true after the iteration.\nExample 3.14 The following is an inefficient algorithm\nto compute the quotient and remainder:\nInput: m, n\u2208P\n1. Set q= 0andr=n\n2. While ( r\u2265m) do\n\u0088q=q+ 1\n\u0088r=r\u2212m\nLetSbe the statement n=mq+r. Then Sis true at the\nbeginning of the loop and Sstays true through the body\nof the loop.\nTheorem 3.2 (Loop invariant theorem) Let Sbe an in-\nvariant of the loop \u201cwhile GdoB\u201d. Suppose Sis true on\nthe first entry into the loop. Then Sstays true at every\niteration of the loop, and if the loop terminates then Sis\ntrue after the last iteration.\n3.4 Recursive definitions\nSometimes it is difficult to define an object explicitly.\nHowever, it may be easy to define this object in terms of\nitself. This process is called recursion .\nWe can use recursion to define sequences, functions, and\nsets. In previous discussions, we specified the terms of a\nsequence using an explicit formula.\nExample 3.15 The sequence of powers of 2 is given by\nan= 2nforn= 0,1,2, . . .. However, this sequence can\nalso be defined by giving the first term of the sequence,\nnamely, a0= 1, and a rule for finding a term of the\nsequence from the previous one, namely, an+1= 2anfor\nn= 0,1,2, . . ..\n\n\n\n\n",
      },
      {
        name: "Recursive definitions",
        content:
          "3.3. LOOP INVARIANT THEOREM 39\n3.3 Loop invariant theorem\nConsider a segment of computer program of the form\nWhile GdoB\nThe condition Gis called the guard andBis called the\nbody. An iteration of the loop is one execution of B. The\nloop terminates when the guard condition becomes false.\nA statement Sis aloop invariant if, whenever Sis true\nbefore an iteration, Sremains true after the iteration.\nExample 3.14 The following is an inefficient algorithm\nto compute the quotient and remainder:\nInput: m, n\u2208P\n1. Set q= 0andr=n\n2. While ( r\u2265m) do\n\u0088q=q+ 1\n\u0088r=r\u2212m\nLetSbe the statement n=mq+r. Then Sis true at the\nbeginning of the loop and Sstays true through the body\nof the loop.\nTheorem 3.2 (Loop invariant theorem) Let Sbe an in-\nvariant of the loop \u201cwhile GdoB\u201d. Suppose Sis true on\nthe first entry into the loop. Then Sstays true at every\niteration of the loop, and if the loop terminates then Sis\ntrue after the last iteration.\n3.4 Recursive definitions\nSometimes it is difficult to define an object explicitly.\nHowever, it may be easy to define this object in terms of\nitself. This process is called recursion .\nWe can use recursion to define sequences, functions, and\nsets. In previous discussions, we specified the terms of a\nsequence using an explicit formula.\nExample 3.15 The sequence of powers of 2 is given by\nan= 2nforn= 0,1,2, . . .. However, this sequence can\nalso be defined by giving the first term of the sequence,\nnamely, a0= 1, and a rule for finding a term of the\nsequence from the previous one, namely, an+1= 2anfor\nn= 0,1,2, . . ..\n\n\n\n\n40 TOPIC 3. INDUCTION AND RECURSION\nRecursively defined functions\nTo define a function with the set of nonnegative integers\nas its domain,\n1. Specify the value of the function at zero (and pos-\nsibly 1, 2, . . . ).\n2. Give a rule for finding its value at an integer from\nits values at smaller integers.\nSuch a definition is called a recursive oriterative orin-\nductive definition .\nExample 3.16 Suppose that fis defined recursively by\nf(0) = 3 ,\nf(n+ 1) = 2 f(n) + 3.\nFind f(1), f(2), f(3), and f(4).\nExample 3.17 Give an inductive definition of the fac-\ntorial function F(n) =n!.\nSpecifying the first few values of a function\nIn some recursive definitions of functions, the values of\nthe function at the first kpositive integers are specified,\nand a rule is given for the determining the value of the\nfunction at larger integers from its values at some or all\nof the preceding kintegers.\nExample 3.18 The Fibonacci numbers ,f0, f1, f2, . . . ,\nare defined by the equations f0= 0, f1= 1, and\nfn=fn\u22121+fn\u22122\nforn= 2,3,4, . . .. What are the Fibonacci numbers\nf2, f3, f4, f5, f6?\nExample 3.19 Show that fn> \u03b1n\u22122, where\n\u03b1= (1 +\u221a\n5)/2, whenever n\u22653.\n(Hint: first show that \u03b12= 1 + \u03b1)\n\n\n\n\n3.5. RECURRENCE RELATIONS 41\n3.5 Recurrence relations\nConsider the following type of counting problem:\nExample 3.20 How many bit strings of length ndo not\ncontain two consecutive zeros?\nExample 3.21 The number of bacteria in a colony dou-\nbles every hour. If a colony begins with five bacteria, how\nmany will be present in nhours?\nRecurrence relations introduction\nIn the previous section we discussed how sequences can\nbe defined recursively. Recursive definitions can be used\nto solve counting problems. When they are, the rule for\nfinding terms from those that precede them is called a\nrecurrence relation.\nDefinition 3.1 Arecurrence relation for the sequence\n{an}is a formula that expresses anin terms of one or\nmore of the previous terms of the sequence, namely,\na0, a1, . . . , a n\u22121, for all integers nwithn\u2265n0, where n0\nis a nonnegative integer.\nA sequence is called a solution of a recurrence relation if\nits terms satisfy the recurrence relation.\nExample 3.22 Let{an}be a sequence that satisfies the\nrecurrence relation an=an\u22121\u2212an\u22122forn= 2,3,4, . . .,\nand suppose that a0= 3anda1= 5. What are a2and\na3?\nExample 3.23 Determine whether the sequence {an}is\na solution of the recurrence relation an= 2an\u22121\u2212an\u22122\nforn= 2,3,4, . . ., where an= 3nfor every nonnegative\ninteger n. Answer the same question where an= 2nand\nwhere an= 5.\nInitial conditions\nThe initial conditions for a sequence specify the terms\nthat precede the first term where the recurrence relation\ntakes effect.\n\n\n\n\n",
      },
      {
        name: "Recurrence relations",
        content:
          "3.5. RECURRENCE RELATIONS 41\n3.5 Recurrence relations\nConsider the following type of counting problem:\nExample 3.20 How many bit strings of length ndo not\ncontain two consecutive zeros?\nExample 3.21 The number of bacteria in a colony dou-\nbles every hour. If a colony begins with five bacteria, how\nmany will be present in nhours?\nRecurrence relations introduction\nIn the previous section we discussed how sequences can\nbe defined recursively. Recursive definitions can be used\nto solve counting problems. When they are, the rule for\nfinding terms from those that precede them is called a\nrecurrence relation.\nDefinition 3.1 Arecurrence relation for the sequence\n{an}is a formula that expresses anin terms of one or\nmore of the previous terms of the sequence, namely,\na0, a1, . . . , a n\u22121, for all integers nwithn\u2265n0, where n0\nis a nonnegative integer.\nA sequence is called a solution of a recurrence relation if\nits terms satisfy the recurrence relation.\nExample 3.22 Let{an}be a sequence that satisfies the\nrecurrence relation an=an\u22121\u2212an\u22122forn= 2,3,4, . . .,\nand suppose that a0= 3anda1= 5. What are a2and\na3?\nExample 3.23 Determine whether the sequence {an}is\na solution of the recurrence relation an= 2an\u22121\u2212an\u22122\nforn= 2,3,4, . . ., where an= 3nfor every nonnegative\ninteger n. Answer the same question where an= 2nand\nwhere an= 5.\nInitial conditions\nThe initial conditions for a sequence specify the terms\nthat precede the first term where the recurrence relation\ntakes effect.\n\n\n\n\n42 TOPIC 3. INDUCTION AND RECURSION\nThe recurrence relation and initial conditions uniquely\ndetermine a sequence. This is the case since a recurrence\nrelation, together with initial conditions, provide a recur-\nsive definition of the sequence. Any term of the sequence\ncan be found from the initial conditions using the re-\ncurrence relation a sufficient number of times. However,\nthere are better ways for computing the terms of certain\nclasses of sequences defined by recurrence relations and\ninitial conditions.\nWe can use recurrence relations to model a wide variety\nof problems, such as finding compound interest, counting\nrabbits an island, determining the number of moves in\nthe tower of Hanoi puzzle, and counting bit strings with\ncertain properties.\nCompound interest\nExample 3.24 Suppose that a person deposits $10,000\nin a savings account at a bank yielding 11% per year with\ninterest compounded annually. How much will be in the\naccount after 30 years?\nRabbits and the Fibonacci numbers\nThe next example shows how the population of rabbits\non an island can be modelled using a recurrence relation.\nExample 3.25 Consider the following problem, which\nwas originally posed by Leonardo di Pisa, also known as\nFibonacci, in the 13th century in his book Liber abaci .\nA young pair of rabbits (one of each sex) is placed on\nan island. A pair of rabbits does not breed until they are\ntwo months old. After they are two months old, each\npair of rabbits produces another pair each month. Find a\nrecurrence relation for the number of pairs of rabbits on\nthe island after nmonths, assuming that no rabbits ever\ndie.\nThe towers of Hanoi\nThe next example involves a famous puzzle.\nExample 3.26 A popular puzzle of the late 19th cen-\ntury, called the Towers of Hanoi, consists of three pegs\nmounted on a board together with discs of different sizes.\nInitially these discs are placed on the first peg in order\nof size, with the largest on the bottom. The rules of the\npuzzle allow discs to be moved one at a time from one\npeg to another as long as a disc is never placed on top of\na smaller disc.\n\n\n\n\n3.6. SOLVING RECURRENCE RELATIONS 43\nThe goal of the puzzle is to have all the discs on the\nsecond peg in order of size, with the largest on the bottom.\nLetHndenote the number of moves needed to solve the\nTowers of Hanoi problem with ndiscs. Set up a recur-\nrence relation for the sequence {Hn}.\nNon-consecutive 0\u2019s\nExample 3.27 Find a recurrence relation and give ini-\ntial conditions for the number of bit strings of length n\nthat do not have two consecutive 0\u2019s. How many such bit\nstrings are there of length five?\nCodewords\nThe next example shows how a recurrence relation can\nbe used to model the number of codewords that are al-\nlowable using certain validity checks.\nExample 3.28 A computer system considers a string\nof decimal digits a valid codeword if it contains an even\nnumber of 0 digits. For instance, 1230407869 is valid,\nwhereas 120987045608 is not valid.\nLetanbe the number of valid n-digit codewords. Find a\nrecurrence relation for an.\n3.6 Solving recurrence relations\nA wide variety of recurrence relations occur in models.\nSome of these recurrence relations can be solved using\niteration or some other ad hoc technique. However, one\nimportant class of recurrence relations can be explicitly\nsolved in a systematic way. These are recurrence rela-\ntions that express the terms of a sequence as linear com-\nbinations of previous terms.\nLinear homogeneous recurrence relations\nDefinition 3.2 Alinear homogeneous recurrence rela-\ntion of degree kwith constant coefficients is a recurrence\nrelation of the form\nan=c1an\u22121+c2an\u22122+\u00b7\u00b7\u00b7+ckan\u2212k\nwhere c1, c2, . . . , c kare real numbers, and ck\u0338= 0.\n\n\n\n\n",
      },
      {
        name: "Solving recurrence relations",
        content:
          "3.6. SOLVING RECURRENCE RELATIONS 43\nThe goal of the puzzle is to have all the discs on the\nsecond peg in order of size, with the largest on the bottom.\nLetHndenote the number of moves needed to solve the\nTowers of Hanoi problem with ndiscs. Set up a recur-\nrence relation for the sequence {Hn}.\nNon-consecutive 0\u2019s\nExample 3.27 Find a recurrence relation and give ini-\ntial conditions for the number of bit strings of length n\nthat do not have two consecutive 0\u2019s. How many such bit\nstrings are there of length five?\nCodewords\nThe next example shows how a recurrence relation can\nbe used to model the number of codewords that are al-\nlowable using certain validity checks.\nExample 3.28 A computer system considers a string\nof decimal digits a valid codeword if it contains an even\nnumber of 0 digits. For instance, 1230407869 is valid,\nwhereas 120987045608 is not valid.\nLetanbe the number of valid n-digit codewords. Find a\nrecurrence relation for an.\n3.6 Solving recurrence relations\nA wide variety of recurrence relations occur in models.\nSome of these recurrence relations can be solved using\niteration or some other ad hoc technique. However, one\nimportant class of recurrence relations can be explicitly\nsolved in a systematic way. These are recurrence rela-\ntions that express the terms of a sequence as linear com-\nbinations of previous terms.\nLinear homogeneous recurrence relations\nDefinition 3.2 Alinear homogeneous recurrence rela-\ntion of degree kwith constant coefficients is a recurrence\nrelation of the form\nan=c1an\u22121+c2an\u22122+\u00b7\u00b7\u00b7+ckan\u2212k\nwhere c1, c2, . . . , c kare real numbers, and ck\u0338= 0.\n\n\n\n\n44 TOPIC 3. INDUCTION AND RECURSION\nThe recurrence relation in the definition is linear since\nthe right-hand side is a sum of constant multiples of the\nprevious terms of the sequence. The recurrence relation\nishomogeneous since no terms occur that are not mul-\ntiples of the aj\u2019s. The coefficients of the terms of the\nsequence are all constants , rather than functions that\ndepend on n. The degree iskbecause anis expressed in\nterms of the previous kterms of the sequence.\nA consequence of the second principle of mathematical\ninduction is that a sequence satisfying the recurrence re-\nlation in the definition is uniquely determined by this\nrecurrence relation and the kinitial conditions\na0=C0, a1=C1, . . . , a k\u22121=Ck\u22121.\nLinear homogeneous recurrence relations are studied for\ntwo reasons. First, they often occur in modelling of prob-\nlems. Second, they can be systematically solved.\n3.7 Solving linear homogeneous recurrence\nrelations\nThe basic approach for solving linear homogeneous re-\ncurrence relations is to look for solutions of the form\nan=rn, where ris a constant. Note that an=rnis a\nsolution of the recurrence relation\nan=c1an\u22121+c2an\u22122+\u00b7\u00b7\u00b7+ckan\u2212k\nif and only if\nrn=c1rn\u22121+c2rn\u22122+\u00b7\u00b7\u00b7+ckrn\u2212k.\nCharacteristic equation\nWhen both sides of this equation are divided by rn\u2212k\nand the right-hand side is subtracted from the left, we\nobtain the equivalent equation\nrk\u2212c1rk\u22121\u2212c2rk\u22122\u2212 \u00b7\u00b7\u00b7 \u2212 ck\u22121r\u2212ck= 0.\nConsequently, the sequence {an}with an=rnis a so-\nlution if and only if ris a solution of this last equation,\nwhich is called the characteristic equation of the recur-\nrence relation. The solutions of this equation are called\nthecharacteristic roots of the recurrence relation. As we\nwill see, these characteristic roots can be used to give\nan explicit formula for all the solutions of the recurrence\nrelation.\nLinear homogeneous recurrence relations of de-\ngree two: distinct roots\nWe now turn our attention to linear homogeneous recur-\nrence relations of degree two. First, consider the case\nwhen there are two distinct characteristic roots.\nTheorem 3.3 Letc1andc2be real numbers. Suppose\nthatr2\u2212c1r\u2212c2= 0has two distinct roots r1andr2.\n\n\n\n\n",
      },
      {
        name: "Solving linear homogeneous recurrence relations",
        content:
          "44 TOPIC 3. INDUCTION AND RECURSION\nThe recurrence relation in the definition is linear since\nthe right-hand side is a sum of constant multiples of the\nprevious terms of the sequence. The recurrence relation\nishomogeneous since no terms occur that are not mul-\ntiples of the aj\u2019s. The coefficients of the terms of the\nsequence are all constants , rather than functions that\ndepend on n. The degree iskbecause anis expressed in\nterms of the previous kterms of the sequence.\nA consequence of the second principle of mathematical\ninduction is that a sequence satisfying the recurrence re-\nlation in the definition is uniquely determined by this\nrecurrence relation and the kinitial conditions\na0=C0, a1=C1, . . . , a k\u22121=Ck\u22121.\nLinear homogeneous recurrence relations are studied for\ntwo reasons. First, they often occur in modelling of prob-\nlems. Second, they can be systematically solved.\n3.7 Solving linear homogeneous recurrence\nrelations\nThe basic approach for solving linear homogeneous re-\ncurrence relations is to look for solutions of the form\nan=rn, where ris a constant. Note that an=rnis a\nsolution of the recurrence relation\nan=c1an\u22121+c2an\u22122+\u00b7\u00b7\u00b7+ckan\u2212k\nif and only if\nrn=c1rn\u22121+c2rn\u22122+\u00b7\u00b7\u00b7+ckrn\u2212k.\nCharacteristic equation\nWhen both sides of this equation are divided by rn\u2212k\nand the right-hand side is subtracted from the left, we\nobtain the equivalent equation\nrk\u2212c1rk\u22121\u2212c2rk\u22122\u2212 \u00b7\u00b7\u00b7 \u2212 ck\u22121r\u2212ck= 0.\nConsequently, the sequence {an}with an=rnis a so-\nlution if and only if ris a solution of this last equation,\nwhich is called the characteristic equation of the recur-\nrence relation. The solutions of this equation are called\nthecharacteristic roots of the recurrence relation. As we\nwill see, these characteristic roots can be used to give\nan explicit formula for all the solutions of the recurrence\nrelation.\nLinear homogeneous recurrence relations of de-\ngree two: distinct roots\nWe now turn our attention to linear homogeneous recur-\nrence relations of degree two. First, consider the case\nwhen there are two distinct characteristic roots.\nTheorem 3.3 Letc1andc2be real numbers. Suppose\nthatr2\u2212c1r\u2212c2= 0has two distinct roots r1andr2.\n\n\n\n\n3.7. SOLVING LINEAR HOMOGENEOUS RECURRENCE RELATIONS 45\nThen the sequence {an}is a solution of the recurrence\nrelation\nan=c1an\u22121+c2an\u22122\nif and only if an=\u03b21rn\n1+\u03b22rn\n2forn= 0,1,2, . . ., where\n\u03b21and\u03b22are constants.\nProof: See lecture.\nThe actual procedure for solving the recurrence relation\nan=c1an\u22121+c2an\u22122\nwith initial values a0anda1is the following (provided\nthat the roots of the characteristic equation are distinct.):\nStep 1 : Identify the characteristic polynomial p(x) and\nfind its roots r1andr2\nStep 2 : Ifr1\u0338=r2then the general solution is of the\nform\nan=\u03b21rn\n1+\u03b22rn\n2\nwhere \u03b21and\u03b22are constants.\nStep 3 : Determine the values of \u03b21and\u03b22by using\nthe initial conditions a0anda1.\nExample 3.29 Solve the recurrence relation\nan+2+ 2an+1\u22123an= 0\nwith initial values a0= 1anda1=\u22121.\nSolution.\nStep 1 Determine the characteristic equation by substituting\nan=rnand factoring out rn\nrn+2+ 2rn+1\u22123rn= 0\nr2+ 2r\u22123 = 0\n(r+ 3)( r\u22121) = 0\nTake r1=\u22123andr2= 1.\nStep 2 The general solution is\nan=\u03b21(\u22123)n+\u03b22(1)n\nStep 3 Using the initial values a0= 1anda1=\u22121we obtain\na0= 1 = \u03b21+\u03b22 (n= 0)\na1=\u22121 =\u03b22\u22123\u03b21 (n= 1)\nand this gives us \u03b21=\u03b22=1\n2.\nThus an=1\n2+1\n2(\u22123)n, n \u22650is the unique solution to\nthe given recurrence relation.\nExample 3.30 What is the solution of the recurrence\nrelation\nan=an\u22121+ 2an\u22122\nwitha0= 2anda1= 7?\nExample 3.31 Find an explicit formula for the Fibonacci\nnumbers.\n\n\n\n\n46 TOPIC 3. INDUCTION AND RECURSION\nLinear homogeneous recurrence relations of de-\ngree two: one root of multiplicity two\nTheorem 4.2 does not apply when there is one character-\nistic root of multiplicity two. This case can be handled\nusing the following theorem.\nTheorem 3.4 Letc1andc2be real numbers with c2\u0338= 0.\nSuppose that r2\u2212c1r\u2212c2= 0 has only one root r1.\nA sequence {an}is a solution of the recurrence relation\nan=c1an\u22121+c2an\u22122if and only if an=\u03b21rn\n1+\u03b22nrn\n1,\nforn= 0,1,2, . . ., where \u03b21and\u03b22are constants.\nThe actual procedure for solving the recurrence relation\nan=c1an\u22121+c2an\u22122\nwith initial values a0anda1is the following (provided\nthat the roots of the characteristic equation are not dis-\ntinct):\nStep 1 : Identify the characteristic polynomial p(x) and\nfind its roots r1andr2\nStep 2 : Ifr1=r2then the general solution is of the\nform\nan=\u03b21rn\n1+\u03b22nrn\n1= (\u03b21+n\u03b22)rn\n1\nwhere \u03b21and\u03b22are constants.\nStep 3 : Determine the values of \u03b21and\u03b22by using\nthe initial conditions a0anda1.\nExample 3.32 Solve the recurrence relation\nan+ 2an\u22121+an\u22122= 0\nwith initial values a0= 1anda1=\u22123.\nExample 3.33 What is the solution of the recurrence\nrelation\nan= 6an\u22121\u22129an\u22122\nwith initial conditions a0= 1anda1= 6?\n\n\n\n\nRelations and Functions\n4.1 Ordered pairs, Cartesian products, power\nset\nGiven two objects xandy, we can form the ordered pair\n(x, y). Unlike the pair set {x, y}, the order in which the\nelements appear is important: given two ordered pairs\n(x, y) and ( u, v), we have\n(x, y) = (u, v) \u21d4 x=uandy=v.\nSimilarly, we have ordered triples ( x, y, z ), ordered 4-\ntuples ( w, x, y, z ), and so on, where if ( x1, x2, . . . , x n) and\n(y1, y2, . . . , y n) are ordered n-tuples then\n(x1, x2, . . . , x n) = (y1, y2, . . . , y n)\u21d4xi=yi\nfori= 1,2, . . . , n .\nCartesian product\nGiven sets AandB, we form the Cartesian product ofA\nandB, written A\u00d7B, defined by\nA\u00d7B={(a, b) :a\u2208A, b\u2208B}.\nIfAandBare finite sets then |A\u00d7B|=|A| \u00b7 |B|.\nIfA1,A2, . . . , Anare sets, we define A1\u00d7A2\u00d7 \u00b7\u00b7\u00b7 \u00d7 An\nto be the set of all n-tuples ( a1, a2, . . . , a n) where ai\u2208Ai\nfori= 1,2, . . . , n .\nWe sometimes write AnforA\u00d7A\u00d7 \u00b7\u00b7\u00b7 \u00d7 A| {z }\nntimes. In partic-\nular, we often write A2forA\u00d7A.\nExample 4.1 The grid of squares used in the game of\nbattleships is the example\n{1,2,3,4,5,6,7,8} \u00d7 { a, b, c, d, e, f, g, h }\nof a Cartesian product.\na\nb\nc\nd\ne\nf\ng\nh1 2 3 4 6 7 8 5\na\nb\nc\nd\ne\nf\ng\nh1 2 3 4 6 7 8 5\n47\n\n\n\n\n",
      },
    ],
  },
  {
    name: "Relations and Functions",
    definition: {
      simple:
        "\n\nRelations refer to the connections or associations between two objects or sets of data. In mathematical terms, a relation can be thought of as a set of ordered pairs of objects, where the first element in each pair is related to the second element.\n\nFunctions, on the other hand, are a special type of relation that describe how one input corresponds to one output. Each input value in a function corresponds to exactly one output value, and functions can be expressed using equations or graphs. In mathematical notation, a function is represented as \u201cf(x)\u201d, where \u201cx\u201d is the input variable and \u201cf(x)\u201d is the output variable.",
    },
    childs: [
      {
        name: "Ordered pairs, Cartesian products, power set",
        content:
          "Relations and Functions\n4.1 Ordered pairs, Cartesian products, power\nset\nGiven two objects xandy, we can form the ordered pair\n(x, y). Unlike the pair set {x, y}, the order in which the\nelements appear is important: given two ordered pairs\n(x, y) and ( u, v), we have\n(x, y) = (u, v) \u21d4 x=uandy=v.\nSimilarly, we have ordered triples ( x, y, z ), ordered 4-\ntuples ( w, x, y, z ), and so on, where if ( x1, x2, . . . , x n) and\n(y1, y2, . . . , y n) are ordered n-tuples then\n(x1, x2, . . . , x n) = (y1, y2, . . . , y n)\u21d4xi=yi\nfori= 1,2, . . . , n .\nCartesian product\nGiven sets AandB, we form the Cartesian product ofA\nandB, written A\u00d7B, defined by\nA\u00d7B={(a, b) :a\u2208A, b\u2208B}.\nIfAandBare finite sets then |A\u00d7B|=|A| \u00b7 |B|.\nIfA1,A2, . . . , Anare sets, we define A1\u00d7A2\u00d7 \u00b7\u00b7\u00b7 \u00d7 An\nto be the set of all n-tuples ( a1, a2, . . . , a n) where ai\u2208Ai\nfori= 1,2, . . . , n .\nWe sometimes write AnforA\u00d7A\u00d7 \u00b7\u00b7\u00b7 \u00d7 A| {z }\nntimes. In partic-\nular, we often write A2forA\u00d7A.\nExample 4.1 The grid of squares used in the game of\nbattleships is the example\n{1,2,3,4,5,6,7,8} \u00d7 { a, b, c, d, e, f, g, h }\nof a Cartesian product.\na\nb\nc\nd\ne\nf\ng\nh1 2 3 4 6 7 8 5\na\nb\nc\nd\ne\nf\ng\nh1 2 3 4 6 7 8 5\n47\n\n\n\n\n48 TOPIC 4. RELATIONS AND FUNCTIONS\nExample 4.2 What is the Cartesian product A\u00d7B\u00d7C\nwhere A={0,1}, B={1,2}, and C={0,1,2}? What\nis(A\u00d7B)\u00d7C?\nPower Set\nGiven a set Awe can form the power set ofA, denoted\nbyP(A), containing all the subsets of A.\nExample 4.3 IfA={1,2}then\nP(A) =\nWe will show later that if Ahasnelements then P(A)\nhas 2nelements.\n4.2 Relations\nLetAandBbe sets. A binary relation from AtoBis\na subset of A\u00d7B. Abinary relation on Ais a subset of\nA\u00d7A.\nWe use binary relations to represent relationships be-\ntween the elements of Aand the elements of B. IfRis\na binary relation from AtoB, and ( x, y)\u2208A\u00d7B, then\n(x, y)\u2208Rif and only if the relationship holds between\nthe element xand the element y.\nExample 4.4 Take A={1,2,3}, and let Rbe the rela-\ntion on Adefined by\n(x, y)\u2208R \u21d4 x < y.\nThen we have R={(1,2),(1,3),(2,3)}.\nExample 4.5 LetAbe the set of students at Auckland\nUniversity, and let Bbe the set of courses. Let Rbe\nthe relation that consists of those pairs (a, b)where a\nis a student in course b. For instance, if Sooyoun Lee\nand Wiremu Ngata are enrolled in 225, the pair (Sooy-\noun Lee, 225) and (Wiremu Ngata, 225) belong to R. If\n\n\n\n\n",
      },
      {
        name: "Relations",
        content:
          "48 TOPIC 4. RELATIONS AND FUNCTIONS\nExample 4.2 What is the Cartesian product A\u00d7B\u00d7C\nwhere A={0,1}, B={1,2}, and C={0,1,2}? What\nis(A\u00d7B)\u00d7C?\nPower Set\nGiven a set Awe can form the power set ofA, denoted\nbyP(A), containing all the subsets of A.\nExample 4.3 IfA={1,2}then\nP(A) =\nWe will show later that if Ahasnelements then P(A)\nhas 2nelements.\n4.2 Relations\nLetAandBbe sets. A binary relation from AtoBis\na subset of A\u00d7B. Abinary relation on Ais a subset of\nA\u00d7A.\nWe use binary relations to represent relationships be-\ntween the elements of Aand the elements of B. IfRis\na binary relation from AtoB, and ( x, y)\u2208A\u00d7B, then\n(x, y)\u2208Rif and only if the relationship holds between\nthe element xand the element y.\nExample 4.4 Take A={1,2,3}, and let Rbe the rela-\ntion on Adefined by\n(x, y)\u2208R \u21d4 x < y.\nThen we have R={(1,2),(1,3),(2,3)}.\nExample 4.5 LetAbe the set of students at Auckland\nUniversity, and let Bbe the set of courses. Let Rbe\nthe relation that consists of those pairs (a, b)where a\nis a student in course b. For instance, if Sooyoun Lee\nand Wiremu Ngata are enrolled in 225, the pair (Sooy-\noun Lee, 225) and (Wiremu Ngata, 225) belong to R. If\n\n\n\n\n4.2. RELATIONS 49\nSooyoun Lee is also enrolled in 220, then the pair (Sooy-\noun Lee, 220) is also in R. However, if Wiremu Ngata is\nnot enrolled in 220, then the pair (Wiremu Ngata, 220)\nis not in R.\nProperties of relations\nWe often use infix notation for relations. In other words,\nwe write ( x, y)\u2208Rasx R y . This is particularly com-\nmon with relations like <, =,\u2286and so on that have\nstandard names. If ( x, y)/\u2208R, we write x\u0338R y.\nThere are various properties that a relation on a set\nmight or might not have. We say that a relation Ron a\nsetAis\n\u0088reflexive if for all x\u2208A,x R x .\n\u0088symmetric if for all x, y\u2208A, ifx R y then y R x .\n\u0088antisymmetric if for all x, y\u2208A, ifx R y andy R x\nthen x=y.\n\u0088transitive if for all x, y, z \u2208A, ifx R y andy R z\nthen x R z .\nExample 4.6 Consider the relation =on any set A.\nWhich of the above properties hold?\nExample 4.7 Consider the relation <onR. Which of\nthe above properties hold?\nExample 4.8 Consider the relation |onZ, defined by\na|b \u21d4 for some c\u2208Z,b=ac.\nWhich of the above properties hold?\nExample 4.9 Can a relation be both symmetric and an-\ntisymmetric?\nExample 4.10 A relation on a finite set Scan be pic-\ntured as a directed (pseudo)graph. Let the vertex set of\n\n\n\n\n50 TOPIC 4. RELATIONS AND FUNCTIONS\nthe graph be Sand the pairs (x, y)satisfying the relation\nare represented as directed edges (x, y). Draw the relation\n|on the set S={1,2,3,4,5,6}.\n4.3 Equivalence relations\nLetAbe a set. An equivalence relation onAis a binary\nrelation on Athat is reflexive, symmetric and transitive.\nWe often use symbols like \u223c,\u2261and\u223c=for equivalence\nrelations.\nExample 4.11 On the set of students attending Auck-\nland University, define one student to be related to an-\nother whenever their surnames begin with the same letter.\nIs this an equivalence relation?\nExample 4.12 LetSdenote the set of all people in New\nZealand. Define a relation RonSby letting x R y mean\nthatxhas the same mother as y. Is this an equivalence\nrelation?\nDoes the answer change if we define x R y to mean that\nxhas the same mother or father as y?\nExample 4.13 Consider the set Zof integers. Fix some\ninteger m > 1. Then the relation of congruence modulo\nm, defined by\nx\u2261y(mod m) \u21d4 m|x\u2212y,\nis an equivalence relation.\nExample 4.14 LetG= (V, E)be a simple graph. Con-\nsider the binary relation on Vsuch that, for u, v\u2208V,\nu R v if and only if there is a path from utov. This is\nan equivalence relation, which we call connectivity .\nExample 4.15 LetCdenote the set of all computer\nprograms. Define a relation \u223conCas follows: For\nC, C\u2032\u2208 C (in other words, for any two computer pro-\ngrams CandC\u2032) we write C\u223cC\u2032if, for all possible\nprogram inputs x, either CandC\u2032both do not terminate\n\n\n\n\n",
      },
      {
        name: "Equivalence relations",
        content:
          "50 TOPIC 4. RELATIONS AND FUNCTIONS\nthe graph be Sand the pairs (x, y)satisfying the relation\nare represented as directed edges (x, y). Draw the relation\n|on the set S={1,2,3,4,5,6}.\n4.3 Equivalence relations\nLetAbe a set. An equivalence relation onAis a binary\nrelation on Athat is reflexive, symmetric and transitive.\nWe often use symbols like \u223c,\u2261and\u223c=for equivalence\nrelations.\nExample 4.11 On the set of students attending Auck-\nland University, define one student to be related to an-\nother whenever their surnames begin with the same letter.\nIs this an equivalence relation?\nExample 4.12 LetSdenote the set of all people in New\nZealand. Define a relation RonSby letting x R y mean\nthatxhas the same mother as y. Is this an equivalence\nrelation?\nDoes the answer change if we define x R y to mean that\nxhas the same mother or father as y?\nExample 4.13 Consider the set Zof integers. Fix some\ninteger m > 1. Then the relation of congruence modulo\nm, defined by\nx\u2261y(mod m) \u21d4 m|x\u2212y,\nis an equivalence relation.\nExample 4.14 LetG= (V, E)be a simple graph. Con-\nsider the binary relation on Vsuch that, for u, v\u2208V,\nu R v if and only if there is a path from utov. This is\nan equivalence relation, which we call connectivity .\nExample 4.15 LetCdenote the set of all computer\nprograms. Define a relation \u223conCas follows: For\nC, C\u2032\u2208 C (in other words, for any two computer pro-\ngrams CandC\u2032) we write C\u223cC\u2032if, for all possible\nprogram inputs x, either CandC\u2032both do not terminate\n\n\n\n\n4.3. EQUIVALENCE RELATIONS 51\non input x, or else both CandC\u2032terminate on input x\nand return the same output.\nExample 4.16 Letf:A\u2192Bbe a function. Then the\nrelation \u223cfonA, defined by\nx\u223cfy \u21d4 f(x) =f(y)\nis an equivalence relation. We call this relation the equiv-\nalence relation induced by f.\nEquivalence classes, partitions\nLet\u223cbe an equivalence relation on a set A, and let\nx\u2208A. The equivalence class of xunder \u223c, denoted by\n[x], is the set of all elements of Athat are related to x\nunder \u223c, i.e.\n[x] ={y\u2208A:x\u223cy}\nWe denote the set of equivalence classes of elements of A\nunder \u223cby [A] or by A/\u223c.\nExample 4.17 Consider the relation of congruence mod-\nulo 2 on the set Z. What are [0],[1]?\nExample 4.18 LetGbe a simple graph and let Rbe the\nrelation of connectivity. The equivalence classes are the\nconnected components of the graph.\nSolution. [1] ={1,\u22121},[14] = {14,\u221214}, and [0] ={0}.\nEquivalence class lemma\nIf\u223cis an equivalence relation on A, and x, y\u2208A, then\nthe following are equivalent:\n1.x\u223cy.\n2. [x] = [y].\n3. [x]\u2229[y]\u0338=\u2205.\nProof: We show that (1) implies (2), (2) implies (3)\nand (3) implies (1).\n\n\n\n\n52 TOPIC 4. RELATIONS AND FUNCTIONS\n(1)\u21d2(2) Suppose x\u223cy. Let z\u2208[y]. Then y\u223cz, so\nwe have x\u223cy\u223cz, and so by transitivity we have\nx\u223cz. Thus z\u2208[x]. Hence [ y]\u2286[x]. Conversely,\nletw\u2208[x]. Then x\u223cw, so by symmetry we have\nw\u223cx. Sow\u223cx\u223cy, and so w\u223cy. Hence y\u223cw,\nsow\u2208[y]. Thus [ x]\u2286[y], so [ x] = [y].\n(2)\u21d2(3) Suppose [ x] = [y]. Then [ x]\u2229[y] = [x]\u2229[x] =\n[x]. By reflexivity, x\u223cx, sox\u2208[x], so [ x]\u0338=\u2205.\nThus [ x]\u2229[y]\u0338=\u2205.\n(3)\u21d2(1) Suppose [ x]\u2229[y]\u0338=\u2205. Let z\u2208[x]\u2229[y]. Then\nx\u223czandy\u223cz. By symmetry, we have z\u223cy, so\nx\u223cz\u223cy, and therefore by transitivity we have\nx\u223cy.\nHence (1), (2) and (3) are equivalent.\nIn other words, if [ x] and [ y] are equivalence classes then\neither [ x] = [y] or [ x] and [ y] are disjoint. We say that\nthe relation \u223cpartitions the set A.\nDefinition 4.1 A (finite) partition of a set Xis a set\n{X1, . . . , X t}where Xi\u2286X,Xi\u0338=\u2205and:\n1.Xi\u2229Xj=\u2205when 1\u2a7di < j\u2a7dt;\n2.X1\u222aX2\u222a \u00b7\u00b7\u00b7 \u222a Xt=X.\nAn example of a partition is cutting a cake into pieces:\nNo slice of cake is empty, slices of cake have no crumbs\nin common, putting the slices together forms the whole\ncake.\nExample 4.19 LetRbe the relation on Zsuch that\nx R y if and only if x=yorx=\u2212y. Show that Ris an\nequivalence relation. What are [1],[\u221214], and [0]?\nSolution. [1] ={1,\u22121},[14] = {14,\u221214}, and [0] ={0}.\nThe graph representing an equivalence relation on a finite\nset is a union of complete graphs (with loops at every\nvertex).\n4.4 Partial orderings\nIntroduction\nA commonly used type of relation is an ordering. For\ninstance, words in a dictionary are ordered using a re-\nlation called \u201clexicographical ordering\u201d. We also order\nreal numbers and integers in familiar ways.\nConsider the usual ordering on Z. Then the set of inte-\ngers satisfying the relation is {(x, y)\u2208Z2|x\u2a7dy}. One\n\n\n\n\n",
      },
      {
        name: "Partial orderings",
        content:
          "52 TOPIC 4. RELATIONS AND FUNCTIONS\n(1)\u21d2(2) Suppose x\u223cy. Let z\u2208[y]. Then y\u223cz, so\nwe have x\u223cy\u223cz, and so by transitivity we have\nx\u223cz. Thus z\u2208[x]. Hence [ y]\u2286[x]. Conversely,\nletw\u2208[x]. Then x\u223cw, so by symmetry we have\nw\u223cx. Sow\u223cx\u223cy, and so w\u223cy. Hence y\u223cw,\nsow\u2208[y]. Thus [ x]\u2286[y], so [ x] = [y].\n(2)\u21d2(3) Suppose [ x] = [y]. Then [ x]\u2229[y] = [x]\u2229[x] =\n[x]. By reflexivity, x\u223cx, sox\u2208[x], so [ x]\u0338=\u2205.\nThus [ x]\u2229[y]\u0338=\u2205.\n(3)\u21d2(1) Suppose [ x]\u2229[y]\u0338=\u2205. Let z\u2208[x]\u2229[y]. Then\nx\u223czandy\u223cz. By symmetry, we have z\u223cy, so\nx\u223cz\u223cy, and therefore by transitivity we have\nx\u223cy.\nHence (1), (2) and (3) are equivalent.\nIn other words, if [ x] and [ y] are equivalence classes then\neither [ x] = [y] or [ x] and [ y] are disjoint. We say that\nthe relation \u223cpartitions the set A.\nDefinition 4.1 A (finite) partition of a set Xis a set\n{X1, . . . , X t}where Xi\u2286X,Xi\u0338=\u2205and:\n1.Xi\u2229Xj=\u2205when 1\u2a7di < j\u2a7dt;\n2.X1\u222aX2\u222a \u00b7\u00b7\u00b7 \u222a Xt=X.\nAn example of a partition is cutting a cake into pieces:\nNo slice of cake is empty, slices of cake have no crumbs\nin common, putting the slices together forms the whole\ncake.\nExample 4.19 LetRbe the relation on Zsuch that\nx R y if and only if x=yorx=\u2212y. Show that Ris an\nequivalence relation. What are [1],[\u221214], and [0]?\nSolution. [1] ={1,\u22121},[14] = {14,\u221214}, and [0] ={0}.\nThe graph representing an equivalence relation on a finite\nset is a union of complete graphs (with loops at every\nvertex).\n4.4 Partial orderings\nIntroduction\nA commonly used type of relation is an ordering. For\ninstance, words in a dictionary are ordered using a re-\nlation called \u201clexicographical ordering\u201d. We also order\nreal numbers and integers in familiar ways.\nConsider the usual ordering on Z. Then the set of inte-\ngers satisfying the relation is {(x, y)\u2208Z2|x\u2a7dy}. One\n\n\n\n\n4.4. PARTIAL ORDERINGS 53\ncan verify that this relation is reflexive, antisymmetric,\nand transitive. Other relations that have these properties\ncan be considered to be somehow \u201canalogous\u201d to familiar\norderings.\nPoset\nA relation Ron a set Sis called a partial ordering or\npartial order if it is reflexive, antisymmetric, and transi-\ntive. A set Stogether with a partial ordering Ris called\napartially ordered set , orposet , and is denoted by ( S, R).\nExample 4.20 Show that the \u201cgreater than or equal\u201d\nrelation (\u2265)is a partial ordering on the set of integers.\nExample 4.21 The divisibility relation |is a partial or-\ndering on the set of positive integers P=Z\u22651, since it\nis reflexive, antisymmetric, and transitive, as was shown\nin Example 4.2. We see that (P,|)is a poset.\nExample 4.22 Show that the inclusion relation \u2286is a\npartial ordering on the power set of a set S.\nExample 4.23 LetAbe the set of all strings over the\nalphabet {0,1}. We say that x\u2208Ais aprefix ofy\u2208A\nify=xvfor some v\u2208A. For example 01is a prefix of\n01111 , while 01is not a prefix of 1111. Show that this\nrelation is a partial ordering.\nExample 4.24 LetSbe the set of all students in COMP-\nSCI 225. Define a partial ordering \u2aafsuch that x\u2aafyif\nand only if x\u2019s height is less than or equal to y\u2019s height.\nIs(S,\u2aaf)a poset?\nNotation\nIn a poset the notation a\u2aafbdenotes that ( a, b)\u2208R.\nThis symbol is used to emphasise the similarity to the\nfamiliar \u201cless than or equal to\u201d relation. But be careful:\nJust because a relation is denoted by a symbol like \u2aaf\ndoes not automatically imply it has exactly the same\n\n\n\n\n54 TOPIC 4. RELATIONS AND FUNCTIONS\nproperties as \u2a7d. We write a\u227abto mean a\u2aafb, but\na\u0338=b. Also, we say \u201c ais less than b\u201d or \u201c bis greater\nthan a\u201d ifa\u227ab.\nComparable\nWhen aandbare elements of the poset ( S,\u2aaf), it is not\nnecessary that either a\u2aafborb\u2aafa. For instance, in\n(P(Z),\u2286),{1,2}is not related to {1,3}, and vice versa,\nsince neither set is contained within the other. Similarly,\nin (P,|), 2 is not related to 3 and 3 is not related to 2,\nsince 2 \u22243 and 3 \u22242. This leads to the following definition.\nThe elements aandbof a poset ( S,\u227a) are\ncalled comparable if either a\u2aafborb\u2aafa.\nWhen aandbare elements of Ssuch that\nneither a\u2aafbnorb\u2aafa,aandbare called\nincomparable .\nExample 4.25 In the poset (P,|), are the integers 3 and\n9 comparable? Are 5 and 7 comparable?\nExample 4.26 In the poset (P(S),\u2286), where S={a, b, c},\n{a}is not comparable to {b}, and{a, b}is not comparable\nto{b, c}.\nTotally ordered set\nThe adjective \u201cpartial\u201d is used to describe partial order-\nings since pairs of elements may be incomparable. When\nevery two elements in the set are comparable, the relation\nis called a total ordering .\nDefinition 4.2 If(S,\u2aaf)is a poset and every two ele-\nments of Sare comparable, Sis called a totally ordered\norlinearly ordered set , and\u2aafis called a total order or a\nlinear order . A totally ordered set is also called a chain .\nExample 4.27 The poset (Z,\u2a7d)is totally ordered, since\na\u2a7dborb\u2a7dawhenever a and b are integers.\nExample 4.28 The poset (P,|)is not totally ordered\nsince it contains elements that are incomparable, such\nas 5 and 7.\n\n\n\n\n4.4. PARTIAL ORDERINGS 55\nWell ordered set\nWe say that ( S,\u2aaf) is a well-ordered set if it is a poset such\nthat\u2aafis a total ordering and such that every nonempty\nsubset of S has a least element. ( ais a least element of\n(S,\u2aaf) ifa\u2aafbfor all b\u2208S.)\nExample 4.29 The most familiar example of a well-\nordered set is the set (N,\u2a7d)of natural numbers, with the\nusual \u201cless than or equals\u201d ordering.\nExample 4.30 The set of ordered pairs of positive in-\ntegers, P\u00d7P, with (a1, a2)\u2aaf(b1, b2)ifa1< b 1, or if\na1=b1, and a2\u2a7db2(the lexicographic ordering), is a\nwell-ordered set.\nExample 4.31 The set Z, with the usual \u2a7dordering, is\nnot well ordered since the set of negative integers, which\nis a subset of Z, has no least element.\nLexicographic order\nThe letters of the alphabet have a standard ordering \u2018a\u2019\n<\u2018b\u2019<\u00b7\u00b7\u00b7<\u2018z\u2019. The \u201cdictionary\u201d or \u201clexicographic\u201d\nordering turns this ordering on letters into an ordering\non words. This is a special case of a general principle:\ngiven an alphabet set Athat is a poset one can impose an\nordering on strings over the alphabet A. We now explain\nthis construction.\nFirst, we will show how to construct a partial ordering\non the Cartesian product of two posets, ( A1,\u2aaf1) and\n(A2,\u2aaf2). The lexicographic ordering \u2aafonA1\u00d7A2is\ndefined by specifying that one pair is less than a second\npair if the first entry of the first pair is less than (in A1)\nthe first entry of the second pair, or if the first entries are\nequal, but the second entry of this pair is less than (in\nA2) the second entry of the second pair. In other words,\n(a1, a2) is less than ( b1, b2), that is\n(a1, a2)\u227a(b1, b2),\neither if a1\u227a1b1or if both a1=b1anda2\u227a2b2.\nWe obtain a partial ordering \u2aafby adding equality to the\nordering \u227aonA\u00d7B. The verification of this is left as\nan exercise.\nExample 4.32 Determine whether (3,5)\u227a(4,8), whether\n(3,8)\u227a(4,5), and whether (4,9)\u227a(4,11)in the poset\n\n\n\n\n56 TOPIC 4. RELATIONS AND FUNCTIONS\n(Z\u00d7Z,\u2aaf), where \u2aafis the lexicographic ordering con-\nstructed from the usual \u2a7drelation on Z.\nExample 4.33 On Figure 4.1, indicate the set of or-\ndered pairs in P\u00d7Pthat are less than (3, 4).\n. . .. . .. . .. . .. . .. . .\n. . ............................\n(1,7) (2,7) (3,7) (4,7) (5,7) (6,7) (7,7) (8,7) (9,7)\n(1,4)(1,6)\n(1,5)\n(1,3)\n(1,2)\n(1,1) (2,1)(9,6)\n(9,5)\n(9,4)\n(9,3)\n(9,2)\n(9,1) (8,1) (7,1) (6,1) (5,1) (4,1) (3,1)(2,2)(3,3)(5,5)(6,6) (8,6)\n(8,5)\n(8,4)\n(8,3)\n(8,2)(7,6)\n(7,5)\n(7,4)\n(7,3)\n(7,2)(6,5)\n(6,4)\n(6,3)\n(6,2)(5,6) (4,6) (3,6) (2,6)\n(2,5)\n(2,4)\n(2,3)(3,5)\n(3,4)\n(3,2)(4,5)\n(4,3)(4,4)\n(4,2)(5,4)\n(5,3)\n(5,2)\nFigure 4.1:\nCartesian product of posets\nA lexicographic ordering can be defined on the Cartesian\nproduct of nposets ( A1,\u2aaf1),(A2,\u2aaf2), . . . , (An,\u2aafn). De-\nfine the partial ordering \u2aafonA1\u00d7A2\u00d7 \u00b7\u00b7\u00b7 \u00d7 Anby\n(a1, a2, . . . , a n)\u227a(b1, b2, . . . , b n)\nifa1\u227a1b1, or if there is an integer i > 0 such that\na1=b1, . . . , a i=bi, and ai+1\u227ai+1bi+1. In other words,\nonen-tuple is less than a second n-tuple if the entry of\nthe first n-tuple in the first position where the two n-\ntuples disagree is less than the entry in that position in\nthe second n-tuple.\nExample 4.34 Note that (1,2,3,5)\u227a(1,2,4,3), since\nthe entries in the first two positions of these 4-tuples\nagree, but in the third position the entry in the first 4-\ntuple, 3, is less than that in the second 4-tuple, 4. (Here\nthe ordering on 4-tuples is the lexicographic ordering that\ncomes from the usual \u201cless than or equals\u201d relation on the\n\n\n\n\n4.4. PARTIAL ORDERINGS 57\nset of integers.)\nLexicographic ordering of strings\nConsider the strings ala2\u00b7\u00b7\u00b7amandb1b2\u00b7\u00b7\u00b7bnon a par-\ntially ordered set S. Suppose these strings are not equal\nin length. Let tbe the minimum of mandn. The defini-\ntion of lexicographic ordering is that the string a1a2\u00b7\u00b7\u00b7am\nis less than b1b2\u00b7\u00b7\u00b7bnif and only if\n(a1, a2, . . . , a t)\u227a(b1, b2, . . . , b t), or\n(a1, a2, . . . , a t) = (b1, b2, . . . b t) and m < n ,\nwhere \u227ain this inequality represents the lexicographic\nordering of St. In other words, to determine the ordering\nof two different strings, the longer string is truncated to\nthe length of the shorter string, namely, to t= min( m, n)\nterms. Then the t-tuples made up of the first tterms of\neach string are compared using the lexicographic ordering\nonSt. One string is less than another string if the t-tuple\ncorresponding to the first string is less than the t-tuple\nof the second string, or if these two t-tuples are the same,\nbut the second string is longer. The verification that this\nis a partial ordering is left as an exercise.\nDirected graph\nWe can draw a directed graph of a poset (called a Hasse\ndiagram orlattice diagram ) as follows. Each element of\nthe poset is represented by a dot, called a vertex . An\narrow, called a directed edge , is drawn from element ato\nelement bifa\u2aafb. The diagram in Figure 4.2(a) is a\ndigraph of the poset ( {1,2,3,4},\u2a7d).\nRedundant edges\nMany edges in the directed graph for a finite poset do\nnot have to be shown since they must be present. For\ninstance, consider the directed graph for the partial or-\ndering {(a, b)|a\u2a7db}on the set {l, 2, 3, 4 }, shown\nin Figure 4.2(a). Since this relation is a partial order-\ning, it is reflexive, and its directed graph has loops at all\nvertices.\nConsequently, we do not have to show these loops since\nthey must be present; in Figure 4.2(b) loops and arrows\nare not shown.\n\n\n\n\n58 TOPIC 4. RELATIONS AND FUNCTIONS\n4\n3\n2\n1\n(a)4\n3\n2\n1\n(b)4\n3\n2\n1\n(c)\nFigure 4.2:\nBecause a partial ordering is transitive, we do not have\nto show those edges that must be present because of\ntransitivity. For example, in Figure 4.2(c) the edges\n(1,3),(1,4), and (2 ,4) are not shown since they must\nbe present. If we assume that all edges are pointed \u201cup-\nward\u201d (as they are drawn in the figure), we do not have\nto show the directions of the edges; Figure 4.2(c) does\nnot show directions.\nHasse diagrams\nTo draw the diagram, execute the following procedure.\nStart with the directed graph for this relation. Draw it\nso that arrows are always pointing upwards. Because a\npartial ordering is reflexive, a loop is present at every\nvertex. Remove these loops. Remove all edges whose\npresence is imposed by transitivity. For instance, if ( a, b)\nand ( b, c) are in the partial ordering, remove the edge\n(a, c), since it must be present also. Furthermore, if ( c, d)\nis also in the partial ordering, remove the edge ( a, d),\nsince is must be present also. Finally, arrange each edge\nso that its initial vertex is below its terminal vertex (as\nit is drawn on paper). Remove all the arrows on the\ndirected edges, since the direction on the edges is now\nindicated by which vertices are \u201chigher\u201d on the page.\nNote that Hasse diagrams never have horizontal\nedges!\nThese steps are well-defined, and only a finite number of\nsteps need to be carried out for a finite poset. When all\nthe steps have been taken, the resulting diagram contains\nsufficient information to find the partial ordering. This\ndiagram is called a Hasse diagram , named after the 20th\ncentury German mathematician Helmut Hasse.\n\n\n\n\n4.4. PARTIAL ORDERINGS 59\nExample 4.35 Draw the Hasse diagram representing the\npartial ordering {(a, b) :a|b}on{1,2,3,4,6,8,12}.\nExample 4.36 Draw the Hasse diagram for the poset\n(P(S),\u2286), where Sis the set {a, b, c}.\nMaximal and minimal elements\nFor many applications it is useful to be able to identify\ncertain extremal elements of partially ordered students.\nFor example, a prize might be given to the student in a\ncourse with the highest grade.\nAn element of a poset is called maximal if it is not less\nthan any element of the poset. That is, aismaximal in\nthe poset ( S,\u2aaf) if there is no b\u2208Ssuch that a\u227ab.\nSimilarly, an element of a poset is called minimal if it is\nnot greater than any element of the poset. That is, ais\nminimal if there is no element b\u2208Ssuch that b\u227aa.\nMaximal and minimal elements are easy to spot using\na Hasse diagram. They are the elements with nothing\nabove them or with nothing below them.\nExample 4.37 Which elements of the poset\n({2,4,5,10,12,20,25},|)\nare maximal, and which are minimal?\nGreatest and least elements\nSometimes there is an element in a poset that is greater\nthan every other element. Such an element is called the\ngreatest element. That is, ais the greatest element of the\nposet ( S,\u2aaf) ifb\u2aafafor all b\u2208S. The greatest element\nis unique when it exists. Likewise, an element is called\nthe least element if it is less than all the other elements\nin the poset. That is, ais the least element of (S,\u2aaf) if\na\u2aafbfor all b\u2208S. The least element is unique when it\nexists.\nExample 4.38 Determine whether the posets represented\nby the Hasse diagrams in Figure 4.3 have a greatest ele-\nment and a least element. Determine whether the posets\nhave maximal and minimal elements. Is a maximal el-\nement always a greatest element? Is a greatest element\n\n\n\n\n60 TOPIC 4. RELATIONS AND FUNCTIONS\nalways a maximal element?\n(d) (c)(a) (b)\nab cd d\nc\na bab c d d e\nc\na b\nFigure 4.3:\n\n\n\n\n4.4. PARTIAL ORDERINGS 61\nExample 4.39 LetSbe a set. Determine whether there\nis a greatest element and a least element in the poset\n(P(S),\u2286).\nSolution. The least element is the empty set, since \u2205 \u2286Tfor\nany subset TofS. The set Sis the greatest element in this poset,\nsince T\u2286Swhenever Tis a subset of S.\nExample 4.40 Is there a greatest element and a least\nelement in the poset (P,|)?\nSolution. The integer 1 is the least element since 1|nwhenever\nnis a positive integer. Since there is no integer that is divisible\nby all positive integers, there is no greatest element.\n* Upper and lower bounds\nLet ( S,\u2aaf) be a poset and A\u2286Sa subset of it. Then\n(A,\u2aaf) is also a poset. Sometimes it is possible to find\nan element in Sthat is greater than all the elements in\nthe subset A. An element u\u2208Ssuch that a\u2aafufor all\nelements a\u2208Ais called an upper bound ofA. Likewise,\nan element l\u2208Ssuch that l\u2aafafor all elements a\u2208A\nis called a lower bound ofA.\nExample 4.41 Find the lower and upper bounds of the\nsubsets {a, b, c},{j, h}, and {a, c, d, f }in the poset with\nthe Hasse diagram shown below\nabdghj\nf\ne\nc\nFigure 4.1\n\n\n\n\n62 TOPIC 4. RELATIONS AND FUNCTIONS\n* Least upper bound and greatest lower bound\nAn element xis called the least upper bound of the subset\nAifxis an upper bound that is less than every other\nupper bound of A. Since there is only one such element,\nif it exists, it makes sense to call this element theleast\nupper bound. That is, xis the least upper bound of A\nifa\u2aafxwhenever a\u2208A, and x\u2aafzwhenever zis an\nupper bound of A. Similarly, the element yis called the\ngreatest lower bound ofAifyis a lower bound of Aand\nz\u2aafywhenever zis a lower bound of A. The greatest\nlower bound of Ais unique if it exists. The greatest lower\nbound and least upper bound of a subset Aare denoted\nby glb( A) and lub( A), respectively.\nExample 4.42 Find the greatest lower bound and the\nleast upper bound of {b, d, g}, if they exist, in the poset\nshown in Figure 4.4.\nExample 4.43 Find the greatest lower bound and the\nleast upper bound of the sets {3,9,12}and{1,2,4,5,10}\nif they exist, in the poset (P,|).\nSolution. An integer is a lower bound of {3,9,12}if 3, 9, and\n12 are divisible by this integer. The only such integers are 1 and\n3. Since 1|3, 3 is the greatest lower bound of {3,9,12}. The\nonly lower bound for the set {1,2,4,5,10}with respect to |is the\nelement 1. Hence, 1 is the greatest lower bound for {1,2,4,5,10}.\n4.5 Functions\nLetAandBbe sets. Informally, a function ffrom Ato\nBis a rule that assigns, to each element xofAa unique\nelement f(x) ofB, called the image ofxunder f.\nFormally, a function is a special type of relation. A func-\ntionfrom AtoBis a binary relation ffrom AtoBsuch\nthat for every x\u2208Athere is exactly one y\u2208Bsuch that\n(x, y)\u2208f. We never use infix notation for functions: in-\nstead, we use the notation we are already familiar with,\nby abbreviating ( x, y)\u2208fasy=f(x).\nWe indicate that fis a function from AtoBby writing\nf:A\u2192B. We call Athedomain off, denoted by\nDom( f), and Bthecodomain off. Note that not every\nelement of Bhas to be the image of some element of A:\nthe set of all such elements of Bis called the range or\nimage off, in other words\nIm(f) ={y: for some x\u2208Dom( f),y=f(x)}.\n\n\n\n\n",
      },
      {
        name: "Functions",
        content:
          "62 TOPIC 4. RELATIONS AND FUNCTIONS\n* Least upper bound and greatest lower bound\nAn element xis called the least upper bound of the subset\nAifxis an upper bound that is less than every other\nupper bound of A. Since there is only one such element,\nif it exists, it makes sense to call this element theleast\nupper bound. That is, xis the least upper bound of A\nifa\u2aafxwhenever a\u2208A, and x\u2aafzwhenever zis an\nupper bound of A. Similarly, the element yis called the\ngreatest lower bound ofAifyis a lower bound of Aand\nz\u2aafywhenever zis a lower bound of A. The greatest\nlower bound of Ais unique if it exists. The greatest lower\nbound and least upper bound of a subset Aare denoted\nby glb( A) and lub( A), respectively.\nExample 4.42 Find the greatest lower bound and the\nleast upper bound of {b, d, g}, if they exist, in the poset\nshown in Figure 4.4.\nExample 4.43 Find the greatest lower bound and the\nleast upper bound of the sets {3,9,12}and{1,2,4,5,10}\nif they exist, in the poset (P,|).\nSolution. An integer is a lower bound of {3,9,12}if 3, 9, and\n12 are divisible by this integer. The only such integers are 1 and\n3. Since 1|3, 3 is the greatest lower bound of {3,9,12}. The\nonly lower bound for the set {1,2,4,5,10}with respect to |is the\nelement 1. Hence, 1 is the greatest lower bound for {1,2,4,5,10}.\n4.5 Functions\nLetAandBbe sets. Informally, a function ffrom Ato\nBis a rule that assigns, to each element xofAa unique\nelement f(x) ofB, called the image ofxunder f.\nFormally, a function is a special type of relation. A func-\ntionfrom AtoBis a binary relation ffrom AtoBsuch\nthat for every x\u2208Athere is exactly one y\u2208Bsuch that\n(x, y)\u2208f. We never use infix notation for functions: in-\nstead, we use the notation we are already familiar with,\nby abbreviating ( x, y)\u2208fasy=f(x).\nWe indicate that fis a function from AtoBby writing\nf:A\u2192B. We call Athedomain off, denoted by\nDom( f), and Bthecodomain off. Note that not every\nelement of Bhas to be the image of some element of A:\nthe set of all such elements of Bis called the range or\nimage off, in other words\nIm(f) ={y: for some x\u2208Dom( f),y=f(x)}.\n\n\n\n\n4.6. EQUALITY OF FUNCTIONS 63\nA B fB A\nxf\nf(x)\nFigure 4.2\nExample 4.44 LetXbe the set of all real numbers be-\ntween 0and100inclusive, and let Ybe the set of all\nreal numbers between 32and212inclusive. The function\nF:X\u2192Ythat assigns to each Celsius temperature cits\ncorresponding Fahrenheit temperature F(c)is defined by\nF(c) =9\n5c+ 32\nWhat are the domain, codomain and image of F?\n4.6 Equality of functions\nWe say the functions f:A\u2192Bandg:C\u2192Dareequal\nif\n\u0088A=C(the functions have the same domain);\n\u0088B=D(the functions have the same codomain);\n\u0088f(a) =g(a) for all a\u2208A(the functions \u2018agree\u2019 on\nA).\nIn other words, all three things making up the function\nmust be the same.\nThe range of a function\nWe define the range orimage off:A\u2192Bas the set\nIm(f) ={f(a) :a\u2208A}.\n\n\n\n\n",
      },
      {
        name: "Equality of functions",
        content:
          "4.6. EQUALITY OF FUNCTIONS 63\nA B fB A\nxf\nf(x)\nFigure 4.2\nExample 4.44 LetXbe the set of all real numbers be-\ntween 0and100inclusive, and let Ybe the set of all\nreal numbers between 32and212inclusive. The function\nF:X\u2192Ythat assigns to each Celsius temperature cits\ncorresponding Fahrenheit temperature F(c)is defined by\nF(c) =9\n5c+ 32\nWhat are the domain, codomain and image of F?\n4.6 Equality of functions\nWe say the functions f:A\u2192Bandg:C\u2192Dareequal\nif\n\u0088A=C(the functions have the same domain);\n\u0088B=D(the functions have the same codomain);\n\u0088f(a) =g(a) for all a\u2208A(the functions \u2018agree\u2019 on\nA).\nIn other words, all three things making up the function\nmust be the same.\nThe range of a function\nWe define the range orimage off:A\u2192Bas the set\nIm(f) ={f(a) :a\u2208A}.\n\n\n\n\n64 TOPIC 4. RELATIONS AND FUNCTIONS\nThis is the set of all values of ftaken (in B) byf.\nExample 4.45\n\u0088The negation function f:Z\u2192Z(taking nto\u2212n)\nhas range Zitself.\n\u0088The successor function S:N\u2192N(which takes n\nton+1) has range N\\{0}={1,2,3,4,5,6,7, . . .}.\n\u0088The squaring function f:Z\u2192Z(which takes nto\nn2) has range {0,1,4,9,16,25,36,49,64,81, . . .}.\n\u0088The range of the sign function \u03c3:Z\u2192Zis{\u22121,0,1}.\n4.7 Function composition\nLetf:A\u2192Bandg:B\u2192Cbe functions. We define\nthe composition g\u25e6f:A\u2192Cby declaring that, for\nevery x\u2208A,\n(g\u25e6f)(x) =g(f(x)).\nxA B\nf(x)C\ng(f(x))\ng\u25e6fgf\nFigure 4.3\nComposition is associative\nIff:A\u2192B,g:B\u2192Candh:C\u2192Dare functions\nthen\nh\u25e6(g\u25e6f) = (h\u25e6g)\u25e6f.\nProof: Notice that h\u25e6(g\u25e6f) and ( h\u25e6g)\u25e6fboth have\ndomain Aand codomain D. For every x\u2208Awe have\n(h\u25e6(g\u25e6f))(x) =h(g\u25e6f(x))\n=h(g(f(x)))\n=h\u25e6g(f(x))\n= ((h\u25e6g)\u25e6f)(x)\nSoh\u25e6(g\u25e6f) and ( h\u25e6g)\u25e6fhave the same domain, and\ntake the same values for every element of the domain,\nthat is they are equal.\n\n\n\n\n",
      },
      {
        name: "Function composition",
        content:
          "64 TOPIC 4. RELATIONS AND FUNCTIONS\nThis is the set of all values of ftaken (in B) byf.\nExample 4.45\n\u0088The negation function f:Z\u2192Z(taking nto\u2212n)\nhas range Zitself.\n\u0088The successor function S:N\u2192N(which takes n\nton+1) has range N\\{0}={1,2,3,4,5,6,7, . . .}.\n\u0088The squaring function f:Z\u2192Z(which takes nto\nn2) has range {0,1,4,9,16,25,36,49,64,81, . . .}.\n\u0088The range of the sign function \u03c3:Z\u2192Zis{\u22121,0,1}.\n4.7 Function composition\nLetf:A\u2192Bandg:B\u2192Cbe functions. We define\nthe composition g\u25e6f:A\u2192Cby declaring that, for\nevery x\u2208A,\n(g\u25e6f)(x) =g(f(x)).\nxA B\nf(x)C\ng(f(x))\ng\u25e6fgf\nFigure 4.3\nComposition is associative\nIff:A\u2192B,g:B\u2192Candh:C\u2192Dare functions\nthen\nh\u25e6(g\u25e6f) = (h\u25e6g)\u25e6f.\nProof: Notice that h\u25e6(g\u25e6f) and ( h\u25e6g)\u25e6fboth have\ndomain Aand codomain D. For every x\u2208Awe have\n(h\u25e6(g\u25e6f))(x) =h(g\u25e6f(x))\n=h(g(f(x)))\n=h\u25e6g(f(x))\n= ((h\u25e6g)\u25e6f)(x)\nSoh\u25e6(g\u25e6f) and ( h\u25e6g)\u25e6fhave the same domain, and\ntake the same values for every element of the domain,\nthat is they are equal.\n\n\n\n\n4.8. PARTIAL FUNCTIONS 65\n4.8 Partial functions\nApartial function f:A\u2192Bis a weaker form of a\nfunction, still having an input set Aand an output set\nor codomain B, but with a rule fthat assigns to each\nelement aof a subset ofAa unique element f(a) ofB.\nIn other words, a partial function is defined for just some\nof the elements of its input set.\nFor example, take A=B=Rand define f(x) = 1 /x\nwhen xis non-zero.\nThe domain of a partial function f:A\u2192Bis the set\nof all a\u2208Afor which f(a) is defined. Hence if Dis the\ndomain of f, then the restriction hofftoDis a function\nh:D\u2192B.\nThe range of a partial function f:A\u2192Bis still the set\nof values it takes, i.e. {f(a) :a\u2208D}, where Dis the\ndomain.\nA partial function f:A\u2192Bis called a total function\n(or just a function) if its domain is A.\nEquality of partial functions\nThe partial functions f:A\u2192Bandg:X\u2192Yare equal\nif\n\u0088A=X(the functions have the same input set).\n\u0088B=Y(the functions have the same output set).\n\u0088The functions have the same domain, say D, and\n\u0088f(a) =g(a) for all a\u2208D(i.e. the functions \u2018agree\u2019\nonD).\n4.9 Types of functions\n1\u20131 and onto\nWe say that f:A\u2192Bis1\u20131orinjective if, for every\nx, y\u2208Awith x\u0338=ywe have f(x)\u0338=f(y) (or, equiva-\nlently, if f(x) =f(y) implies that x=y).\nWe say that fisonto orsurjective if, for every y\u2208B\nthere is some x\u2208Awith f(x) =y(or, equivalently, if\nIm(f) =B).\nWe say that fis a1\u20131 correspondence orbijection if it\nis both 1\u20131 and onto.\n\n\n\n\n",
      },
      {
        name: "Partial functions",
        content:
          "4.8. PARTIAL FUNCTIONS 65\n4.8 Partial functions\nApartial function f:A\u2192Bis a weaker form of a\nfunction, still having an input set Aand an output set\nor codomain B, but with a rule fthat assigns to each\nelement aof a subset ofAa unique element f(a) ofB.\nIn other words, a partial function is defined for just some\nof the elements of its input set.\nFor example, take A=B=Rand define f(x) = 1 /x\nwhen xis non-zero.\nThe domain of a partial function f:A\u2192Bis the set\nof all a\u2208Afor which f(a) is defined. Hence if Dis the\ndomain of f, then the restriction hofftoDis a function\nh:D\u2192B.\nThe range of a partial function f:A\u2192Bis still the set\nof values it takes, i.e. {f(a) :a\u2208D}, where Dis the\ndomain.\nA partial function f:A\u2192Bis called a total function\n(or just a function) if its domain is A.\nEquality of partial functions\nThe partial functions f:A\u2192Bandg:X\u2192Yare equal\nif\n\u0088A=X(the functions have the same input set).\n\u0088B=Y(the functions have the same output set).\n\u0088The functions have the same domain, say D, and\n\u0088f(a) =g(a) for all a\u2208D(i.e. the functions \u2018agree\u2019\nonD).\n4.9 Types of functions\n1\u20131 and onto\nWe say that f:A\u2192Bis1\u20131orinjective if, for every\nx, y\u2208Awith x\u0338=ywe have f(x)\u0338=f(y) (or, equiva-\nlently, if f(x) =f(y) implies that x=y).\nWe say that fisonto orsurjective if, for every y\u2208B\nthere is some x\u2208Awith f(x) =y(or, equivalently, if\nIm(f) =B).\nWe say that fis a1\u20131 correspondence orbijection if it\nis both 1\u20131 and onto.\n\n\n\n\n",
      },
      {
        name: "Types of functions",
        content:
          "4.8. PARTIAL FUNCTIONS 65\n4.8 Partial functions\nApartial function f:A\u2192Bis a weaker form of a\nfunction, still having an input set Aand an output set\nor codomain B, but with a rule fthat assigns to each\nelement aof a subset ofAa unique element f(a) ofB.\nIn other words, a partial function is defined for just some\nof the elements of its input set.\nFor example, take A=B=Rand define f(x) = 1 /x\nwhen xis non-zero.\nThe domain of a partial function f:A\u2192Bis the set\nof all a\u2208Afor which f(a) is defined. Hence if Dis the\ndomain of f, then the restriction hofftoDis a function\nh:D\u2192B.\nThe range of a partial function f:A\u2192Bis still the set\nof values it takes, i.e. {f(a) :a\u2208D}, where Dis the\ndomain.\nA partial function f:A\u2192Bis called a total function\n(or just a function) if its domain is A.\nEquality of partial functions\nThe partial functions f:A\u2192Bandg:X\u2192Yare equal\nif\n\u0088A=X(the functions have the same input set).\n\u0088B=Y(the functions have the same output set).\n\u0088The functions have the same domain, say D, and\n\u0088f(a) =g(a) for all a\u2208D(i.e. the functions \u2018agree\u2019\nonD).\n4.9 Types of functions\n1\u20131 and onto\nWe say that f:A\u2192Bis1\u20131orinjective if, for every\nx, y\u2208Awith x\u0338=ywe have f(x)\u0338=f(y) (or, equiva-\nlently, if f(x) =f(y) implies that x=y).\nWe say that fisonto orsurjective if, for every y\u2208B\nthere is some x\u2208Awith f(x) =y(or, equivalently, if\nIm(f) =B).\nWe say that fis a1\u20131 correspondence orbijection if it\nis both 1\u20131 and onto.\n\n\n\n\n66 TOPIC 4. RELATIONS AND FUNCTIONS\nOne-to-one functionOnto function\nNot a function One-to-one\ncorrespondence\nFigure 4.4\nIdentity function, inverse function\nFor any set A, we define the identity function 1 A:A\u2192A\nby declaring that, for every x\u2208A,\n1A(x) =x.\nNotice that 1 Ais a bijection. If f:A\u2192Bis a function\nthen f\u25e61A=f= 1B\u25e6f.\nWarning: Be careful not to confuse the identity function\n1Awith the constant function f(x) = 1 for all x\u2208A.\nLetf:A\u2192Bbe a function. An inverse offis a\nfunction g:B\u2192Asuch that g\u25e6f= 1Aandf\u25e6g= 1B.\nInverses are unique\nIffhas an inverse g, then it is unique. To prove this,\nnote that if his also an inverse of fthen\nh=h\u25e61B\n=h\u25e6(f\u25e6g)\n= (h\u25e6f)\u25e6g\n= 1A\u25e6g\n=g\nIffhas an inverse, it is denoted by f\u22121.\n\n\n\n\n4.9. TYPES OF FUNCTIONS 67\nInvertible functions are bijections\nTheorem 4.1 Iff:A\u2192Bis a function, then fhas\nan inverse if and only if fis a bijection.\nProof: Suppose first that fis a bijection. If y\u2208B\nthen there is some x\u2208Awith f(x) =y. Since fis 1\u20131,\nthisxis unique. So we can define g:B\u2192Aby\ng(y) = the unique x\u2208Asuch that f(x) =y.\nFor any x\u2208Awe have g(f(x)) =x, and for every y\u2208B\nwe have f(g(y)) =y. Sog=f\u22121.\nConversely, suppose that fhas an inverse. We must show\nfis 1\u20131 and onto.\nfis 1\u20131 Suppose x, y\u2208Awith f(x) = f(y). Then\nf\u22121(f(x)) =f\u22121(f(y)), that is x=y.\nfis onto Lety\u2208B. Put x=f\u22121(y). Then y=f(x).\nSofis a bijection, as required.\nExample 4.46 Letfbe the function from {a, b, c}to\n{1,2,3}such that f(a) = 2 ,f(b) = 3 ,f(c) = 1 . Is f\ninvertible? If it is, what is its inverse?\nExample 4.47 Letfbe the function from ZtoZwith\nf(x) =x2. Isfinvertible?\nWhat about if we restrict it to a function from NtoN?\nExample 4.48 Letfbe the function from ZtoZwith\nf(x) = 2 x. Isfinvertible?\nSolution. No. fis not onto as Im( f) ={x:x= 2p, p\u2208Z},\nand Im( f)\u2282Z. So fis not invertible.\nPreimages\nIf a function is not invertible all is not lost. We call the\nset of elements in the domain of a function f:S\u2192T\nthat are mapped to y\u2208Tbyfthepreimage ofyunder\nf. This is denoted by f\u2190(y).\n\n\n\n\n68 TOPIC 4. RELATIONS AND FUNCTIONS\nf\u2190(y) ={x:f(x) =y}\nWe can also consider the preimage of a set.\nf\u2190(B) ={x:f(x)\u2208B, B\u2286T}\nExample 4.49 Letfbe the function from ZtoZwith\nf(x) =x2. What is the preimage of 4? What is the\npreimage of {4,9}?\n\n\n\n\nGraphs\nThe subject of graph theory was initiated by Leonhard\nEuler. He used it to solve the famous K\u00a8 onigsberg bridge\nproblem, which we will discuss later in this chapter.\nGraph theory has turned out to be an important tool for\nsolving problems in many fields. For example, one can\nmodel the internet by representing webpages as dots and\nhyperlinks as arrows from one dot to another. Google\u2019s\nPageRank algorithm was developed by Larry Page and\nSergey Brin using ideas from graph theory. Social net-\nworks and power infrastructures can also be represented\nas graphs. By analysing the graph one can determine\nwhich nodes have the most influence, or one can evaluate\nthe vulnerability of a network against failure or attack.\nFacebook and other social network companies use infor-\nmation obtained from the graph as a marketing tool and\nfor offering improved services. Problems such as find-\ning the shortest tour through a number of cities can be\nexpressed and solved using graph theory, and are a key\ncomponent of GPS-based navigation systems. There are\nmany more applications.\n5.1 Introduction to graphs\nGraphs are discrete structures formed of dots (called ver-\ntices ) and lines (called edges orarcs) that run between\nthe vertices.\nExamples of graphs\nExample 5.1 A simple example of a graph is the follow-\ning representation of roads between some towns in New\nZealand. In such a picture we are not concerned with the\nroads within the towns, so it suffices to represent each\ntown as a single dot, or vertex. Similarly, we are not\nconcerned with the length of the road, or the exact route\nit takes across the land. So it suffices to represent the\nroad with a single line.\nNote that all the roads are two-way roads (can drive from\nAuckland to Hamilton or from Hamilton to Auckland\nalong the same road).\n69\n\n\n\n\n",
      },
    ],
  },
  {
    name: "Graphs",
    definition: {
      simple:
        "\n\nGraphs are visual representations of data that allow us to easily observe patterns and relationships. They use points, lines, bars or other symbols to show how values change over time or how they compare to one another. Graphs are widely used in various fields, including mathematics, economics, engineering, and social sciences, to analyse data and communicate results. They help us to understand complex information at a glance and make informed decisions based on the patterns they reveal.",
    },
    childs: [
      {
        name: "Introduction to graphs",
        content:
          "Graphs\nThe subject of graph theory was initiated by Leonhard\nEuler. He used it to solve the famous K\u00a8 onigsberg bridge\nproblem, which we will discuss later in this chapter.\nGraph theory has turned out to be an important tool for\nsolving problems in many fields. For example, one can\nmodel the internet by representing webpages as dots and\nhyperlinks as arrows from one dot to another. Google\u2019s\nPageRank algorithm was developed by Larry Page and\nSergey Brin using ideas from graph theory. Social net-\nworks and power infrastructures can also be represented\nas graphs. By analysing the graph one can determine\nwhich nodes have the most influence, or one can evaluate\nthe vulnerability of a network against failure or attack.\nFacebook and other social network companies use infor-\nmation obtained from the graph as a marketing tool and\nfor offering improved services. Problems such as find-\ning the shortest tour through a number of cities can be\nexpressed and solved using graph theory, and are a key\ncomponent of GPS-based navigation systems. There are\nmany more applications.\n5.1 Introduction to graphs\nGraphs are discrete structures formed of dots (called ver-\ntices ) and lines (called edges orarcs) that run between\nthe vertices.\nExamples of graphs\nExample 5.1 A simple example of a graph is the follow-\ning representation of roads between some towns in New\nZealand. In such a picture we are not concerned with the\nroads within the towns, so it suffices to represent each\ntown as a single dot, or vertex. Similarly, we are not\nconcerned with the length of the road, or the exact route\nit takes across the land. So it suffices to represent the\nroad with a single line.\nNote that all the roads are two-way roads (can drive from\nAuckland to Hamilton or from Hamilton to Auckland\nalong the same road).\n69\n\n\n\n\n70 TOPIC 5. GRAPHS\n/0/0/1/1\n/0/0/1/1\n/0/0/1/1/0/0/1/1\n/0/0/1/1 /0/0/1/1\n/0/0/1/1/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/1/1/1/1/1/1/1/1/1/1/1Auckland\nTauranga\nMarton\nNapier\nWellingtonPalmerston NorthHamilton\nExample 5.2 Now suppose the above graph is not a\ngraph of roads, but of fibre optic cables between some\ncomputer data centres in these towns. Each data cen-\ntre is represented by a vertex, and each optical cable by\nan edge.\nNote that there is at most one cable between two comput-\ners in this network and that each cable operates in both\ndirections. In other words, this network can be modeled\nusing a simple graph.\nDefinition 5.1 Asimple graph G= (V, E)consists of\nV, a nonempty set of vertices , and E, a set of unordered\npairs of distinct elements of Vcalled edges .\nMultigraphs\nSometimes there are multiple optical cables between com-\nputers in a network. This is the case when there is heavy\ntraffic between computers. A network with multiple lines\nis displayed below. Simple graphs may not be sufficient\nto model such networks. Instead, multigraphs are used,\nwhich consist of vertices and undirected edges between\nthese vertices, with multiple edges between pairs of ver-\ntices allowed.\nEvery simple graph is also a multigraph. However, not\nall multigraphs are simple graphs, since in a multigraph\ntwo or more edges may connect the same pair of vertices.\n\n\n\n\n5.1. INTRODUCTION TO GRAPHS 71\nExample 5.3 The following is a multigraph. Note that\nwe label the edges, so that canddare both edges from\nAuckland to Marton, representing different cables from\nAuckland to Marton data centres.\n/0/0/1/1\n/0/0/1/1\n/0/0/1/1/0/0/1/1\n/0/0/1/1 /0/0/1/1\n/0/0/1/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/1/1/1/1/1/1/1/1/1/1/1Auckland\nTauranga\nMarton\nNapier\nWellingtona b\ngfe\nPalmerston NorthHamiltonc d\nWe cannot use a pair of vertices to specify an edge of a\ngraph when multiple edges are present. This makes the\nformal definition of multigraphs somewhat complicated.\nDefinition 5.2 AMultigraph G= (V, E)consists of a\nsetVof vertices, a set Eof edges, and a function ffrom\nEto{{u, v}|u, v\u2208V, u\u0338=v}. The edges e1ande2are\ncalled multiple orparallel edges iff(e1) =f(e2).\nLoops and pseudographs\nExample 5.4 A graph may contain edges between a ver-\ntex and itself. These are called loops . The definitions\nabove for graphs and multigraphs do not allow loops, so\nwe define pseudographs below. The following image has\nsome loops added to the previous graph.\n\n\n\n\n72 TOPIC 5. GRAPHS\n/0/0/0/1/1/1\n/0/0/0/1/1/1\n/0/0/0/1/1/1/0/0/0/1/1/1\n/0/0/0/1/1/1 /0/0/0/1/1/1\n/0/0/0/1/1/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/1/1/1/1/1/1/1/1/1/1/1Auckland\nTauranga\nMarton\nNapier\nWellingtona b\nc\ngfeHamiltondx\ny\nPalmerston North\nDefinition 5.3 Apseudograph G= (V, E)consists of a\nsetVof vertices, a set Eof edges, and a function ffrom\nEto{{u, v}|u, v\u2208V}. An edge is a loop iff(e) ={u, u}\nfor some u\u2208V.\nWe often say \u201c {u, v}is an edge of G\u201d for a graph G=\n(V, E) if there is at least one edge ewith f(e) ={u, v}.\nTo summarize, pseudographs are the most general type of\nundirected graphs since they may contain loops and mul-\ntiple edges. Multigraphs are undirected graphs that may\ncontain multiple edges but may not have loops. Finally,\nsimple graphs are undirected graphs with no multiple\nedges or loops.\nDirected graphs\nExample 5.5 The optical cables in a computer network\nmay not operate in both directions. For instance, in the\nfollowing graph, the host computer in Auckland can only\n\n\n\n\n5.1. INTRODUCTION TO GRAPHS 73\nsend data to Marton.\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1/0/0/0\n/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1/0/0/0/0/0/0\n/1/1/1/1/1/1/0/0/0/0/1/1/1/1/0/0/0/0/1/1/1/1 /0/0/0\n/1/1/1/0/0/0/0/1/1/1/1\n/0/0/0/0/1/1/1/1\n/0/0/0/0/1/1/1/1/0/0/0\n/1/1/1\n/0/0/0/0/1/1/1/1\n/0/0/0/0/1/1/1/1/0/0/0/0/0/0\n/1/1/1/1/1/1Auckland\nTauranga\nMarton\nNapier\nWellingtonHamilton\nPalmerston North\nWe use directed graphs to model such networks. The\nedges of a directed graph are ordered pairs rather than\nsets. Loops, ordered pairs of the same element, and mul-\ntiple edges in the same direction between two vertices are\nnot allowed.\nDefinition 5.4 Adirected graph ( V, E)consists of a set\nof vertices Vand a set of edges Ethat are ordered pairs\nof elements of V.\nDirected multigraphs\nExample 5.6 There may be several one-way fibre cables\nbetween two data centres. Such a network is shown next.\n\n\n\n\n74 TOPIC 5. GRAPHS\nDirected graphs are not sufficient for modeling such a\nnetwork, since multiple edges are not allowed in these\ngraphs. Instead we use directed multigraphs . Loops are\nnot allowed in directed multigraphs.\nDefinition 5.5 A directed multigraph G= (V, E)con-\nsists of a set Vofvertices , a set Eofedges , and a\nfunction ffrom Eto{(u, v)|u, v\u2208Vandu\u0338=v}. The\nedges e1ande2are multiple edges if f(e1) =f(e2).\nAs before, we will say that ( u, v) is an edge of G= (V, E)\nas long as there is at least one edge ewith f(e) = (u, v).\nWe will often interchangeably use the edge eand the\nordered pair ( u, v) associated to it, unless the identity of\nindividual multiple edges is important.\nDirected pseudograph\nExample 5.7 There may be a fibre cable inside of a data\ncentre. Such a network is shown next.\n\n\n\n\n5.1. INTRODUCTION TO GRAPHS 75\n/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0\n/1/1/1/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/0\n/1/1/1/0/0/1/1/0/0/1/1/0/0/1/1/0/0/0/0/0/0\n/1/1/1/1/1/1\n/0/0/1/1\n/0/0/1/1/0/0/1/1\n/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n/0/0/0/0/1/1/1/1/0/0/0\n/1/1/1 /0/0/0/0/1/1/1/1\n/0/0/0\n/1/1/1/0/0/1/1 Tauranga\nMarton\nNapier\nWellingtonAuckland\nPalmerston NorthHamilton\nDirected multigraphs are not sufficient for modeling such\na network, since loops are not allowed in these graphs.\nInstead we use directed pseudograph .\nDefinition 5.6 A directed pseudograph G= (V, E)con-\nsists of a set Vofvertices , a set Eofedges , and a\nfunction ffrom Eto{(u, v)|u, v\u2208V}. The edges e1\nande2are multiple edges if f(e1) =f(e2).\nAs before, we will say that ( u, v) is an edge of G= (V, E)\nas long as there is at least one edge ewith f(e) = (u, v).\nWe will often interchangeably use the edge eand the\nordered pair ( u, v) associated to it, unless the identity of\nindividual multiple edges is important.\nExample 5.8 We give one more example of a directed\npseudograph. Let G= (V, E)where V={0,1,2,3,4,5,6,7,8,9}\nand the set Eof edges is\nE={(0,1),(0,2),(0,3),(2,2),(2,4),(3,4),(3,5),(4,0),\n(5,6),(5,8),(6,8),(7,9),(8,6),(8,7),(9,8)}.\nThen the graph is pictured below.\n\n\n\n\n\n76 TOPIC 5. GRAPHS\nSummary of terminology\nThe definitions of the various types of graphs are sum-\nmarized in Table 5.1.\nGraph theory has been applied and developed in a wide\nrange of subjects and applications. Hence, the termi-\nnology is not completely standard. When reading other\nbooks and webpages you should be careful that the no-\ntions \u201cgraph\u201d and \u201cmultigraph\u201d may have slightly differ-\nent meanings.\nTable 5.1: Graph Terminology\nType Edges Multiple Edges Allowed? Loops Allowed?\nSimple graph Undirected No No\nMultigraph Undirected Yes No\nPseudograph Undirected Yes Yes\nDirected graph Directed No No\nDirected multigraph Directed Yes No\nDirected pseudograph Directed Yes Yes\n5.2 Basic terminology\nWe introduce some basic vocabulary used in graph the-\nory.\nTerminology on vertices and edges\nDefinition 5.7 Two vertices uandvin an undirected\ngraph Gare called adjacent (orneighbors ) inGif{u, v}\nis an edge of G. Ife={u, v}, the edge eis called incident\nwith the vertices uandv. The edge eis also said to con-\nnectuandv. The vertices uandvare called endpoints\nof the edge {u, v}.\nDegree\nTo keep track of how many edges are incident to a vertex,\nwe make the following definition.\nDefinition 5.8 Thedegree of a vertex in an undirected\ngraph is the number of edges incident with it, except that\na loop at a vertex contributes twice to the degree of that\nvertex. The degree of the vertex vis denoted by deg(v).\nExample 5.9 What are the degrees of the vertices in the\ngraphs GandH?\n\n\n\n\n",
      },
      {
        name: "Basic terminology",
        content:
          "76 TOPIC 5. GRAPHS\nSummary of terminology\nThe definitions of the various types of graphs are sum-\nmarized in Table 5.1.\nGraph theory has been applied and developed in a wide\nrange of subjects and applications. Hence, the termi-\nnology is not completely standard. When reading other\nbooks and webpages you should be careful that the no-\ntions \u201cgraph\u201d and \u201cmultigraph\u201d may have slightly differ-\nent meanings.\nTable 5.1: Graph Terminology\nType Edges Multiple Edges Allowed? Loops Allowed?\nSimple graph Undirected No No\nMultigraph Undirected Yes No\nPseudograph Undirected Yes Yes\nDirected graph Directed No No\nDirected multigraph Directed Yes No\nDirected pseudograph Directed Yes Yes\n5.2 Basic terminology\nWe introduce some basic vocabulary used in graph the-\nory.\nTerminology on vertices and edges\nDefinition 5.7 Two vertices uandvin an undirected\ngraph Gare called adjacent (orneighbors ) inGif{u, v}\nis an edge of G. Ife={u, v}, the edge eis called incident\nwith the vertices uandv. The edge eis also said to con-\nnectuandv. The vertices uandvare called endpoints\nof the edge {u, v}.\nDegree\nTo keep track of how many edges are incident to a vertex,\nwe make the following definition.\nDefinition 5.8 Thedegree of a vertex in an undirected\ngraph is the number of edges incident with it, except that\na loop at a vertex contributes twice to the degree of that\nvertex. The degree of the vertex vis denoted by deg(v).\nExample 5.9 What are the degrees of the vertices in the\ngraphs GandH?\n\n\n\n\n5.2. BASIC TERMINOLOGY 77\nf e gd c b\naG\na b c\ndefH\nThe handshaking theorem\nEvery edge is incident with exactly two (possibly equal)\nvertices. Hence, the sum of the degrees of the vertices\nis twice the number of edges. This result is sometimes\ncalled the Handshaking Theorem, because of the analogy\nbetween an edge having two endpoints and a handshake\ninvolving two hands.\nTheorem 5.1 [The Handshaking Theorem] Let G= (V, E)\nbe an undirected graph with |E|edges. Then\n2|E|=X\nv\u2208Vdeg(v)\n(Note this applies even if multiple edges and loops are\npresent.)\nProof: See lecture.\nExample 5.10 How many edges are there in a graph\nwith 10 vertices each of degree 6?\nTheorem 5.1 shows that the sum of the degrees of the\nvertices of an undirected graph is even. This simple fact\nhas many consequences, one of which is given as Theo-\nrem 5.2.\nTheorem 5.2 An undirected graph has an even number\nof vertices of odd degree.\nProof: See lecture.\nDefinition 5.9 Thedegree sequence of a graph Gis the\nsequence (n0, n1, n2, . . . , n k), where niis the number of\nvertices of degree i,nk\u0338= 0, and Gdoes not have any\nvertices of degree greater than k.\nExample 5.11 What are the degree sequences of the\ngraphs GandH?\n\n\n\n\n78 TOPIC 5. GRAPHS\nf e gd c b\naG\na b c\ndefH\nTerminology for directed graphs\nWe now give some useful terminology for graphs with\ndirected edges.\nDefinition 5.10 When (u, v)is an edge of the graph G\nwith directed edges, uis said to be adjacent tovandv\nis said to be adjacent from u. The vertex uis called the\ninitial vertex of(u, v), and vis called the terminal orend\nvertex of(u, v). The initial vertex and terminal vertex of\na loop are the same. We say an edge (u, v)isoutgoing\nfrom uandingoing tov.\nIn-degree and out-degree\nDefinition 5.11 In a graph with directed edges the in-\ndegree of a vertex v, denoted by deg\u2212(v), is the number\nof edges with vas their terminal vertex. The out-degree\nofv, denoted by deg+(v), is the number of edges with\nvas their initial vertex. (Note that a loop at a vertex\ncontributes 1 to both the in-degree and the out-degree of\nthis vertex.)\nExample 5.12 Find the in-degree and out-degree of each\nvertex in the graph G with directed edges shown below.\n\n\n\n\n5.2. BASIC TERMINOLOGY 79\nb a\nf e dc\nSince each edge has an initial vertex and a terminal ver-\ntex, the sum of the in-degrees and the sum of the out-\ndegrees of all vertices in a graph with directed edges are\nthe same. Both of these sums are the number of edges in\nthe graph. This result is stated as the following theorem.\nTheorem 5.3 LetG= (V, E)be a graph with directed\nedges. Then\nX\nv\u2208Vdeg\u2212(v) =X\nv\u2208Vdeg+(v) =|E|.\nUnderlying graph\nThere are many properties of a graph with directed edges\nthat do not depend on the direction of its edges. Conse-\nquently, it is often useful to ignore these directions. The\nundirected graph that results from ignoring directions of\nedges is called the underlying undirected graph . A graph\nwith directed edges and its underlying undirected graph\nhave the same number of edges.\nWe will now introduce several classes of simple graphs.\nThese graphs are often used as examples and arise in\nmany applications.\nComplete graphs\nThe complete graph onnvertices, denoted by Kn, is\nthe simple graph that contains exactly one edge between\neach pair of distinct vertices. The graphs Kn, for n=\n1,2,3,4,5,6 are displayed below.\n\n\n\n\n80 TOPIC 5. GRAPHS\nK5K6K1\nK2 K3 K4\nCycle graphs\nThecycle graph Cn, n\u22653, consists of nvertices v1, v2, . . . , v n\nand edges {v1, v2},{v2, v3}, . . . ,{vn\u22121, vn}and{vn, v1}.\nThe cycle graphs C3, C4, C5, and C6are displayed below.\nC3 C4 C5 C6\nWheel graphs\nWe obtain the wheel graph Wnwhen we add an addi-\ntional vertex to the cycle Cn, forn\u22653, and connect this\nnew vertex to each of the nvertices in Cnby new edges.\nThe wheel graphs W3, W4, W5, and W6are displayed be-\nlow.\n\n\n\n\n5.2. BASIC TERMINOLOGY 81\n/0/0/1/1/0/0/1/1\n/0/0/1/1\n/0/0/1/1/0/0/1/1/0/0/1/1\n/0/0/1/1/0/0/1/1/0/0/1/1\n/0/0/1/1\n/0/0/1/1/0/0/1/1/0/0/1/1/0/0/1/1/0/0/1/1/0/0/1/1\n/0/0/1/1/0/0/1/1\n/0/0/1/1/0/0/1/1/0/0/1/1\n/0/0/1/1\nW5 W6W4 W3\nn-Cubes\nThen-cube, denoted by Qnis the graph that has vertices\nrepresenting the 2nbit strings of length n. Two vertices\nare adjacent if and only if the bit strings that they repre-\nsent differ in exactly one bit position. The graphs Q1, Q2,\nandQ3are displayed below.\nQ1 Q2 Q3\nBipartite graphs\nSometimes a graph has the property that its vertex set\ncan be divided into two disjoint subsets such that each\nedge connects a vertex in one of these subsets to a vertex\nin the other subset. For example, consider the graph\n\n\n\n\n82 TOPIC 5. GRAPHS\nrepresenting all the students in this class and the set of\ncourses they are taking. We draw an edge between a\nstudent and a course if the student is taking that course.\nThe vertex set is the union S\u222aCwhere Sis the set of\nstudents and Cis the set of courses.\nDefinition 5.12 A simple graph Gis called bipartite\nif its vertex set Vcan be partitioned into two disjoint\nnonempty sets V1andV2such that every edge in the\ngraph connects a vertex in V1and a vertex in V2(so that\nno edge in Gconnects either two vertices in V1or two\nvertices in V2).\nExample 5.13 Show that C6is bipartite.\nExample 5.14 Show that K3is not bipartite.\nExample 5.15 Are the graphs GandHdisplayed below\nbipartite?\nG\nH\nComplete bipartite graphs\nThecomplete bipartite graph Km,nis the graph that has\nits vertex set partitioned into two subsets of mandn\nvertices, respectively. There is an edge between two ver-\ntices if and only if one vertex is in the first subset and\nthe other vertex is in the second subset.\nExample 5.16 The complete bipartite graphs K2,3and\nK3,3are displayed below.\n\n\n\n\n5.2. BASIC TERMINOLOGY 83\nK3,3\nK2,3\nSubgraphs\nSometimes we need only part of a graph to solve a prob-\nlem. For instance, we may care only about one part of\na large computer network, such as the part that involves\nthe data centres in Auckland, Hamilton, Wellington, and\nChristchurch. We can ignore the other centres and ca-\nbles. In the graph model we remove the vertices cor-\nresponding to the computer centres other than the four\nof interest, and we remove all edges incident with any\nvertex that was removed.\nWhen edges and vertices are removed from a graph, with-\nout removing endpoints of any remaining edges, a smaller\ngraph is obtained. Such a graph is called a subgraph of\nthe original graph.\nDefinition 5.13 Asubgraph of a graph G= (V, E)is\na graph H= (W, F )where W\u2286VandF\u2286E.\nNotice that, in the definition of a subgraph, we must re-\nmove any edges which have had one of their endpoints\nremoved. This does not mean that we may not also re-\nmove some of the other edges. For example, for any graph\nG= (V, E), the graph H= (V,\u2205) counts as a (rather\nuninteresting) example of a subgraph.\nFor example, the graph below has C5as a subgraph,\nbecause we can delete the \u201cinside\u201d vertices and edges to\nhave just a C5left over.\n\n\n\n\n84 TOPIC 5. GRAPHS\nNote that any graph Gis \u201ctrivially\u201d a subgraph of itself,\nas we can just delete \u201cnothing\u201d from Gand have Gleft\nover.\nExample 5.17 LetGbe the graph shown below. Which\nof the graphs H1,H2,H3are subgraphs of G?\n\n\n\n\n5.2. BASIC TERMINOLOGY 85\nGu\nv\nwz\nH1u\nv\nwz\nH2v\nwz\nu\nH3\nw\nzu\nUnion of two graphs\nTwo or more graphs can be combined in various ways.\nThe new graph that contains all the vertices and edges\nof these graphs is called the union of the graphs. We will\ngive a more formal definition for the union of two simple\ngraphs.\n\n\n\n\n86 TOPIC 5. GRAPHS\nDefinition 5.14 The union of two simple graphs G1=\n(V1, E1)andG2= (V2, E2)is the simple graph with ver-\ntex set V1\u222aV2and edge set E1\u222aE2. The union of G1and\nG2is denoted by G1\u222aG2. (Note: we assume V1\u2229V2=\u2205.)\nExample 5.18 Find the union of the graphs G1andG2\nshown below.\nG1 G2\n5.3 Representing graphs\nThere are many useful ways to represent graphs. When\nworking with graphs, it is helpful to be able to choose the\nmost convenient representation. In this section we will\nshow how to represent graphs in several different ways.\nSometimes, two graphs have exactly the same structure,\nin the sense that there is a one-to-one correspondence\nbetween their vertex sets that preserves edges. In such a\ncase, we say that the two graphs are isomorphic . Deter-\nmining whether two graphs are isomorphic is an impor-\ntant problem of graph theory.\nAdjacency lists\nOne way to represent a graph without multiple edges is to\nlist all the edges of this graph. Another way to represent\na graph with no multiple edges is to use adjacency lists ,\nwhich specify the vertices that are adjacent to each vertex\nof the graph.\nExample 5.19 Use adjacency lists to describe the simple\ngraph given below.\n\n\n\n\n",
      },
      {
        name: "Representing graphs",
        content:
          "86 TOPIC 5. GRAPHS\nDefinition 5.14 The union of two simple graphs G1=\n(V1, E1)andG2= (V2, E2)is the simple graph with ver-\ntex set V1\u222aV2and edge set E1\u222aE2. The union of G1and\nG2is denoted by G1\u222aG2. (Note: we assume V1\u2229V2=\u2205.)\nExample 5.18 Find the union of the graphs G1andG2\nshown below.\nG1 G2\n5.3 Representing graphs\nThere are many useful ways to represent graphs. When\nworking with graphs, it is helpful to be able to choose the\nmost convenient representation. In this section we will\nshow how to represent graphs in several different ways.\nSometimes, two graphs have exactly the same structure,\nin the sense that there is a one-to-one correspondence\nbetween their vertex sets that preserves edges. In such a\ncase, we say that the two graphs are isomorphic . Deter-\nmining whether two graphs are isomorphic is an impor-\ntant problem of graph theory.\nAdjacency lists\nOne way to represent a graph without multiple edges is to\nlist all the edges of this graph. Another way to represent\na graph with no multiple edges is to use adjacency lists ,\nwhich specify the vertices that are adjacent to each vertex\nof the graph.\nExample 5.19 Use adjacency lists to describe the simple\ngraph given below.\n\n\n\n\n5.3. REPRESENTING GRAPHS 87\na b\nc d\nExample 5.20 Represent the directed graph shown below\nby listing all the vertices that are the terminal vertices of\nedges starting at each vertex of the graph.\nd ca b\nAdjacency matrices\nCarrying out graph algorithms using the representation\nof graphs by lists of edges, or by adjacency lists, can be\ncumbersome if there are many edges in the graph. To\nsimplify computation, graphs can be represented using\nmatrices. Two types of matrices commonly used to rep-\nresent graphs will be presented here. One is based on the\nadjacency of vertices, and the other is based on incidence\nof vertices and edges.\nSuppose that G= (V, E) is a simple graph where |V|=\nn. Suppose that the vertices of Gare listed as v1, v2, . . . , v n.\nTheadjacency matrix A(orAG) ofGwith respect to this\nlisting of the vertices, is the n\u00d7nzero-one matrix with\n1 as its ( i, j)th entry when viandvjare adjacent, and 0\nas its ( i, j)th entry when they are not adjacent. In other\nwords, if its adjacency matrix is A= [aij], then\naij=\u001a1 if{vi, vj}is an edge of G\n0 otherwise\nNote that an adjacency matrix of a graph is based on the\nordering chosen for the vertices. Hence, there are poten-\ntially as many as n! different adjacency matrices for a\ngraph with nvertices, since there are n! different order-\nings of nvertices. However, once a listing v1, v2, . . . , v n\n\n\n\n\n88 TOPIC 5. GRAPHS\nof the vertices has been decided, the adjacency matrix is\nuniquely determined by the graph.\nThe adjacency matrix of a simple graph is symmetric,\nmeaning that aij=aji, since both of these entries are 1\nwhen viandvjare adjacent, and both are 0 otherwise.\nFurthermore, since a simple graph has no loops, each\nentry aii,i= 1,2,3, . . . , n , is 0.\nExample 5.21 Use an adjacency matrix to represent the\ngraph shown below.\na b\nc d\nExample 5.22 Draw a graph with the adjacency matrix\n\uf8ee\n\uf8ef\uf8ef\uf8f00 1 1 0\n1 0 0 1\n1 0 0 1\n0 1 1 0\uf8f9\n\uf8fa\uf8fa\uf8fb.\nAdjacency matrices can also be used to represent undi-\nrected graphs with loops and with multiple edges. A\nloop at the vertex viis represented by a 1 at the ( i, i)th\nposition of the adjacency matrix. When multiple edges\nare present, the adjacency matrix is no longer a zero-one\nmatrix, since the ( i, j)th entry of this matrix equals the\nnumber of edges that are associated to {vi, vj}. All undi-\nrected graphs, including multigraphs and pseudographs,\nhave symmetric adjacency matrices.\n\n\n\n\n5.4. CONNECTIVITY, PATHS AND CIRCUITS 89\nExample 5.23 Use an adjacency matrix to represent the\npseudograph shown below.\na b\nd c\nThe adjacency matrix for a directed graph does not have\nto be symmetric, since there may not be an edge from\nvjtoviwhen there is an edge from vitovj. Adjacency\nmatrices can also be used to represent directed multi-\ngraphs. Again, such matrices are not zero-one matrices\nwhen there are multiple edges in the same direction con-\nnecting two vertices In the adjacency matrix for a di-\nrected multigraph, aijequals the number of edges that\nare associated to ( vi, vj).\n5.4 Connectivity, paths and circuits\nMany problems can be studied by considering paths formed\nby traveling along the edges of graphs. For instance, the\nproblem of determining whether a message can be sent\nbetween two computers using intermediate links can be\nstudied with a graph model.\nPaths and circuits\nWe begin by defining the basic terminology of paths and\ncircuits.\nDefinition 5.15\n\u0088Awalk of length nfrom utov, where nis a\nnon-negative integer, in an undirected graph is a\nsequence of edges e1, . . . , e nof the graph such that\nf(e1) ={x0, x1},f(e2) ={x1, x2}, . . . , f (en) =\n{xn\u22121, xn}, where x0=uandxn=v. When the\n\n\n\n\n",
      },
      {
        name: "Connectivity, paths and circuits",
        content:
          "5.4. CONNECTIVITY, PATHS AND CIRCUITS 89\nExample 5.23 Use an adjacency matrix to represent the\npseudograph shown below.\na b\nd c\nThe adjacency matrix for a directed graph does not have\nto be symmetric, since there may not be an edge from\nvjtoviwhen there is an edge from vitovj. Adjacency\nmatrices can also be used to represent directed multi-\ngraphs. Again, such matrices are not zero-one matrices\nwhen there are multiple edges in the same direction con-\nnecting two vertices In the adjacency matrix for a di-\nrected multigraph, aijequals the number of edges that\nare associated to ( vi, vj).\n5.4 Connectivity, paths and circuits\nMany problems can be studied by considering paths formed\nby traveling along the edges of graphs. For instance, the\nproblem of determining whether a message can be sent\nbetween two computers using intermediate links can be\nstudied with a graph model.\nPaths and circuits\nWe begin by defining the basic terminology of paths and\ncircuits.\nDefinition 5.15\n\u0088Awalk of length nfrom utov, where nis a\nnon-negative integer, in an undirected graph is a\nsequence of edges e1, . . . , e nof the graph such that\nf(e1) ={x0, x1},f(e2) ={x1, x2}, . . . , f (en) =\n{xn\u22121, xn}, where x0=uandxn=v. When the\n\n\n\n\n90 TOPIC 5. GRAPHS\ngraph is simple, we denote this path by its vertex\nsequence x0, x1, . . . , x n(since listing these vertices\nuniquely determines the path).\n\u0088The walk is a circuit if it begins and ends at the\nsame vertex, that is, if u=v. The walk or circuit\nis said to pass through ortraverse the vertices\nx1, x2, . . . , x n\u22121.\n\u0088The circuit is a cycle if each vertex, except for the\nfirst and the last ones, only appears once.\n\u0088The walk is a path if it does not contain the same\nvertex more than once.\nWhen it is not necessary to distinguish between mul-\ntiple edges, we will denote a path e1, e2, . . . , e nwhere\nf(ei) ={xi\u22121, xi}fori= 1,2, . . . , n by its vertex se-\nquence x0, x1, . . . , x n. This notation identifies a path\nonly up to the vertices it passes through. There may be\nmore than one path that passes through this sequence of\nvertices.\nExample 5.24 In the simple graph given below, show\nthata, d, c, f, e is a path of length 4. Why is d, e, c, a is\nnot a walk? Show that b, c, f, e, b, a, e, b is a circuit but\nnot a cycle. What is the length of the circuit b, c, f, e, b, a, e, b ?\nWhy a, b, e, d, a, b is not a path?\n/0/0/1/1\n/0/0/1/1 /0/0/1/1 /0/0/1/1/0/0/1/1 /0/0/1/1\na b c\nd e f\nTheorem 5.4 LetG= (V, E)be a graph and let u, v\u2208\nV. If there is a walk from utovthen there is a path\nfrom utov.\nProof: See lecture.\nTheorem 5.5 LetG= (V, E)be a graph and let u, v, w \u2208\nV. If there is a walk from utovand a walk from vtow\nthen there is a walk from utow.\nProof: See lecture.\nConnectedness in undirected graphs\nA fundamental problem is to determine whether or not\na network has the property that every pair of nodes\n\n\n\n\n5.4. CONNECTIVITY, PATHS AND CIRCUITS 91\ncan communicate with one another. For example, in a\nnetwork of computers or data centres, two devices can\ncommunicate if there is a a cable between them or if\ntheir messages can be sent through one or more inter-\nmediate computers. If the network is represented by a\ngraph, where edges represent the communication links,\nthis problem becomes: When is there always a walk be-\ntween two vertices in the graph?\nDefinition 5.16 An undirected graph is called connected\nif there is a walk between every pair of distinct vertices\nof the graph.\nFor this definition we always allow a walk of length 0\nfrom a vertex to itself.\nThus, any two computers in the network can communi-\ncate if and only if the graph of this network is connected.\nExample 5.25 Is the graph Gshown below connected?\nWhy or why not? Is the graph Hshown below connected?\nWhy or why not?\na b\ndc\ne\ng fh j\nk\nmp\nn\nG H\nTheorem 5.6 There is a path between every pair of dis-\ntinct vertices of a connected undirected graph.\nProof: See lecture.\nComponents\nA graph that is not connected is the union of two or\nmore connected graphs, each pair of which has no vertex\nin common. These disjoint connected graphs are called\ntheconnected components of the graph.\n\n\n\n\n92 TOPIC 5. GRAPHS\nExample 5.26 What are the connected components of\nthe graph Gshown below?\nb c\nf da\ne\nPaths and circuits in directed multigraphs\nDefinition 5.17\n\u0088Awalk of length n, where nis a positive integer,\nfrom utovin a directed multigraph is a sequence of\nedges e1, e2, . . . , e nof the graph such that f(e1) =\n(x0, x1), f(e2) = ( x1, x2), . . . , f (en) = ( xn\u22121, xn),\nwhere x0=uandxn=v. When there are no\nmultiple edges in the graph, this path is denoted by\nits vertex sequence x0, x1, x2, . . . , x n.\n\u0088A walk that begins and ends at the same vertex is\ncalled a circuit .\n\u0088A circuit is called a cycle if each vertex, except for\nthe first and the last ones, only appears once.\n\u0088A walk is called a path it does not contain the\nsame vertex more than once.\nWhen it is not necessary to distinguish between mul-\ntiple edges, we will denote a path e1, e2, . . . , e nwhere\nf(e1) = ( xi\u22121, xi) for i= 1,2, . . . , n by its vertex se-\nquence x0, x1, . . . , x n. The notation identifies a path only\nup to the vertices it passes through. There may be more\nthan one path that passes through this sequence of ver-\ntices.\nConnectedness in directed graphs\nThere are two notions of connectedness in directed graphs,\ndepending on whether the directions of the edges are con-\nsidered. Again we declare that a vertex is always strongly\nconnected with itself (by a walk of length zero).\n\n\n\n\n5.4. CONNECTIVITY, PATHS AND CIRCUITS 93\nDefinition 5.18 Two vertices a, bin a directed graph\narestrongly connected if there is a walk from atoband\na walk from btoa.\nA directed graph is strongly connected if there is a walk\nfrom atoband a walk from btoawhenever aandbare\nvertices in the graph.\nFor a directed graph to be strongly connected there must\nbe a sequence of directed edges from any vertex in the\ngraph to any other vertex. A directed graph can fail to\nbe strongly connected but still be in \u201cone piece.\u201d To\nmake this precise, the following definition is given.\nDefinition 5.19 A directed graph is weakly connected\nif there is a walk between any two vertices in the under-\nlying undirected graph.\nThat is, a directed graph is weakly connected if and only\nif there is always a walk between two vertices when the\ndirections of the edges are disregarded. Clearly, any\nstrongly connected directed graph is also weakly con-\nnected.\nTheorem 5.7 LetG= (V, E)be a directed graph.\n1. Every vertex is strongly connected to itself.\n2. Let u, v\u2208V. Ifuis strongly connected to vthen v\nis strongly connected to u.\n3. Let u, v, w \u2208V. If uis strongly connected to v\nandvis strongly connected to wthen uis strongly\nconnected to w.\nProof: See lecture.\nExample 5.27 Are the directed graphs GandHshown\nbelow strongly connected? Are they weakly connected?\n\n\n\n\n94 TOPIC 5. GRAPHS\na b\nc\nde\na b\nc\nd e\nG\nH\n5.5 Isomorphism of graphs\nWe often need to know whether it is possible to draw\ntwo graphs in the same way. For instance, in chemistry,\ngraphs are used to model compounds. Different com-\npounds can have the same molecular formula but can\ndiffer in structure. Such compounds will be represented\nby graphs that cannot be drawn in the same way. The\ngraphs representing previously known compounds can be\nused to determine whether a supposedly new compound\nhas been studied before.\nIsomorphic graphs\nDefinition 5.20 The simple graphs G1= (V1, E1)and\nG2= (V2, E2)areisomorphic if there is a one-to-one\nand onto function h:V1\u2192V2with the property that a\nandbare adjacent in G1if and only if h(a)andh(b)are\nadjacent in G2, for all aandbinV1. Such a function h\nis called an isomorphism .\nIn other words, when two simple graphs are isomorphic,\nthere is a one-to-one correspondence between vertices of\nthe two graphs that preserves the adjacency relationship.\n\n\n\n\n",
      },
      {
        name: "Isomorphism of graphs",
        content:
          "94 TOPIC 5. GRAPHS\na b\nc\nde\na b\nc\nd e\nG\nH\n5.5 Isomorphism of graphs\nWe often need to know whether it is possible to draw\ntwo graphs in the same way. For instance, in chemistry,\ngraphs are used to model compounds. Different com-\npounds can have the same molecular formula but can\ndiffer in structure. Such compounds will be represented\nby graphs that cannot be drawn in the same way. The\ngraphs representing previously known compounds can be\nused to determine whether a supposedly new compound\nhas been studied before.\nIsomorphic graphs\nDefinition 5.20 The simple graphs G1= (V1, E1)and\nG2= (V2, E2)areisomorphic if there is a one-to-one\nand onto function h:V1\u2192V2with the property that a\nandbare adjacent in G1if and only if h(a)andh(b)are\nadjacent in G2, for all aandbinV1. Such a function h\nis called an isomorphism .\nIn other words, when two simple graphs are isomorphic,\nthere is a one-to-one correspondence between vertices of\nthe two graphs that preserves the adjacency relationship.\n\n\n\n\n5.5. ISOMORPHISM OF GRAPHS 95\nExample 5.28 Show that the graphs G= (V, E)and\nH= (W, F ), displayed below, are isomorphic.\na\nb\ncde1\n2\n3\n4\n5jf\nhig\n6789\n10\nInvariant properties\nIt is often difficult to determine whether two simple graphs\nare isomorphic. There are n! possible one-to-one corre-\nspondences between the vertex sets of two simple graphs\nwith nvertices. Testing each such correspondence to see\nwhether it preserves adjacency and nonadjacency is im-\npractical if nis at all large.\nHowever, we can often show that two simple graphs are\nnot isomorphic by showing that they do not share a prop-\nerty that isomorphic simple graphs must both have. Such\na property is called an invariant with respect to isomor-\nphism of simple graphs. For instance:\n\u0088Isomorphic simple graphs must have the same num-\nber of vertices, since there is a one-to-one corre-\nspondence between the sets of vertices of the graphs.\n\u0088Isomorphic simple graphs must have the same num-\nber of edges, because the one-to-one correspondence\nbetween vertices establishes a one-to-one correspon-\ndence between edges.\n\u0088The degrees of the vertices in isomorphic simple\ngraphs must be the same. That is, a vertex vof\ndegree dinGmust correspond to a vertex h(v) of\ndegree dinH, since a vertex winGis adjacent to\nvif and only if h(v) and h(w) are adjacent in H.\nIn other words, two isomorphic graphs should have\nthe same degree sequence.\nNumber of vertices and edges in isomorphic graphs\nThe number of vertices, the number of edges, and the\ndegrees of the vertices are all invariants under isomor-\nphism. If any of these quantities differ in two simple\ngraphs, these graphs cannot be isomorphic.\nHowever, when these invariants are the same, it does\nnot necessarily mean that the two graphs are isomorphic.\nThere are no useful sets of invariants currently known\nthat can be used to determine whether simple graphs\nare isomorphic.\n\n\n\n\n96 TOPIC 5. GRAPHS\nExample 5.29 Determine whether the graphs GandH\nshown below are isomorphic.\ndg hs\nvya b\nce f\nzw xt\nu\nG H\nTo show that a function hfrom the vertex set of a graph\nGto the vertex set of a graph His an isomorphism, we\nneed to show that hpreserves edges.\nExample 5.30 Determine whether the graphs GandH\ndisplayed below are isomorphic.\na b\ncdw x\nyz\nG\nH\nPaths and isomorphism\nThere are several ways that walks and cycles can help\ndetermine whether two graphs are isomorphic. For ex-\nample, the existence of a cycle of a particular length is\n\n\n\n\n5.5. ISOMORPHISM OF GRAPHS 97\na useful invariant that can be used to show that two\ngraphs are not isomorphic. In addition, walks can be\nused to construct mappings that may be isomorphisms.\nExample 5.31 Determine whether the graphs shown be-\nlow are isomorphic.\na b\nc\nd efx\nr\ns\nz yt\nG H\nWe have shown how the existence of a type of walk,\nnamely, a cycle of a particular length, can be used to\nshow that two graphs are not isomorphic. We can also\nuse walks to find mappings that are potential isomor-\nphisms.\nExample 5.32 Determine whether the graphs shown be-\nlow are isomorphic.\nab\nc\ndevw\nx\nyz\nG H\n\n\n\n\n98 TOPIC 5. GRAPHS\n5.6 Euler circuits and walks\nWe now tell a famous story in the history of graph the-\nory. Back in the 18th century, the town of K\u00a8 onigsberg\nwas part of Prussia (it is now called Kaliningrad and is\npart of the Russian republic). The town was divided\ninto four sections by the Pregel River. These four sec-\ntions included the two regions on the banks of the Pregel,\nKneiphof Island, and the region between the two branches\nof the Pregel. In the 18th century seven bridges con-\nnected these regions. The image below (from the Mac-\nTutor website) depicts these regions and bridges.\nThe people in the town enjoyed walking through the town\non Sundays. They wondered whether it was possible to\nstart at some location in the town, travel across all the\nbridges without crossing any bridge twice, and return to\nthe starting point.\nThe Swiss mathematician Leonhard Euler showed that\nno such Sunday stroll exists. His solution was published\nin 1736, and is considered to be the birth of graph the-\nory. Euler studied this problem using the multigraph ob-\ntained when the four regions are represented by vertices\nand the bridges are represented by edges. This multi-\ngraph is shown below.\n/0/0/0/0\n/1/1/1/1/0/0/0/0\n/1/1/1/1/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n\n\n\n\n",
      },
      {
        name: "Euler circuits and walks",
        content:
          "98 TOPIC 5. GRAPHS\n5.6 Euler circuits and walks\nWe now tell a famous story in the history of graph the-\nory. Back in the 18th century, the town of K\u00a8 onigsberg\nwas part of Prussia (it is now called Kaliningrad and is\npart of the Russian republic). The town was divided\ninto four sections by the Pregel River. These four sec-\ntions included the two regions on the banks of the Pregel,\nKneiphof Island, and the region between the two branches\nof the Pregel. In the 18th century seven bridges con-\nnected these regions. The image below (from the Mac-\nTutor website) depicts these regions and bridges.\nThe people in the town enjoyed walking through the town\non Sundays. They wondered whether it was possible to\nstart at some location in the town, travel across all the\nbridges without crossing any bridge twice, and return to\nthe starting point.\nThe Swiss mathematician Leonhard Euler showed that\nno such Sunday stroll exists. His solution was published\nin 1736, and is considered to be the birth of graph the-\nory. Euler studied this problem using the multigraph ob-\ntained when the four regions are represented by vertices\nand the bridges are represented by edges. This multi-\ngraph is shown below.\n/0/0/0/0\n/1/1/1/1/0/0/0/0\n/1/1/1/1/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0\n/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1\n\n\n\n\n5.6. EULER CIRCUITS AND WALKS 99\nEuler circuit and walks\nThe problem of traveling across every bridge without\ncrossing any bridge more than once can be rephrased\nin terms of this model. The question becomes: Is there\na circuit in this multigraph that contains every edge ex-\nactly once? (Note that this circuit is required to visit\nevery edge, so it must visit vertices of degree >2 more\nthan once.) This may seem an artificial problem, but it\nhas applications in scheduling postal delivery routes and\ntrash collection services.\nDefinition 5.21 AnEuler circuit in a graph Gis a cir-\ncuit containing every edge of Gexactly once. An Euler\nwalk inGis a walk containing every edge of Gexactly\nonce.\nExample 5.33 Which of the undirected graphs below\nhave an Euler circuit? Of those that do not, which have\nan Euler walk?\na b\ndea b\nc de\na b\nc\nd ec\nG2 G1\nG3\nExample 5.34 Which of the directed graphs below have\nan Euler circuit? Of those that do not, which have an\nEuler walk?\n\n\n\n\n100 TOPIC 5. GRAPHS\n/0/0/1/1\n/0/0/1/1/0/0/1/1/0/0/1/1\n/0/0/1/1/0/0/1/1/0/0/1/1/0/0/1/1\n/0/0/1/1/0/0/1/1/0/0/1/1/0/0/1/1/0/0/1/1\nG3G2 G1\nNecessary and sufficient condition for Euler cir-\ncuits\nThere are simple criteria for determining whether a multi-\ngraph has an Euler circuit or an Euler walk. Euler discov-\nered them when he solved the famous K\u00a8 onigsberg bridge\nproblem. We will assume that all graphs discussed in\nthis section have a finite number of vertices and edges.\nWhat can we say if a connected multigraph has an Euler\ncircuit? What we can show is that every vertex must\nhave even degree.\n\u0088To do this, first note that an Euler circuit begins\nwith a vertex aand continues with an edge incident\ntoa, say{a, b}. The edge {a, b}contributes 1 to\ndeg(a).\n\u0088Each time the circuit passes through a vertex it\ncontributes 2 to the vertex\u2019s degree, since the cir-\ncuit enters via an edge incident with this vertex\nand leaves via another such edge.\n\u0088Finally, the circuit terminates where it started, con-\ntributing 1 to deg( a). Therefore, deg( a) must be\neven, because the circuit contributes 1 when it be-\ngins, 1 when it ends, and 2 every time it passes\nthrough a(if it ever does).\n\u0088A vertex other than ahas even degree because\nthe circuit contributes 2 to its degree each time\nit passes through the vertex.\n\n\n\n\n5.6. EULER CIRCUITS AND WALKS 101\n\u0088We conclude that if a connected graph has an Euler\ncircuit, then every vertex must have even degree.\nExample 5.35 Solve the K\u00a8 onigsberg bridge problem.\nIs this necessary condition for the existence of an Euler\ncircuit also sufficient? That is, must an Euler circuit\nexist in a connected multigraph if all vertices have even\ndegree? The next result is one of the first big theorems\nin graph theory.\nTheorem 5.8 A connected multigraph has an Euler cir-\ncuit if and only if each of its vertices has even degree.\nThe algorithm below gives the constructive procedure for\nfinding Euler circuits.\nprocedure Euler (G: connected multigraph with all vertices\nof even degree)\nC:= a circuit in Gbeginning at an arbitrarily chosen ver-\ntex with edges successively added to form a walk that\nreturns to this vertex.\nH:=Gwith the edges of Cremoved\nwhile Hhas edges\nbegin\nS:= a circuit in Hbeginning at a vertex in Hthat\nalso is an endpoint of an edge of C\nH:=Hwith edges of Sand all isolated vertices re-\nmoved\nC:=CwithSinserted at the appropriate vertex\nend{Cis an Euler circuit }\nExample 5.36 Many puzzles ask you to draw a picture\nin a continuous motion, without lifting the pencil off the\npage, so that no part of the picture is retraced. We can\nsolve such puzzles using Euler circuits and walks. For\nexample, can Mohammed\u2019s scimitars , shown below, be\ndrawn in this way, where the drawing begins and ends at\nthe same point?\n/0/0/0/0\n/1/1/1/1/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1\n/0/0/0/0\n/1/1/1/1a\nb\ncde\nfij\nkh\ng\n\n\n\n\n102 TOPIC 5. GRAPHS\nNecessary and sufficient condition for Euler walks\nTheorem 5.9 A connected multigraph has an Euler walk\nbut not an Euler circuit if and only if it has exactly two\nvertices of odd degree.\nExample 5.37 Which graphs shown below have an Eu-\nler walk?\nG3G1 G2\nExample 5.38 Returning to 18th-century K\u00a8 onigsberg,\nis it possible to start at some point in the town, travel\nacross all the bridges exactly once, and end up at some\nother point in town?\nExample 5.39 A domino is a rectangle divided into two\nsquares with each square numbered one of 0,1, . . . , 6.\nTwo squares on a single domino can have the same num-\nber. Show that the twenty-one distinct dominoes can be\narranged in a circle so that touching dominoes have ad-\njacent squares with identical numbers. (Hint : Consider\nthe complete graph K7with vertices labeled 0,1, . . . , 6.\nThis has a Euler circuit since each of its vertices has\ndegree 6.)\n\n\n\n\n5.7. HAMILTON PATHS AND CYCLES 103\n5.7 Hamilton paths and cycles\nWe have developed necessary and sufficient conditions\nfor the existence of walks and circuits that contain every\nedge of a multigraph exactly once. Can we do the same\nfor walks and circuits that contain every vertex of the\ngraph exactly once?\nDefinition 5.22 A path x0, x1, . . . , x n\u22121, xnin the graph\nG= (V, E)is called a Hamilton path if\nV={x0, x1, . . . , x n\u22121, xn}.\nA cycle\nx0, x1, . . . , x n\u22121, xn, x0\n(with n >1) in a graph G= (V, E)is called a Hamilton\ncycle ifx0, x1, . . . , x n\u22121, xnis a Hamilton path.\nHamilton\u2019s puzzle\nThis terminology comes from a puzzle invented in 1857\nby the Irish mathematician Sir William Rowan Hamilton.\nHamilton\u2019s puzzle consisted of a wooden dodecahedron (a\npolyhedron with 12 regular pentagons as faces, as shown\nbelow, with a peg at each vertex of the dodecahedron,\nand string. The 20 vertices of the dodecahedron were\nlabeled with different cities in the world. The object of\nthe puzzle was to start at a city and travel along the\nedges of the dodecahedron (see the following picture),\nvisiting each of the other 19 cities exactly once, and end\nback at the first city. The circuit traveled was marked\noff using the strings and pegs.\nExample 5.40 Since we cannot supply each student with\na wooden solid with pegs and string, we will consider the\nequivalent question: Is there a circuit in the graph shown\nbelow that passes through each vertex exactly once? This\n\n\n\n\n",
      },
      {
        name: "Hamilton paths and cycles",
        content:
          "5.7. HAMILTON PATHS AND CYCLES 103\n5.7 Hamilton paths and cycles\nWe have developed necessary and sufficient conditions\nfor the existence of walks and circuits that contain every\nedge of a multigraph exactly once. Can we do the same\nfor walks and circuits that contain every vertex of the\ngraph exactly once?\nDefinition 5.22 A path x0, x1, . . . , x n\u22121, xnin the graph\nG= (V, E)is called a Hamilton path if\nV={x0, x1, . . . , x n\u22121, xn}.\nA cycle\nx0, x1, . . . , x n\u22121, xn, x0\n(with n >1) in a graph G= (V, E)is called a Hamilton\ncycle ifx0, x1, . . . , x n\u22121, xnis a Hamilton path.\nHamilton\u2019s puzzle\nThis terminology comes from a puzzle invented in 1857\nby the Irish mathematician Sir William Rowan Hamilton.\nHamilton\u2019s puzzle consisted of a wooden dodecahedron (a\npolyhedron with 12 regular pentagons as faces, as shown\nbelow, with a peg at each vertex of the dodecahedron,\nand string. The 20 vertices of the dodecahedron were\nlabeled with different cities in the world. The object of\nthe puzzle was to start at a city and travel along the\nedges of the dodecahedron (see the following picture),\nvisiting each of the other 19 cities exactly once, and end\nback at the first city. The circuit traveled was marked\noff using the strings and pegs.\nExample 5.40 Since we cannot supply each student with\na wooden solid with pegs and string, we will consider the\nequivalent question: Is there a circuit in the graph shown\nbelow that passes through each vertex exactly once? This\n\n\n\n\n104 TOPIC 5. GRAPHS\nsolves the puzzle since this graph is isomorphic to the\ngraph consisting of the vertices and edges of the dodeca-\nhedron.\n/0 /1/0/0\n/1/1/0/0\n/1/1/0/0/1/1\n/0/0/1/1\n/0/0/1/1\n/0/0/1/1/0/0\n/1/1/0 /1/0 /1 /0 /1/0 /1\n/0/0/0/0\n/1/1/1/1/0/0\n/1/1/0/0/0/0\n/1/1/1/1\n/0/0/1/1\n/0/0/0/0\n/1/1/1/1\n/0 /1/0/0\n/1/1\n/0/0/1/1\nExample 5.41 Which of the simple graphs below have a\nHamilton cycle or, if not, a Hamilton path?\nabc\nd\ne fgb c\ng\ne f\nG1\nG2\nDetermining whether a graph contains a Hamil-\nton cycle\nIs there a simple way to determine whether a graph has\na Hamilton cycle or path? At first, it might seem that\nthere should be an easy way to determine this, since there\nis a simple way to answer the similar question of whether\na graph has an Euler circuit.\nSurprisingly, there are no known simple necessary and\nsufficient criteria for the existence of Hamilton cycles.\nHowever, many theorems are known that give sufficient\nconditions for the existence of Hamilton cycles. Also,\n\n\n\n\n5.7. HAMILTON PATHS AND CYCLES 105\ncertain properties can be used to show that a graph has\nno Hamilton cycle.\n\u0088A graph with a vertex of degree 1 cannot have a\nHamilton cycle, since in a Hamilton cycle each ver-\ntex is incident with two edges in the circuit.\n\u0088If a vertex in the graph has degree 2, then both\nedges that are incident with this vertex must be\npart of any Hamilton cycle.\n\u0088When a Hamilton cycle is being constructed and\nthis circuit has passed through a vertex, then all re-\nmaining edges incident with this vertex, other than\nthe two used in the circuit, can be removed from\nconsideration.\n\u0088A Hamilton cycle cannot contain a smaller circuit\nwithin it.\nExample 5.42 Show that neither graph displayed below\nhas a Hamilton cycle.\nG1 G2\nExample 5.43 Show that Knhas a Hamilton cycle when-\nevern\u22653.\nThe traveling salesperson problem\nSuppose the drawing in Figure 5.1 is a map showing four\ncities and the distances in kilometers between them. Sup-\npose that a salesperson must visit each city exactly once,\nstarting and ending in city A. Which route from city to\ncity will minimize the total distance that must be trav-\neled?\n\n\n\n\n106 TOPIC 5. GRAPHS\n/0/0/0/1/1/1/0/0/0/1/1/1 /0/0/0/1/1/1\n/0/0/0/1/1/1AB C\nD\n30\n5035 25\n4030\nFigure 5.1:\nThis problem can be solved by writing all possible Hamil-\ntonian circuits starting and ending at A and calculating\nthe total distance traveled for each.\nRoute Total Distance (in kilometers)\nABCDA 30+30+25+40=125\nABDCA 30+35+25+50=140\nACBDA 50+30+35+40=155\nACDBA 140 [ABDCA backwards]\nADBCA 155 [ACBDA backwards]\nADCBA 125 [ABCDA backwards]\nThus either route ABCDA or ADCBA gives a minimum\ntotal distance of 125 kilometers.\nThe general traveling salesperson problem involves find-\ning a Hamiltonian circuit to minimize the total distance\ntraveled for an arbitrary graph with nvertices in which\neach edge is marked with a distance. One way to solve\nthe general problem is to use the above method. Write\ndown all Hamiltonian circuits starting and ending at a\nparticular vertex, compute the total distance for each,\nand pick one for which this total is minimal. However,\neven for medium-sized values of nthis method is imprac-\ntical. At present, there is no known algorithm for solving\nthe general traveling salesperson problem that is more ef-\nficient. However, there are efficient algorithms that find\n\u2018pretty good\u2019 solutions, that is, circuits that, while not\nnecessarily having the least possible total distance, have\nsmaller total distances than most other Hamiltonian cir-\ncuits.\n\n\n\n\nEnumeration\n6.1 Introduction\nIn this section we will consider problems involving count-\ning the number of ways that we can choose a number of\nobjects. These basically fall into two types: arrangement\nproblems in which the order in which we make the choices\nis significant, and selection problems in which the order\nis not significant.\nWe have three basic rules in solving these problems.\nThe union rule: LetA1, A2, . . . , A kbe finite, disjoint\nsets (i.e. finite sets such that, for i\u0338=j,Ai\u2229Aj=\n\u2205). Then |Sk\ni=1Ai|=Pk\ni=1|Ai|.\nThe product rule: LetSbe a set of ordered k-tuples\n(s1, s2, . . . , s k) such that, for each i= 1,2, . . . , k\nand each possible choice of s1, s2, . . . , s i\u22121, there\narenipossible choices for si. Then |S|=n1n2\u00b7\u00b7\u00b7nk.\nThe counting lemma: LetAandBbe finite sets and\nlet\u03c8:A\u2192Bbe a function such that, for every\nb\u2208B,|\u03c8\u2190(b)|=r. Then |B|=|A|/r. (Here\n\u03c8\u2190(b) ={a\u2208A:\u03c8(a) =b}.)\n6.2 Arrangement problems\nArrangements with replacement\nWe have ndifferent types of object and we want to put\nrof them in a row. The ordering matters. We have an\nunlimited supply of each type of object. How many ways\ncan we do this?\nThis is a straightforward use of the product rule. For\nexample consider 4 consecutive throws of a 6-sided dice.\nThe first throw gives us one out of six numbers, as does\nthe second, third and fourth. Hence the number of possi-\nble results is 64. In general, the number of arrangements\nofrthings from a set of nthings with replacement is\nnr.\nExample 6.1 How many car number plates can be made\nup out of 3 letters (\u2018A\u2019,. . . ,\u2018Z\u2019) followed by 4 digits (\u20180\u2019,. . . ,\u20189\u2019)\n107\n\n\n\n\n",
      },
    ],
  },
  {
    name: "Enumeration",
    definition: {
      simple:
        "\n\nEnumeration is the process of listing or naming items in a specific order or sequence for the purpose of counting, recording, or identifying them. It involves systematically categorizing or organizing information through the use of numbering, labeling, or classification to make it easier to understand, analyze, or manage. Enumeration is commonly used in data collection, inventory management, taxonomy, and other fields where precise identification and classification of objects or concepts are vital.",
    },
    childs: [
      {
        name: "Introduction",
        content:
          "Enumeration\n6.1 Introduction\nIn this section we will consider problems involving count-\ning the number of ways that we can choose a number of\nobjects. These basically fall into two types: arrangement\nproblems in which the order in which we make the choices\nis significant, and selection problems in which the order\nis not significant.\nWe have three basic rules in solving these problems.\nThe union rule: LetA1, A2, . . . , A kbe finite, disjoint\nsets (i.e. finite sets such that, for i\u0338=j,Ai\u2229Aj=\n\u2205). Then |Sk\ni=1Ai|=Pk\ni=1|Ai|.\nThe product rule: LetSbe a set of ordered k-tuples\n(s1, s2, . . . , s k) such that, for each i= 1,2, . . . , k\nand each possible choice of s1, s2, . . . , s i\u22121, there\narenipossible choices for si. Then |S|=n1n2\u00b7\u00b7\u00b7nk.\nThe counting lemma: LetAandBbe finite sets and\nlet\u03c8:A\u2192Bbe a function such that, for every\nb\u2208B,|\u03c8\u2190(b)|=r. Then |B|=|A|/r. (Here\n\u03c8\u2190(b) ={a\u2208A:\u03c8(a) =b}.)\n6.2 Arrangement problems\nArrangements with replacement\nWe have ndifferent types of object and we want to put\nrof them in a row. The ordering matters. We have an\nunlimited supply of each type of object. How many ways\ncan we do this?\nThis is a straightforward use of the product rule. For\nexample consider 4 consecutive throws of a 6-sided dice.\nThe first throw gives us one out of six numbers, as does\nthe second, third and fourth. Hence the number of possi-\nble results is 64. In general, the number of arrangements\nofrthings from a set of nthings with replacement is\nnr.\nExample 6.1 How many car number plates can be made\nup out of 3 letters (\u2018A\u2019,. . . ,\u2018Z\u2019) followed by 4 digits (\u20180\u2019,. . . ,\u20189\u2019)\n107\n\n\n\n\n",
      },
      {
        name: "Arrangement problems",
        content:
          "Enumeration\n6.1 Introduction\nIn this section we will consider problems involving count-\ning the number of ways that we can choose a number of\nobjects. These basically fall into two types: arrangement\nproblems in which the order in which we make the choices\nis significant, and selection problems in which the order\nis not significant.\nWe have three basic rules in solving these problems.\nThe union rule: LetA1, A2, . . . , A kbe finite, disjoint\nsets (i.e. finite sets such that, for i\u0338=j,Ai\u2229Aj=\n\u2205). Then |Sk\ni=1Ai|=Pk\ni=1|Ai|.\nThe product rule: LetSbe a set of ordered k-tuples\n(s1, s2, . . . , s k) such that, for each i= 1,2, . . . , k\nand each possible choice of s1, s2, . . . , s i\u22121, there\narenipossible choices for si. Then |S|=n1n2\u00b7\u00b7\u00b7nk.\nThe counting lemma: LetAandBbe finite sets and\nlet\u03c8:A\u2192Bbe a function such that, for every\nb\u2208B,|\u03c8\u2190(b)|=r. Then |B|=|A|/r. (Here\n\u03c8\u2190(b) ={a\u2208A:\u03c8(a) =b}.)\n6.2 Arrangement problems\nArrangements with replacement\nWe have ndifferent types of object and we want to put\nrof them in a row. The ordering matters. We have an\nunlimited supply of each type of object. How many ways\ncan we do this?\nThis is a straightforward use of the product rule. For\nexample consider 4 consecutive throws of a 6-sided dice.\nThe first throw gives us one out of six numbers, as does\nthe second, third and fourth. Hence the number of possi-\nble results is 64. In general, the number of arrangements\nofrthings from a set of nthings with replacement is\nnr.\nExample 6.1 How many car number plates can be made\nup out of 3 letters (\u2018A\u2019,. . . ,\u2018Z\u2019) followed by 4 digits (\u20180\u2019,. . . ,\u20189\u2019)\n107\n\n\n\n\n108 TOPIC 6. ENUMERATION\nArrangements without replacement\nGiven a set X, anr-permutation ofXis an arrangement\nofrof the elements of Xin order, with no repetition of\nelements. We denote the number of r-permutations of\na set with nelements by P(n, r). By the product rule,\nthere are n(n\u22121)(n\u22122)\u00b7\u00b7\u00b7(n\u2212r+ 1) r-permutations\nofX. So we have\nP(n, r) =n(n\u22121)(n\u22122)\u00b7\u00b7\u00b7(n\u2212r+ 1) =n!\n(n\u2212r)!.\nIn the case r=n, we simply refer to a permutation of\nX. The number of permutations of an n-element set is\nP(n, n) =n!.\nExample 6.2 In how many ways can we choose a chair-\nperson, vice-chairperson, secretary, and treasurer from a\ngroup of 10 persons?\nExample 6.3 Imagine a row of 5 chairs in a room.\nThere are 7 persons in the room. In how many ways\ncan 5 among them sit on the row of chairs?\nExample 6.4 Three men and three women are going to\noccupy a row of six seats. In how many different orders\ncan they be seated so that men occupy the two end seats?\nArrangements with repetitions\nIn many cases, we do not want to consider all the per-\nmutations of Xas being distinct. For example, if we\nregard the two Gs in EGG as being identical, then there\nare only 3 ways to arrange the letters of the word EGG,\nrather than 3! = 6.\nSuppose that the elements of a set Xare partitioned into\nkdisjoint sets X1, X2, . . . , X kwith|Xi|=ni.\n\u0088We wish to count the number of types of arrange-\nment of the elements of X, in which two arrange-\nments are deemed to be of the same type if the\ncorresponding terms come from the same set Xi.\n\u0088We let Adenote the set of arrangements of the ele-\nments of X, and Bthe set of types of arrangement.\n\u0088If\u03c8:A\u2192Bis the function which takes a given\narrangement to its type, then, for every b\u2208B,\n|\u03c8\u2190(b)|=n1!n2!\u00b7\u00b7\u00b7nk!.\n\n\n\n\n6.3. SELECTIONS 109\n\u0088So by the counting lemma we have\n|B|=|A|\nn1!n2!\u00b7\u00b7\u00b7nk!=n!\nn1!n2!\u00b7\u00b7\u00b7nk!.\nExample 6.5 How many strings can be formed using the\nfollowing letters?\nWHANGAMOMONA\nExample 6.6 How many distributions of ten different\nbooks are possible if Vanessa is to receive 5 books, Paul\nis to receive 3 books, and Rachel is to receive 2 books?\nExample 6.7 A playoff between two teams consists of at\nmost five games. No games end in a draw. The first team\nthat wins three games wins the playoff. In how many\nways can the playoff occur?\nExample 6.8 Three jars of rhubarb jam and three jars of\nmanuka honey are to be put in a row on a shelf. In how\nmany different orders can they be placed so that there is\na jar of jam at each end of the shelf?\n6.3 Selections\nWe now consider counting problems in which the order\nwe make our choices does not matter. In other words,\ninstead of choosing an ordered r-tuple of elements of a\nsetX, we are going to choose an r-element subset of\nX. We denote the number of r-element subsets of an\nn-element set by C(n, r), or\u0000n\nr\u0001\n.\nTo calculate\u0000n\nr\u0001\n, let Xbe an n-element set, let Abe\nthe set of r-permutations of Xand let Bbe the set of\nr-element subsets of X. Define \u03c8:A\u2192Bby\n\u03c8((x1, x2, . . . , x r)) ={x1, x2, . . . , x r}.\nThen, for any Y\u2208B,\u03c8\u2190(Y) is the set of permutations\nofY, which has cardinality P(r, r) = r!. So, by the\ncounting lemma, we have\n\u0012n\nr\u0013\n=|B|=|A|\nr!=n!\n(n\u2212r)!r!.\n\n\n\n\n",
      },
      {
        name: "Selections",
        content:
          "6.3. SELECTIONS 109\n\u0088So by the counting lemma we have\n|B|=|A|\nn1!n2!\u00b7\u00b7\u00b7nk!=n!\nn1!n2!\u00b7\u00b7\u00b7nk!.\nExample 6.5 How many strings can be formed using the\nfollowing letters?\nWHANGAMOMONA\nExample 6.6 How many distributions of ten different\nbooks are possible if Vanessa is to receive 5 books, Paul\nis to receive 3 books, and Rachel is to receive 2 books?\nExample 6.7 A playoff between two teams consists of at\nmost five games. No games end in a draw. The first team\nthat wins three games wins the playoff. In how many\nways can the playoff occur?\nExample 6.8 Three jars of rhubarb jam and three jars of\nmanuka honey are to be put in a row on a shelf. In how\nmany different orders can they be placed so that there is\na jar of jam at each end of the shelf?\n6.3 Selections\nWe now consider counting problems in which the order\nwe make our choices does not matter. In other words,\ninstead of choosing an ordered r-tuple of elements of a\nsetX, we are going to choose an r-element subset of\nX. We denote the number of r-element subsets of an\nn-element set by C(n, r), or\u0000n\nr\u0001\n.\nTo calculate\u0000n\nr\u0001\n, let Xbe an n-element set, let Abe\nthe set of r-permutations of Xand let Bbe the set of\nr-element subsets of X. Define \u03c8:A\u2192Bby\n\u03c8((x1, x2, . . . , x r)) ={x1, x2, . . . , x r}.\nThen, for any Y\u2208B,\u03c8\u2190(Y) is the set of permutations\nofY, which has cardinality P(r, r) = r!. So, by the\ncounting lemma, we have\n\u0012n\nr\u0013\n=|B|=|A|\nr!=n!\n(n\u2212r)!r!.\n\n\n\n\n110 TOPIC 6. ENUMERATION\nThe numbers\u0000n\nr\u0001\nare called binomial coefficients . Some\nof their properties are given in section 6.5.\nExample 6.9 An ordinary deck of 52 cards consists of\nfour suits (clubs, diamonds, hearts, and spades) of 13\ndenominations each (ace, 2-10, jack, queen, king).\n(a)How many (unordered) five-card poker hands, se-\nlected from an ordinary 52-card deck, are there?\n(b)How many poker hands contain cards all of the same\nsuit?\n(c)How many poker hands contain three cards of one\ndenomination and two cards of a second denomi-\nnation?\nExample 6.10 In a non-standard set of 40playing cards\n(10cards of 4different suits) how many distinct four-card\nhands contain cards comprising of exactly\n(a)one suit?\n(b)two suits?\n(c)three suits?\n(d)four suits?\nSolution.\n(a)\u00004\n1\u0001\u000010\n4\u0001\n= 840 .\n(b)\u00004\n2\u0001h\u000010\n3\u0001\u000010\n1\u0001\n+\u000010\n2\u0001\u000010\n2\u0001\n+\u000010\n1\u0001\u000010\n3\u0001i\n= 26,550.\n(c)\u00004\n3\u0001h\u000010\n2\u0001\u000010\n1\u0001\u000010\n1\u0001\n+\u000010\n1\u0001\u000010\n2\u0001\u000010\n1\u0001\n+\u000010\n1\u0001\u000010\n1\u0001\u000010\n2\u0001i\n= 54,000.\n(d)\u00004\n4\u0001\u000010\n1\u0001\u000010\n1\u0001\u000010\n1\u0001\u000010\n1\u0001\n= 10,000.\nExample 6.11 Suppose a class of 12 students is to be\ndivided into four study groups of three students. In how\nmany ways can this be done (a) if the groups study dif-\nferent subjects; (b) if the groups study the same subject?\n\n\n\n\n6.4. SELECTIONS WITH REPETITIONS ALLOWED 111\nExample 6.12 A certain class consists of 16men and 13\nwomen. How many different committees can be chosen\nfrom this class if the committees consist of:\n(a)9people?\n(b)5men and 4women?\n(a)9men or 9women?\nSolution.\n(a)\u000029\n9\u0001\n= 10,015,005.\n(b)\u000016\n5\u0001\n\u00d7\u000013\n4\u0001\n= 3,123,120.\n(c)\u000016\n9\u0001\n+\u000013\n9\u0001\n= 11,440 + 715 = 12 ,155.\nExample 6.13 How many routes are there from the\nlower left corner of an n\u00d7nsquare grid to the upper\nright corner if we are restricted to traveling only to the\nright or upward?\nFigure 6.1\nExample 6.14 An investor is going to invest $16,000 in\nfour stocks chosen from a list of twelve prepared by her\nbroker. How many different investments are possible if\n(a) $4000 is to be invested in each stock?\n(b) $6000 is to be invested in one stock, $5000 in an-\nother, $3000 in the third, and $2000 in the fourth?\n6.4 Selections with repetitions allowed\nSuppose we have a bag containing a large number of mar-\nbles in each of three colors: brown, yellow and blue. In\n\n\n\n\n",
      },
      {
        name: "Selections with repetitions allowed",
        content:
          "6.4. SELECTIONS WITH REPETITIONS ALLOWED 111\nExample 6.12 A certain class consists of 16men and 13\nwomen. How many different committees can be chosen\nfrom this class if the committees consist of:\n(a)9people?\n(b)5men and 4women?\n(a)9men or 9women?\nSolution.\n(a)\u000029\n9\u0001\n= 10,015,005.\n(b)\u000016\n5\u0001\n\u00d7\u000013\n4\u0001\n= 3,123,120.\n(c)\u000016\n9\u0001\n+\u000013\n9\u0001\n= 11,440 + 715 = 12 ,155.\nExample 6.13 How many routes are there from the\nlower left corner of an n\u00d7nsquare grid to the upper\nright corner if we are restricted to traveling only to the\nright or upward?\nFigure 6.1\nExample 6.14 An investor is going to invest $16,000 in\nfour stocks chosen from a list of twelve prepared by her\nbroker. How many different investments are possible if\n(a) $4000 is to be invested in each stock?\n(b) $6000 is to be invested in one stock, $5000 in an-\nother, $3000 in the third, and $2000 in the fourth?\n6.4 Selections with repetitions allowed\nSuppose we have a bag containing a large number of mar-\nbles in each of three colors: brown, yellow and blue. In\n\n\n\n\n112 TOPIC 6. ENUMERATION\nhow many ways can we select 5 marbles from the bag?\nIn this case we are selecting 5 objects from 3 types, with\norder unimportant and with repetition allowed.\nTo answer this question, we will exhibit a 1\u20131 corre-\nspondence between the set of solutions and the set of\nsequences of 5 0s and 2 1s. The correspondence is as\nfollows: a selection of ibrown marbles, jblue marbles\nandpyellow marbles corresponds to the sequence of i0s\nfollowed by a 1 followed by j0s followed by a 1 followed\nbyp0s. For example, the selection \u201c1 brown, 0 blue, 4\nyellow\u201d corresponds to the sequence 0110000.\nSo now we just need to work out how many sequences of\n5 0s and 2 1s there are. Well, there are 7 symbols, and\nwe must select the 2 places to put the 1s. So the answer\nis\u00007\n2\u0001\n.\nIn general, the number of ways of selecting nobjects\nfrom ktypes, with order unimportant but with repetition\nallowed, is\u0012n+k\u22121\nk\u22121\u0013\n.\n= number of ways of selecting nobjects of kdifferent types\n= number of ways of placing nindistinguishable objects into kbins\n= number of ways of arranging nobjects and k\u22121 dividers\nIn Section 6.5 we learn that\n\u0012n+k\u22121\nk\u22121\u0013\n=\u0012n+k\u22121\nn\u0013\n.\nIfkis greater than nthen it is easier to calculate the\nexpression to the right.\nExample 6.15 A bakery sells 8 varieties of muffins. Ap-\nple, banana, blueberry, cheese, chocolate, double choco-\nlate, peach and everyone\u2019s favorite, broccoli. How many\nways are there to select\n1. 16 muffins?\n2. 16 muffins with at least one of each kind?\n3. 16 muffins with at least two peach and at least three\nchocolate?\n4. 16 muffins with no more than two broccoli?\n5. 16 muffins with at least two cheese, at least three\nchocolate and no more than two broccoli muffins?\nExample 6.16 Donut King makes four different types\nof donuts.\n(a) How many different assortments of one dozen donuts\ncan be purchased?\n\n\n\n\n6.5. SOME PROPERTIES OF BINOMIAL COEFFICIENTS 113\n(b) How many different assortments of one dozen donuts\ncan be purchased that include at least one donut of\neach type?\n(c) How many different assortments of one dozen donuts\ncan be purchased that include no more than three\nchocolate donuts?\nExample 6.17 A math lecturer is about to assign grades\nofA,B,CorD, where Dis a failing grade, to his class\nof 100 students. How many different grade distributions\nare possible if:\n1. Any distribution is allowed.\n2. No more than 80% of the students may pass.\n3. No fewer than 50% of the students may pass.\n4. No more than 20% of the students may get A grades.\n5. Conditions 2, 3 and 4 apply.\nExample 6.18 A generous eccentric withdraws $700 in\n$100 notes from the bank. He meets 3strangers in the\nstreet on his way home and gives all this money away to\nthem.\n(a)In how many ways can the money be distributed among\nthe3strangers?\n(b)In how many ways can the money be distributed\namong the 3strangers if each stranger gets at least\n$100?\nSolution.\n(a)\u00007+3\u22121\n3\u22121\u0001\n= 36.\n(b)\u00004+3\u22121\n3\u22121\u0001\n= 15 . First give $100 to each stranger and then\nshare out the remaining $400.\n6.5 Some properties of binomial coefficients\nWe now describe some of the facts about the binomial\ncoefficients\u0000n\nk\u0001\n. First, the reason for the name.\nFact 1: for any real numbers aandb, and any n\u2208N,\n(a+b)n=nX\nk=0\u0012n\nk\u0013\nan\u2212kbk.\n\n\n\n\n",
      },
      {
        name: "Some properties of binomial coefficients",
        content:
          '6.5. SOME PROPERTIES OF BINOMIAL COEFFICIENTS 113\n(b) How many different assortments of one dozen donuts\ncan be purchased that include at least one donut of\neach type?\n(c) How many different assortments of one dozen donuts\ncan be purchased that include no more than three\nchocolate donuts?\nExample 6.17 A math lecturer is about to assign grades\nofA,B,CorD, where Dis a failing grade, to his class\nof 100 students. How many different grade distributions\nare possible if:\n1. Any distribution is allowed.\n2. No more than 80% of the students may pass.\n3. No fewer than 50% of the students may pass.\n4. No more than 20% of the students may get A grades.\n5. Conditions 2, 3 and 4 apply.\nExample 6.18 A generous eccentric withdraws $700 in\n$100 notes from the bank. He meets 3strangers in the\nstreet on his way home and gives all this money away to\nthem.\n(a)In how many ways can the money be distributed among\nthe3strangers?\n(b)In how many ways can the money be distributed\namong the 3strangers if each stranger gets at least\n$100?\nSolution.\n(a)\u00007+3\u22121\n3\u22121\u0001\n= 36.\n(b)\u00004+3\u22121\n3\u22121\u0001\n= 15 . First give $100 to each stranger and then\nshare out the remaining $400.\n6.5 Some properties of binomial coefficients\nWe now describe some of the facts about the binomial\ncoefficients\u0000n\nk\u0001\n. First, the reason for the name.\nFact 1: for any real numbers aandb, and any n\u2208N,\n(a+b)n=nX\nk=0\u0012n\nk\u0013\nan\u2212kbk.\n\n\n\n\n114 TOPIC 6. ENUMERATION\nThis is the binomial theorem . We will prove this later,\nusing induction and Fact 3 (below).\nFact 2: For any n\u2208Nandk\u2208 {0,1, . . . , n },\n\u0012n\nk\u0013\n=\u0012n\nn\u2212k\u0013\nand\u0012n\n0\u0013\n=\u0012n\nn\u0013\n= 1.\nThis is because the number of ways of selecting kobjects\nis the same as the number of ways of selecting which n\u2212k\nobjects to omit.\nFact 3 (Pascal\u2019s Identity): For any n\u2208Nandk\u2208\n{0,1, . . . , n },\n\u0012n+ 1\nk+ 1\u0013\n=\u0012n\nk+ 1\u0013\n+\u0012n\nk\u0013\n.\nThis is because we can choose k+ 1 of the n+ 1 objects\neither by choosing k+1 of the first nobjects or by choos-\ningkof the first nobjects together with the ( n+ 1)th\nobject.\nExample 6.19 Letnbe a positive integer. Show that\n\u0012n\n0\u0013\n+\u0012n\n1\u0013\n+\u00b7\u00b7\u00b7+\u0012n\nn\u22121\u0013\n+\u0012n\nn\u0013\n= 2n.\n6.6 The inclusion/exclusion principle\nWe know that if AandBare disjoint sets then |A\u222aB|=\n|A|+|B|. What if AandBare not disjoint? In counting\n|A|+|B|, we have counted the elements of A\u2229Btwice,\nso if we subtract |A\u2229B|, we will get the right number.\nIn other words,\n|A\u222aB|=|A|+|B| \u2212 |A\u2229B|.\nWhat about three sets A,BandC? As before, in count-\ning|A|+|B|+|C|the elements of A\u2229B,A\u2229C, and\nB\u2229Cwill be counted more than once. If we subtract\u0000\n|A\u2229B|+|A\u2229C|+|B\u2229C|\u0001\n, we will have dealt properly\nwith elements which are in two of the sets. However, ele-\nments of A\u2229B\u2229Cwill have been added three times and\nsubtracted three times, so we must add them in again to\nget\n|A\u222aB\u222aC|=\u0000\n|A|+|B|+|C|\u0001\n\u2212\u0000\n|A\u2229B|+|A\u2229C|+|B\u2229C|\u0001\n+|A\u2229B\u2229C|.\nIn general, let A1, A2, . . . , A nbe sets. Let I={1,2, . . . , n }.\nFor 1\u2a7dk\u2a7dn, letPk={J\u2286I:|J|=k}. Then\n\f\f\fn[\ni=1Ai\f\f\f=nX\nk=1"\n(\u22121)k\u22121X\nJ\u2208Pk\f\f\f\\\ni\u2208JAi\f\f\f#\n. (\u2217)\nThis result is known as the inclusion/exclusion prin-\nciple .\n\n\n\n\n',
      },
      {
        name: "The inclusion/exclusion principle",
        content:
          '114 TOPIC 6. ENUMERATION\nThis is the binomial theorem . We will prove this later,\nusing induction and Fact 3 (below).\nFact 2: For any n\u2208Nandk\u2208 {0,1, . . . , n },\n\u0012n\nk\u0013\n=\u0012n\nn\u2212k\u0013\nand\u0012n\n0\u0013\n=\u0012n\nn\u0013\n= 1.\nThis is because the number of ways of selecting kobjects\nis the same as the number of ways of selecting which n\u2212k\nobjects to omit.\nFact 3 (Pascal\u2019s Identity): For any n\u2208Nandk\u2208\n{0,1, . . . , n },\n\u0012n+ 1\nk+ 1\u0013\n=\u0012n\nk+ 1\u0013\n+\u0012n\nk\u0013\n.\nThis is because we can choose k+ 1 of the n+ 1 objects\neither by choosing k+1 of the first nobjects or by choos-\ningkof the first nobjects together with the ( n+ 1)th\nobject.\nExample 6.19 Letnbe a positive integer. Show that\n\u0012n\n0\u0013\n+\u0012n\n1\u0013\n+\u00b7\u00b7\u00b7+\u0012n\nn\u22121\u0013\n+\u0012n\nn\u0013\n= 2n.\n6.6 The inclusion/exclusion principle\nWe know that if AandBare disjoint sets then |A\u222aB|=\n|A|+|B|. What if AandBare not disjoint? In counting\n|A|+|B|, we have counted the elements of A\u2229Btwice,\nso if we subtract |A\u2229B|, we will get the right number.\nIn other words,\n|A\u222aB|=|A|+|B| \u2212 |A\u2229B|.\nWhat about three sets A,BandC? As before, in count-\ning|A|+|B|+|C|the elements of A\u2229B,A\u2229C, and\nB\u2229Cwill be counted more than once. If we subtract\u0000\n|A\u2229B|+|A\u2229C|+|B\u2229C|\u0001\n, we will have dealt properly\nwith elements which are in two of the sets. However, ele-\nments of A\u2229B\u2229Cwill have been added three times and\nsubtracted three times, so we must add them in again to\nget\n|A\u222aB\u222aC|=\u0000\n|A|+|B|+|C|\u0001\n\u2212\u0000\n|A\u2229B|+|A\u2229C|+|B\u2229C|\u0001\n+|A\u2229B\u2229C|.\nIn general, let A1, A2, . . . , A nbe sets. Let I={1,2, . . . , n }.\nFor 1\u2a7dk\u2a7dn, letPk={J\u2286I:|J|=k}. Then\n\f\f\fn[\ni=1Ai\f\f\f=nX\nk=1"\n(\u22121)k\u22121X\nJ\u2208Pk\f\f\f\\\ni\u2208JAi\f\f\f#\n. (\u2217)\nThis result is known as the inclusion/exclusion prin-\nciple .\n\n\n\n\n6.6. THE INCLUSION/EXCLUSION PRINCIPLE 115\nProof of the inclusion/exclusion principle\nTo prove this result, consider the contribution of a typ-\nical element xofSn\ni=1Aito the right hand side of the\nequation. Suppose that xis in mof the sets, namely\nAi1, Ai2, . . . , A im. First, fix some kwith 1 \u2a7dk\u2a7dn. The\ncontribution of xtoP\nJ\u2208Pk\f\fT\ni\u2208JAi\f\fis the number of\nsets in Pkwhich are subsets of {i1, i2, . . . , i m}, in other\nwords the number of k-element subsets of an m-element\nset, which is\u0000m\nk\u0001\n. In particular, xcontributes nothing if\nk > m . So the total contribution of xto the right hand\nside of ( \u2217) is\nmX\nk=1\u0014\n(\u22121)k\u22121\u0012m\nk\u0013\u0015\n= 1\u2212 mX\nk=0\u0012m\nk\u0013\n(\u22121)k!\n= 1\u2212(1 + (\u22121))m\n= 1\nUsing the inclusion/exclusion principle\nExample 6.20 Suppose that there are 1807 first year\nstudents at Auckland University. Of these, 453 are taking\na course in biology, 567 are taking a course in chemistry,\nand 299 are taking courses in both biology and chemistry.\nHow many are not taking a course in either biology or in\nchemistry?\nExample 6.21 How many numbers between 1 and 1000\nare divisible by 3, 5 or 7?\nSolution. For each n\u2208P=Z\u22651, let Mndenote the set of\nnumbers between 1 and 1000 which are divisible by n. Then |Mn|=\u00041000\nn\u0005\n. Notice that Mm\u2229Mn=Ml, where lis the least common\nmultiple of mandn. By the inclusion/exclusion principle, we have\n|M3\u222aM5\u222aM7|\n=\u0000\n|M3|+|M5|+|M7|\u0001\n\u2212\u0000\n|M3\u2229M5|+|M3\u2229M7|+|M5\u2229M7|\u0001\n+\u0000\n|M3\u2229M5\u2229M7|\u0001\n=\u0000\n|M3|+|M5|+|M7|\u0001\n\u2212\u0000\n|M15|+|M21|+|M35|\u0001\n+\u0000\n|M105|\u0001\n= (333 + 200 + 142) \u2212(66 + 47 + 28) + 9\n= 543\nExample 6.22 Among a group of 200 Auckland Uni-\nversity students, 19 study French, 10 study German, and\n28 study Spanish. If 3 study both French and German,\n8 study both French and Spanish, 4 study both German\n\n\n\n\n116 TOPIC 6. ENUMERATION\nand Spanish, and 1 studies French, German, and Span-\nish, how many of these students are not studying French,\nGerman, or Spanish?\n6.7 The pigeonhole principle\nIn its simplest form, the pigeonhole principle states that\nifmobjects (maybe letters or pigeons) are placed into\nnboxes (called \u201cpigeonholes\u201d), and m > n , then one\npigeonhole must receive at least two objects.\nGeneral pigeonhole principle\nIn general, if the number of objects is more than ktimes\nthe number of pigeonholes, then some pigeonhole must\ncontain at least k+ 1 objects.\nIn general, if the elements of a set with Nelements are\npartitioned into ksubsets, then one of the subsets must\ncontain at least\u0006N\nk\u0007\nelements.\n(Note \u2308 \u2309is the ceiling function. \u2308x\u2309means take the\nsmallest integer which is greater than or equal to x. For\nexample \u23089.1\u2309= 10.)\nProof: Suppose Ais a set with |A|=N, and Ais\npartitioned into subsets A1, A2, . . . , A k. In other words,\nA1, A2, . . . , A kare disjoint sets whose union is the whole\nofA. Let x=N\nk. Suppose that |Ai|< xfor each i. Then\nN=kX\ni=1|Ai|\n<kX\ni=1x\n=kx\n=N\nThis contradiction shows that there must be at least one\nisuch that |Ai| \u2265x. But then, since |Ai|is an integer,\nwe must have |Ai| \u2265 \u2308x\u2309, ie|Ai| \u2265\u0006N\nk\u0007\n, as required.\nExample 6.23 How many students must be in a class\nto guarantee that at least two students receive the same\nscore on the final exam, if the exam is graded on a scale\nfrom 0 to 100 points?\n\n\n\n\n',
      },
      {
        name: "The pigeonhole principle",
        content:
          "116 TOPIC 6. ENUMERATION\nand Spanish, and 1 studies French, German, and Span-\nish, how many of these students are not studying French,\nGerman, or Spanish?\n6.7 The pigeonhole principle\nIn its simplest form, the pigeonhole principle states that\nifmobjects (maybe letters or pigeons) are placed into\nnboxes (called \u201cpigeonholes\u201d), and m > n , then one\npigeonhole must receive at least two objects.\nGeneral pigeonhole principle\nIn general, if the number of objects is more than ktimes\nthe number of pigeonholes, then some pigeonhole must\ncontain at least k+ 1 objects.\nIn general, if the elements of a set with Nelements are\npartitioned into ksubsets, then one of the subsets must\ncontain at least\u0006N\nk\u0007\nelements.\n(Note \u2308 \u2309is the ceiling function. \u2308x\u2309means take the\nsmallest integer which is greater than or equal to x. For\nexample \u23089.1\u2309= 10.)\nProof: Suppose Ais a set with |A|=N, and Ais\npartitioned into subsets A1, A2, . . . , A k. In other words,\nA1, A2, . . . , A kare disjoint sets whose union is the whole\nofA. Let x=N\nk. Suppose that |Ai|< xfor each i. Then\nN=kX\ni=1|Ai|\n<kX\ni=1x\n=kx\n=N\nThis contradiction shows that there must be at least one\nisuch that |Ai| \u2265x. But then, since |Ai|is an integer,\nwe must have |Ai| \u2265 \u2308x\u2309, ie|Ai| \u2265\u0006N\nk\u0007\n, as required.\nExample 6.23 How many students must be in a class\nto guarantee that at least two students receive the same\nscore on the final exam, if the exam is graded on a scale\nfrom 0 to 100 points?\n\n\n\n\n6.7. THE PIGEONHOLE PRINCIPLE 117\nExample 6.24 Suppose that 83 marbles are to put into 9\nbags. Then one bag must receive at least\u000683\n9\u0007\n=\u23089.22\u2309=\n10marbles.\nExample 6.25 How many people must be selected from a\ncollection of fifteen married couples to ensure that at least\ntwo of the persons chosen are married to each other?\nExample 6.26 Choose any five points from the interior\nof an equilateral triangle having sides of length 1. Show\nthat the distance between some pair of these points does\nnot exceed1\n2.\nExample 6.27 Show that, among a collection of n2+ 1\nobjects, there are either n+1which are identical or n+1\nwhich are all different.\nSolution. Letp=\u2018the number of sets of identical objects\u2019.\nThere are now two possibilities, either p\u2264norp > n .\n(i) Suppose that p\u2264n, thenn2+1\np> n, therefore some set of\nidentical objects contains at least n+ 1objects. That is, at least\nn+ 1objects are identical.\n(ii) Suppose that p > n , then there are at least n+1sets of identical\nobjects. That is, at least n+ 1objects are all different.\nHence, among a collection of n2+ 1objects, there are either n+ 1\nwhich are identical or n+ 1which are all different.\n\n\n\n\n118 TOPIC 6. ENUMERATION\n6.8 Trickier pigeonhole applications\nWe now give some examples which show how the pigeon-\nhole principle can be used to solve non-trivial problems.\nExample 6.28 LetA\u2286 {1,2, . . . , 14}with|A|= 6.\nShow that Ahas distinct subsets BandCsuch that the\nsum of the elements of Bequals the sum of the elements\nofC.\nExample 6.29 Assume that in a group of six people,\neach pair of individuals consists of two friends or two\nenemies. Show that there are either three mutual friends\nor three mutual enemies.\nExample 6.30 During a month with 30 days a netball\nteam plays at least 1 game a day, but no more than 45\ngames. Show that there must be a period of some num-\nber of consecutive days during which the team must play\nexactly 14 games.\n\n\n\n\n",
      },
      {
        name: "Trickier pigeonhole applications",
        content:
          "118 TOPIC 6. ENUMERATION\n6.8 Trickier pigeonhole applications\nWe now give some examples which show how the pigeon-\nhole principle can be used to solve non-trivial problems.\nExample 6.28 LetA\u2286 {1,2, . . . , 14}with|A|= 6.\nShow that Ahas distinct subsets BandCsuch that the\nsum of the elements of Bequals the sum of the elements\nofC.\nExample 6.29 Assume that in a group of six people,\neach pair of individuals consists of two friends or two\nenemies. Show that there are either three mutual friends\nor three mutual enemies.\nExample 6.30 During a month with 30 days a netball\nteam plays at least 1 game a day, but no more than 45\ngames. Show that there must be a period of some num-\nber of consecutive days during which the team must play\nexactly 14 games.\n\n\n\n\nDeterministic Finite Automata\n7.1 Alphabet and strings\nAlphabet\nLet \u03a3 be a finite alphabet. When \u03a3 contains kletters, we\nsay \u03a3 is a k-letter alphabet . A 1-letter alphabet is a unary\nalphabet , and a 2-letter alphabet is a binary alphabet .\nOur typical binary alphabet is {a, b}. A finite sequence\nof symbols from \u03a3 is called a string orword.\nStrings\nEach string vis of the form \u03c31\u03c32. . . \u03c3 n,where \u03c3i\u2208\u03a3.\nThelength ofv, denoted by |v|, is the number of symbols\nit has. Thus, |abb|= 3,|baba|= 4, and |a|= 1.\nThe string of length 0 is called the empty string . It is\ndenoted \u03bb.\nThere are knstrings of length nover a k-letter alphabet.\nConcatenation operation\nThe set of all strings over the alphabet \u03a3 is\n\u03a3\u22c6={\u03c31\u03c32. . . \u03c3 m|\u03c31, \u03c32, . . . , \u03c3 m\u2208\u03a3, m\u2208N}.\nWe denote strings by the letters u, v, w, . . . .\nThe concatenation ofuandvis obtained by writing u\nfollowed by v. Concatenation is denoted by u\u00b7v. We\nhave:\nu\u00b7(v\u00b7w) = (u\u00b7v)\u00b7w.\nNote that for any string u, because \u03bbis the empty string,\nwe have \u03bb\u00b7u=u\u00b7\u03bb=u.\nWe sometime write uv, instead of u\u00b7v.\nSubstrings\nFor a string uwe denote by unthe following string:\nun=u\u00b7u\u00b7. . .\u00b7u.|{z}\nn times\nIf a string woccurs in a string u, we say that wis a\nsubstring ofu. That is, wis a substring of uifu=u1wu2\nfor some strings u1andu2. One can see that every string\nuis a substring of itself (take u1=u2=\u03bb).\nA string wis aprefix of a string uifucan be written as\nwu1.\nFor example, The prefixes of aabbba are\u03bb,a,aa,aab,\naabb,aabbb andaabbba .\n119\n\n\n\n\n",
      },
    ],
  },
  {
    name: "Deterministic Finite Automata",
    definition: {
      simple:
        "\n\nA deterministic finite automaton (DFA) is a theoretical model of computation that is used in automata theory and formal language theory. It is a mathematical structure consisting of a set of states, a set of input symbols, a transition function, an initial state, and a set of final states. DFAs operate on a finite string of input symbols and, for each input symbol, transition from one state to another according to the transition function. The automaton halts and accepts the input string if it reaches a final state after processing all input symbols. DFAs are a fundamental concept in computer science, and are used in the design of regular expressions, lexical analyzers, and compilers.",
    },
    childs: [
      {
        name: "Alphabet and strings",
        content:
          "Deterministic Finite Automata\n7.1 Alphabet and strings\nAlphabet\nLet \u03a3 be a finite alphabet. When \u03a3 contains kletters, we\nsay \u03a3 is a k-letter alphabet . A 1-letter alphabet is a unary\nalphabet , and a 2-letter alphabet is a binary alphabet .\nOur typical binary alphabet is {a, b}. A finite sequence\nof symbols from \u03a3 is called a string orword.\nStrings\nEach string vis of the form \u03c31\u03c32. . . \u03c3 n,where \u03c3i\u2208\u03a3.\nThelength ofv, denoted by |v|, is the number of symbols\nit has. Thus, |abb|= 3,|baba|= 4, and |a|= 1.\nThe string of length 0 is called the empty string . It is\ndenoted \u03bb.\nThere are knstrings of length nover a k-letter alphabet.\nConcatenation operation\nThe set of all strings over the alphabet \u03a3 is\n\u03a3\u22c6={\u03c31\u03c32. . . \u03c3 m|\u03c31, \u03c32, . . . , \u03c3 m\u2208\u03a3, m\u2208N}.\nWe denote strings by the letters u, v, w, . . . .\nThe concatenation ofuandvis obtained by writing u\nfollowed by v. Concatenation is denoted by u\u00b7v. We\nhave:\nu\u00b7(v\u00b7w) = (u\u00b7v)\u00b7w.\nNote that for any string u, because \u03bbis the empty string,\nwe have \u03bb\u00b7u=u\u00b7\u03bb=u.\nWe sometime write uv, instead of u\u00b7v.\nSubstrings\nFor a string uwe denote by unthe following string:\nun=u\u00b7u\u00b7. . .\u00b7u.|{z}\nn times\nIf a string woccurs in a string u, we say that wis a\nsubstring ofu. That is, wis a substring of uifu=u1wu2\nfor some strings u1andu2. One can see that every string\nuis a substring of itself (take u1=u2=\u03bb).\nA string wis aprefix of a string uifucan be written as\nwu1.\nFor example, The prefixes of aabbba are\u03bb,a,aa,aab,\naabb,aabbb andaabbba .\n119\n\n\n\n\n120 TOPIC 7. DETERMINISTIC FINITE AUTOMATA\nLanguages\nAlanguage over an alphabet \u03a3 is a subset of \u03a3\u22c6.\nHere are some examples of languages:\n1.\u2205, \u03a3\u22c6,{an|n\u2208N},{aba, bab }.\n2.{w\u2208 {a, b}\u22c6|babis a substring of w}.\n3.{w\u2208\u03a3\u22c6|whas even length }.\n4.{w\u2208\u03a3\u22c6|whas a substring aba}.\nWe denote languages by U,V,W,L,. . ..\n7.2 Operations on languages\nBoolean operations\nLetUandVbe languages over an alphabet \u03a3. The\nfollowing operations on languages are called Boolean op-\nerations :\n1. The union ofUandVisU\u222aV,\n2. The intersection ofUandVis isU\u2229V,\n3. The complement ofUis \u03a3\u22c6\\U.\nConcatenation operation\nLetUandWbe languages on some alphabet set \u03a3. The\nconcatenation ofUandW, denoted by U\u00b7W, is the\nlanguage U\u00b7W={u\u00b7w|u\u2208U, w\u2208W}.\nExample 7.1 LetU={aba, bab }andW={aab, bba }.\nThen U\u00b7W={abaaab, ababba, babaab, babbba }.\nDeterministic finite automata\nLetUbe a language over an alphabet \u03a3. Suppose we\nare given a string v, and we would like to check whether\nvbelongs to U. Adeterministic finite automaton (DFA)\nis an algorithm that determines whether vbelongs to U\nor not.\nWe can represent a finite automata as a labeled directed\ngraph. We call this graph the transition diagram .\n\n\n\n\n",
      },
      {
        name: "Operations on languages",
        content:
          "120 TOPIC 7. DETERMINISTIC FINITE AUTOMATA\nLanguages\nAlanguage over an alphabet \u03a3 is a subset of \u03a3\u22c6.\nHere are some examples of languages:\n1.\u2205, \u03a3\u22c6,{an|n\u2208N},{aba, bab }.\n2.{w\u2208 {a, b}\u22c6|babis a substring of w}.\n3.{w\u2208\u03a3\u22c6|whas even length }.\n4.{w\u2208\u03a3\u22c6|whas a substring aba}.\nWe denote languages by U,V,W,L,. . ..\n7.2 Operations on languages\nBoolean operations\nLetUandVbe languages over an alphabet \u03a3. The\nfollowing operations on languages are called Boolean op-\nerations :\n1. The union ofUandVisU\u222aV,\n2. The intersection ofUandVis isU\u2229V,\n3. The complement ofUis \u03a3\u22c6\\U.\nConcatenation operation\nLetUandWbe languages on some alphabet set \u03a3. The\nconcatenation ofUandW, denoted by U\u00b7W, is the\nlanguage U\u00b7W={u\u00b7w|u\u2208U, w\u2208W}.\nExample 7.1 LetU={aba, bab }andW={aab, bba }.\nThen U\u00b7W={abaaab, ababba, babaab, babbba }.\nDeterministic finite automata\nLetUbe a language over an alphabet \u03a3. Suppose we\nare given a string v, and we would like to check whether\nvbelongs to U. Adeterministic finite automaton (DFA)\nis an algorithm that determines whether vbelongs to U\nor not.\nWe can represent a finite automata as a labeled directed\ngraph. We call this graph the transition diagram .\n\n\n\n\n7.2. OPERATIONS ON LANGUAGES 121\nFormal definition of a DFA\nDefinition 7.1 A deterministic finite automaton (DFA)\nis a5-tuple (S, q0, T, F, \u03a3), where\n\u0088Sis the set of states .\n\u0088Tis the transition function T:S\u00d7\u03a3\u2192S.\n\u0088Fis a subset of Scalled the set of accepting states .\n\u0088\u03a3is an alphabet.\n\u0088q0is the initial state . Note that q0\u2208S.\nExample 7.2 Let us look at the language Uthat consists\nof all strings usuch that ucontains the substring baa.\nWe want to design an algorithm that, given a string v,\ndetermines whether v\u2208U. Below is the Find -baa(v)-\nalgorithm that on input\nv=\u03c31. . . \u03c3 n\ndetermines if vcontains baaas a sub-string (and if it\ndoes, then v\u2208U).\nFind-baa(v)-algorithm\nThe algorithm makes its transitions from one state to\nanother depending on the input symbol \u03c3read. The\ntransition function is T:{0,1,2,3}\u00d7{a, b} \u2192 { 0,1,2,3}\ngiven by the following Table.\na b\n0 0 1\n1 2 1\n2 3 1\n3 3 3\nWe can represent a finite automata as a labeled directed\ngraph. We call this graph transition diagram . Therefore\nwe have the following transition diagram for the Find -\nbaa(v)-algorithm.\nAs a program, the algorithm Find-baa is the following:\n1. Initialize variables i= 1 and state = 0.\n\n\n\n\n122 TOPIC 7. DETERMINISTIC FINITE AUTOMATA\n2. If state = 0 and \u03c3i=athen set state = 0.\n3. If state = 0 and \u03c3i=bthen set state = 1.\n4. If state = 1 and \u03c3i=athen set state = 2.\n5. If state = 1 and \u03c3i=bthen set state = 1.\n6. If state = 2 and \u03c3i=athen set state = 3.\n7. If state = 2 and \u03c3i=bthen set state = 1.\n8. If state = 3 and \u03c3i\u2208 {a, b}then state = 3.\n9. Increment iby one.\n10. If i=n+ 1 then go to Line 11. Otherwise go to\nLine 2.\n11. If state = 3 then output accept . Otherwise output\nreject .\nExample 7.3 What is the transition table for the follow-\ning transition diagram?\n01 2\n34 56\n78a\nbaba\nb\nab ba\naba\nbb\naba\nRuns and acceptance\nLetM= (S, q0, T, F, \u03a3) be a DFA and u=\u03c31. . . \u03c3 nbe\na string. The runof the automaton on uis the sequence\nof states s1, s2, . . . , s n, sn+1such that s1is the initial\nstate and T(si, \u03c3i) =si+1for all i= 1, . . . , n .\nThe run of Mon a string u=\u03c31. . . \u03c3 ncan be viewed of\nas the execution the following algorithm Run(M, u):\n1. Initialize s=q0,i= 1, and print s.\n2.While i\u2264ndo\n(a) Set \u03c3=\u03c3i.\n(b) Set s=T(s, \u03c3).\n(c) Print s.\n(d) Increment i\n\n\n\n\n7.2. OPERATIONS ON LANGUAGES 123\nLetM= (S, q0, T, F, \u03a3) be a DFA and u=\u03c31. . . \u03c3 nbe a\nstring. We say that Maccepts uif the run s1, . . . , s n, sn+1\nofMonuis such that the last state sn+1\u2208F. Such a\nrun is called an accepting run .\nDFA recognizable languages\nLetM= (S, q0, T, F, \u03a3) be a DFA. The language ac-\ncepted by M, denoted by L(M), is the language L(M) =\n{w|the automaton Maccepts w}.\nA language L\u2286\u03a3\u22c6isDFA recognizable if there exists a\nDFAMsuch that L=L(M).\nExample 7.4 Consider a DFA with exactly one state.\nIf the state is an accepting state, then the automaton\naccepts the language \u03a3\u22c6. If the state is not an accepting\nstate, then the automaton recognizes the empty language\n\u2205.\nExample 7.5 Consider the language L={u}consisting\nof one word u=\u03c31. . . \u03c3 n.\nThis language Lis recognized by the following DFA (S,0, T, F ):\n1.S={0,1,2,3,4, . . . , n + 1}with 0being the initial\nstate.\n2. For all i\u2264n\u22121,T(i, \u03c3i+1) =i+ 1. In other cases\nT(s, \u03c3) =n+ 1.\n3. The accepting state is n.\n\n\n\n\n124 TOPIC 7. DETERMINISTIC FINITE AUTOMATA\nExample 7.6 Describe languages accepted by the DFA\nbelow:\n\n\n\n\n\n7.3. DESIGNING FINITE AUTOMATA 125\n7.3 Designing finite automata\nGiven a language L, we would like design a deterministic\nfinite automata that recognizes the language L. But can\nwe always do so? And if so, how?\nFor example, let us consider the language L={abna|\nn\u2208N}. Is there a DFA recognising L?\nExample 7.7 Consider the language L={u|u\u2208\n{a, b}\u22c6such that ucontains an odd number of a\u2019s and\nan even number of b\u2019s}.\nOur problem is to design a DFA recognizing this lan-\nguage.\nOne way of doing so, is to count the number of a\u2019s and\nb\u2019s in each given word. But we don\u2019t really need to count\nthe number of a\u2019s and b\u2019s. We just need to keep track\nof four cases: whether the number of a\u2019s is odd or even,\nand whether the number of b\u2019s is odd or even. We can\ndo this with four states:\nState 0: Even number of a\u2019s and b\u2019s.\nStete 1: Even number of a\u2019s and odd number of b\u2019s .\nState 2: Odd number of a\u2019s and b\u2019s.\nState 3: Odd number of a\u2019s and even number of b\u2019s.\nWe get the following transition diagram:\n0 1 23ba\nb a\nbb a\na\n\n\n\n\n",
      },
      {
        name: "Designing finite automata",
        content:
          "7.3. DESIGNING FINITE AUTOMATA 125\n7.3 Designing finite automata\nGiven a language L, we would like design a deterministic\nfinite automata that recognizes the language L. But can\nwe always do so? And if so, how?\nFor example, let us consider the language L={abna|\nn\u2208N}. Is there a DFA recognising L?\nExample 7.7 Consider the language L={u|u\u2208\n{a, b}\u22c6such that ucontains an odd number of a\u2019s and\nan even number of b\u2019s}.\nOur problem is to design a DFA recognizing this lan-\nguage.\nOne way of doing so, is to count the number of a\u2019s and\nb\u2019s in each given word. But we don\u2019t really need to count\nthe number of a\u2019s and b\u2019s. We just need to keep track\nof four cases: whether the number of a\u2019s is odd or even,\nand whether the number of b\u2019s is odd or even. We can\ndo this with four states:\nState 0: Even number of a\u2019s and b\u2019s.\nStete 1: Even number of a\u2019s and odd number of b\u2019s .\nState 2: Odd number of a\u2019s and b\u2019s.\nState 3: Odd number of a\u2019s and even number of b\u2019s.\nWe get the following transition diagram:\n0 1 23ba\nb a\nbb a\na\n\n\n\n\n126 TOPIC 7. DETERMINISTIC FINITE AUTOMATA\n7.4 Automata for operations on languages\nUnion automata\nLetM1= (S1, q(1)\n0, T1, F1) and M2= (S2, q(2)\n0, T2, F2),\nand let two DFA recognizing L1=L(M1) and L2=\nL(M2).\nThe Union Problem : Design a DFA M= (S, q0, T, F )\nthat recognizes L1\u222aL2.\nConstruction of DFA M= (S, q0, T, F )forL1\u222aL2\n1. The set Sof states is S1\u00d7S2.\n2. The initial state is the pair ( q(1)\n0, q(2)\n0).\n3. The transition function Tis the product of the\ntransition functions T1andT2, that is:\nT((p, q), \u03c3) = (T1(p, \u03c3), T2(q, \u03c3)),\nwhere p\u2208S1,q\u2208S2, and \u03c3\u2208\u03a3.\n4. The set Fof final states consists of all pairs ( p, q)\nsuch that either p\u2208F1orq\u2208F2.\nThe notation for the new automaton is: M1\u2295 M 2.\nWhy does the construction work?\nIfu\u2208L1\u222aL2then either M1accepts uorM2accepts\nu. In either case, since Msimulates both M1andM2,\nthe string umust be accepted by M.\nIfuis accepted by Mthen the run of Monuis split\ninto two runs: one is the run of M1onuand the other\nis the run of M2onu. Since Maccepts u, it must be\nthe case that one of the runs is accepting.\nIntersection automata\nLetM1= (S1, q(1)\n0, T1, F1) and M2= (S2, q(2)\n0, T2, F2),\nand let two DFA recognizing L1=L(M1) and L2=\nL(M2).\nThe intersection problem : Design a DFA M= (S, q0, T, F )\nthat recognizes L1\u2229L2.\nConstruction of DFA M= (S, q0, T, F )forL1\u2229L2\n1. The set Sof states is S1\u00d7S2.\n2. The initial state is the pair ( q(1)\n0, q(2)\n0).\n3. The transition function Tis the product of the\ntransition functions T1andT2, that is:\nT((p, q), \u03c3) = (T1(p, \u03c3), T2(q, \u03c3)),\nwhere p\u2208S1,q\u2208S2, and \u03c3\u2208\u03a3.\n4. The set Fof final states consists of all pairs ( p, q)\nsuch that p\u2208F1andq\u2208F2.\nThe notation for the automaton Mis this: M1\u2297 M 2.\n\n\n\n\n",
      },
      {
        name: "Automata for operations on languages",
        content:
          "126 TOPIC 7. DETERMINISTIC FINITE AUTOMATA\n7.4 Automata for operations on languages\nUnion automata\nLetM1= (S1, q(1)\n0, T1, F1) and M2= (S2, q(2)\n0, T2, F2),\nand let two DFA recognizing L1=L(M1) and L2=\nL(M2).\nThe Union Problem : Design a DFA M= (S, q0, T, F )\nthat recognizes L1\u222aL2.\nConstruction of DFA M= (S, q0, T, F )forL1\u222aL2\n1. The set Sof states is S1\u00d7S2.\n2. The initial state is the pair ( q(1)\n0, q(2)\n0).\n3. The transition function Tis the product of the\ntransition functions T1andT2, that is:\nT((p, q), \u03c3) = (T1(p, \u03c3), T2(q, \u03c3)),\nwhere p\u2208S1,q\u2208S2, and \u03c3\u2208\u03a3.\n4. The set Fof final states consists of all pairs ( p, q)\nsuch that either p\u2208F1orq\u2208F2.\nThe notation for the new automaton is: M1\u2295 M 2.\nWhy does the construction work?\nIfu\u2208L1\u222aL2then either M1accepts uorM2accepts\nu. In either case, since Msimulates both M1andM2,\nthe string umust be accepted by M.\nIfuis accepted by Mthen the run of Monuis split\ninto two runs: one is the run of M1onuand the other\nis the run of M2onu. Since Maccepts u, it must be\nthe case that one of the runs is accepting.\nIntersection automata\nLetM1= (S1, q(1)\n0, T1, F1) and M2= (S2, q(2)\n0, T2, F2),\nand let two DFA recognizing L1=L(M1) and L2=\nL(M2).\nThe intersection problem : Design a DFA M= (S, q0, T, F )\nthat recognizes L1\u2229L2.\nConstruction of DFA M= (S, q0, T, F )forL1\u2229L2\n1. The set Sof states is S1\u00d7S2.\n2. The initial state is the pair ( q(1)\n0, q(2)\n0).\n3. The transition function Tis the product of the\ntransition functions T1andT2, that is:\nT((p, q), \u03c3) = (T1(p, \u03c3), T2(q, \u03c3)),\nwhere p\u2208S1,q\u2208S2, and \u03c3\u2208\u03a3.\n4. The set Fof final states consists of all pairs ( p, q)\nsuch that p\u2208F1andq\u2208F2.\nThe notation for the automaton Mis this: M1\u2297 M 2.\n\n\n\n\n7.4. AUTOMATA FOR OPERATIONS ON LANGUAGES 127\nComplementation automata\nThe complementation problem :\nGiven a DFA M= (S, q0, T, F ), design a DFA that rec-\nognizes the complement of L(M).\nThis is a simple procedure. Keep the original states,\nthe initial state, and the transition function T. Swap:\nDeclare non-accepting states as accepting, and accepting\nstates non-accepting.\n\n\n\n\n128 TOPIC 7. DETERMINISTIC FINITE AUTOMATA\n\n\n\n\nCodes\n8.1 Prefix codes and optimal binary trees\nCodewords\nTo represent symbols, computers use strings of 0\u2019s and\n1\u2019s called codewords . For example, in the ASCII (Amer-\nican Standard Code for Information Interchange) code,\nthe letter A is represented by the codeword 01000001, B\nby 01000010, and C by 01000011. In this system each\nsymbol is represented by some string of eight bits, where\na bit is either a 0 or a 1. To translate a long string of\n0\u2019s and 1\u2019s into its ASCII symbols we use the following\nprocedure: Find the ASCII symbol represented by the\nfirst 8 bits, the ASCII symbol represented by the second\n8 bits, etc. For example, 010000110100000101000010 is\ndecoded as CAB.\nFor many purposes this kind of representation works well.\nHowever, there are situations, as in large-volume stor-\nage, where this is not an efficient method. In a fixed\nlength representation, such as ASCII, every symbol is\nrepresented by a codeword of the same length. A more\nefficient approach is to use codewords of variable lengths,\nwhere the symbols used most often have shorter code-\nwords than the symbols used less frequently. For exam-\nple, in normal English usage the letters E, T, A, and O\nare used much more frequently than the letters Q, J, X,\nand Z.\nExample 8.1 The most frequently used letters in English\nare, in order: E, T, A, O, I, N, S, H, R, D, . . .. The\nsimplest way to assign the shortest codewords to the most\nfrequently used symbols is by the following table.\nETA O IN S H R D\n0100 01 10 11 000 001 010 011\nIn this way we have assigned the shortest possible code-\nwords to the most frequently used letters and longer\ncodewords to the other letters. This appears to be a\nmore efficient approach than assigning all these letters a\ncodeword of the same fixed length, which would have to\nbe three or more.\nBut how can we decode a string of 0\u2019s and 1\u2019s? For exam-\nple, how should the string 0110110 be decoded? Should\nwe start by looking at only the first digit, or the first two,\nor the first three? Depending upon the number of digits\nused, the first letter could be E, O, D or something else.\nWe see that in order to use variable length codewords we\n129\n\n\n\n\n",
      },
    ],
  },
  {
    name: "Codes",
    definition: {
      simple:
        "\n\nCodes are systematic sets of symbols or instructions used to represent or transmit information. They can be used in communication, programming, encryption, and other applications. Codes may include combinations of letters, numbers, symbols, or other elements that are arranged in a specific way to convey meaning or instructions. Different types of codes include bar codes, QR codes, HTML codes, genetic codes, and more.",
    },
    childs: [
      {
        name: "Prefix codes and optimal binary trees",
        content:
          "Codes\n8.1 Prefix codes and optimal binary trees\nCodewords\nTo represent symbols, computers use strings of 0\u2019s and\n1\u2019s called codewords . For example, in the ASCII (Amer-\nican Standard Code for Information Interchange) code,\nthe letter A is represented by the codeword 01000001, B\nby 01000010, and C by 01000011. In this system each\nsymbol is represented by some string of eight bits, where\na bit is either a 0 or a 1. To translate a long string of\n0\u2019s and 1\u2019s into its ASCII symbols we use the following\nprocedure: Find the ASCII symbol represented by the\nfirst 8 bits, the ASCII symbol represented by the second\n8 bits, etc. For example, 010000110100000101000010 is\ndecoded as CAB.\nFor many purposes this kind of representation works well.\nHowever, there are situations, as in large-volume stor-\nage, where this is not an efficient method. In a fixed\nlength representation, such as ASCII, every symbol is\nrepresented by a codeword of the same length. A more\nefficient approach is to use codewords of variable lengths,\nwhere the symbols used most often have shorter code-\nwords than the symbols used less frequently. For exam-\nple, in normal English usage the letters E, T, A, and O\nare used much more frequently than the letters Q, J, X,\nand Z.\nExample 8.1 The most frequently used letters in English\nare, in order: E, T, A, O, I, N, S, H, R, D, . . .. The\nsimplest way to assign the shortest codewords to the most\nfrequently used symbols is by the following table.\nETA O IN S H R D\n0100 01 10 11 000 001 010 011\nIn this way we have assigned the shortest possible code-\nwords to the most frequently used letters and longer\ncodewords to the other letters. This appears to be a\nmore efficient approach than assigning all these letters a\ncodeword of the same fixed length, which would have to\nbe three or more.\nBut how can we decode a string of 0\u2019s and 1\u2019s? For exam-\nple, how should the string 0110110 be decoded? Should\nwe start by looking at only the first digit, or the first two,\nor the first three? Depending upon the number of digits\nused, the first letter could be E, O, D or something else.\nWe see that in order to use variable length codewords we\n129\n\n\n\n\n130 TOPIC 8. CODES\nneed to select representations that permit unambiguous\ndecoding.\nPrefix property and prefix codes\nA way to do this is to construct codewords so that no\ncodeword is the first part of any other codeword. Such a\nset of codewords is said to have the prefix property . This\nproperty is not enjoyed by the above choice of codewords\nsince the codeword for T is also the first part of the code-\nword for N. On the other hand, the set of codewords\nS={000,001,01,10,11}has the prefix property since\nno codeword appears as the first part of another code-\nword. The method to decode a string of 0\u2019s and 1\u2019s into\ncodewords having the prefix property is to read one digit\nat a time until this string of digits becomes a codeword,\nthen repeat the process starting with the next digit, and\ncontinue until the decoding is done.\nExample 8.2 Using the set of codewords Sabove, decode\nthe string 001100100011.\nAn efficient method of representation should use code-\nwords such that :\n1. the codewords have the prefix property; and\n2. the symbols used frequently have shorter codewords\nthan those used less often.\nUsing a binary tree to construct prefix codes\nA full binary tree can be used to construct a set of code-\nwords with the prefix property by assigning 0 to each\nedge from a parent to its left child and 1 to each edge\nfrom a parent to its right child. Following the unique di-\nrected path from the root to a terminal vertex will give a\nstring of 0\u2019s and 1\u2019s. The set of all strings formed in this\nway will be a set of codewords with the prefix property,\nbecause corresponding to any codeword we can find the\nunique directed path by working down from the root of\nthe binary tree, going left or right accordingly as each\ndigit is 0 or 1. By definition we finish at a terminal\nvertex, and so this codeword cannot be the first part of\nanother codeword.\n\n\n\n\n8.1. PREFIX CODES AND OPTIMAL BINARY TREES 131\nExample 8.3 For the binary tree in the figure below,\nassign 0\u2019s and 1\u2019s to its edges as implied above. What\ncodewords are produced?\n/0 /1 /0 /1/0 /1 /0 /1 /0 /1 /0 /1/0 /1 /0 /1/0 /1\nBy using a binary tree we have found a way to produce\ncodewords that have the prefix property. It remains to\nfind a method for assigning shorter codewords to the\nmore frequently used symbols.\nExample 8.4 For the codewords produced in the previous\nexample, which should be used for the more frequently\nused symbols?\nNotice that these codewords correspond to the terminal\nvertices that are closest to the root. Thus, to obtain\nan efficient method for representing symbols by variable\nlength codewords, we can use a binary tree and assign\nthe most frequently used symbols to the terminal vertices\nthat are closest to the root.\nWeighted trees\nSuppose w1,w2,. . .,wkare nonnegative real numbers. A\nbinary tree for the weights w1,w2,. . .,wkis a binary tree\nwith kterminal vertices labeled w1, w2, . . . , w k. A bi-\nnary tree for the weights w1, w2, . . . , w khastotal weight\nd1w1+d2w2+\u00b7\u00b7\u00b7+dkwk, where diis the length of\nthe directed path from the root to the vertex labeled\nwi(i= 1, . . . , k ).\n\n\n\n\n132 TOPIC 8. CODES\nExample 8.5 What are the total weights of the binary\ntrees shown below?\n/0/0\n/1/1\n/0/0\n/1/1\n/0/0\n/1/1/0/0/1/1 /0/0/1/1 /0/0/1/1 /0/0/1/1/0/0/1/1 /0/0/1/1/0/0/1/1 /0/0/1/1\n/0/0/1/1\n/0/0/1/1/0/0/1/1\n3 53 9 5 6 69\nFor the coding problem we want to find a binary tree of\nsmallest possible total weight in which the frequencies of\nthe symbols to be encoded are the weights. A binary tree\nfor the weights w1, w2, . . . , w kis called an optimal binary\ntree for the weights w1, w2, . . . , w kwhen its total weight\nis as small as possible.\nThe following algorithm due to David A. Huffman pro-\nduces an optimal binary tree for the weights w1, w2, . . . , w k.\nThe idea is to create a binary tree by using the two small-\nest weights, say w1andw2, replace w1andw2byw1+w2\nin the list of weights, and then repeat the process.\nHuffman\u2019s optimal binary tree algorithm\nFor nonnegative real numbers w1, w2, . . . , w k, this algo-\nrithm constructs an optimal binary tree for the weights\nw1, w2, . . . , w k.\nStep 1 (select smallest weights). If there are two or\nmore weights in the list of weights, select the two\nsmallest weights, say VandW. (Ties can be bro-\nken arbitrarily.) Otherwise, we are done.\nStep 2 (make binary tree). Construct a binary tree with\nthe root assigned the label V+W, its left child as-\nsigned the label V, and its right child assigned the\nlabel W. Include in this construction any binary\ntrees that have the labels VorWassigned to a\nroot. Replace VandWin the list of weights by\nV+W. Go to step 1.\n\n\n\n\n8.2. INTRODUCTION TO ERROR-CORRECTING CODES 133\nExample 8.6 Construct the optimal binary tree for the\nweights 2, 3, 4, 7, 8. What is the total weight of this\ntree?\nIn order to find codewords with the prefix property such\nthat the most frequently used symbols are assigned the\nshortest codewords, we construct an optimal binary tree\nwith the stated frequencies of the symbols as its weights.\nThen by assigning 0\u2019s and 1\u2019s to the edges of this tree\nas described previously, codewords can be efficiently as-\nsigned to the various symbols.\nExample 8.7 Suppose the characters E, T, A, Q, and Z\nhave expected usage rates of 32, 28, 20, 4, and 1, respec-\ntively. Construct an efficient assignment of prefix codes\nto these characters.\nExample 8.8 Given a text, let wibe the number of oc-\ncurrences of the i-th symbol. Suppose a binary tree for\nthose weights has total weight W=P\nidiwi. If we en-\ncode our text using the corresponding prefix code, then\nthe resulting file has length W. (So it is shortest when\nwe minimize W.)\n8.2 Introduction to error-correcting codes\nWhen a radio message is sent through space, interference\nwith the transmission of a single letter or character may\nresult in the receipt of an incorrect communication.\nIf the message NEXT STOP JOME is received, it may\nbe clear that this was not the intended message. Perhaps\nthe actual message was NEXT STOP ROME or NEXT\nSTOP NOME, or something else.\nIt is often essential that a message be received as in-\ntended. For this reason, such messages are rarely sent\nin English (or French or German or any other common\nlanguage), since transmission error often results in a mis-\ninterpretation.\nAlphabets and words\nTo ensure the accuracy of a message, it is useful to encode\nit, that is, to use a new language in which it is less likely\nthat two words will be confused with each other.\nDefinition 8.1 For an integer b\u22652, the set\nA={0,1, . . . , b \u22121}\nofbsymbols is an alphabet . An ordered n-tuple of sym-\nbols in Ais called a word of length nor simply an n-word\n(over A.)\n\n\n\n\n134 TOPIC 8. CODES\nThe Hamming distance\nDefinition 8.2 For two n-words xandy, the distance\nd(x, y), often called the Hamming distance , between x\nandyis the number of coordinates at which xandy\ndiffer.\nExample 8.9 Letx= 0101101 ,y= 1011110 andz=\n0111101 . Then d(x, y) = 5 , d(x, z) = 1 , d(y, z) = 4 .\nTheorem 8.1 The Hamming distance has the following\nproperties.\n1.d(u, v)\u22650, and d(u, v) = 0 if and only if u=v;\n2.d(u, v) =d(v, u)for all u, v\u2208V(G);\n3.d(u, v)\u2264d(u, w) +d(w, v)for all u, v, w \u2208V(G)\n(The triangle inequality)\nProof: See lecture.\nCodes\nDefinition 8.3 Letnbe a positive integer and Aan al-\nphabet of belements. A fixed-length code Cis a collec-\ntion of words of length noverA. The fixed-length code C\nis also called an (n, b)-code. Ifb= 2, then Cis abinary\ncode.\nExample 8.10 Give an example of a (6,2)-code.\nDistance of a code\nDefinition 8.4 Thedistance d(C)ofCis\nd(C) = min {d(x, y)},\nwhere the minimum is taken over all pairs x, yof distinct\ncode words.\n\n\n\n\n8.2. INTRODUCTION TO ERROR-CORRECTING CODES 135\nExample 8.11 What is the distance of the following\ncode?\nC={000000 ,001101 ,010011 ,100101 }.\nThe challenge in coding theory is to construct a code that\n1. uses as simple an alphabet as possible to facilitate\ntransmission of messages,\n2. uses a sufficiently large nso that many code words\nare available and so that there is a great enough\ndistance between every two code words, and\n3. uses a sufficiently small nto simplify transmission\nof messages.\nExample 8.12 Suppose a code word of the code in the\nprevious example is transmitted, but that one symbol gets\nchanged. If the received word is\n110011\nthen what word was sent?\nt-error correcting codes\nWe now turn to the problem of constructing codes. Ide-\nally, a code should be constructed so that even if a small\nnumber of errors do occur due to interference, the mes-\nsage can still be understood.\nDefinition 8.5 A code is t-error correcting if, whenever\na code word xis transmitted, then xis the unique code\nword closest to the word received, even when up to ter-\nrors have occurred in the transmission of x.\nExample 8.13 LetC={00000 ,11111}. Then Cis a\n2-error correcting code. (This is not an efficient code!)\nWe assume that if there is a unique code word at mini-\nmum distance from the received word, then the received\nword was intended to be the code word.\n\n\n\n\n136 TOPIC 8. CODES\nWhat can we say about d(C)?\nExample 8.14 Suppose that an (n, b)-code is 1-error\ncorrecting. Is it possible for two code words to be at dis-\ntance 1? Is it possible for two code words to be at distance\n2?\nTheorem 8.2 A code Cist-error correcting if and only\nifd(C)\u22652t+ 1.\nProof: See lecture.\nPerfect codes\nIf an ( n, b)-code Cist-error correcting, there is a limit\non how many code words Ccan contain.\nTheorem 8.3 IfCis a t-error correcting (n, b)-code,\nthen\n|C| \u2264\u0016bn\ns\u0017\n,\nwhere\ns=\u0012n\n0\u0013\n+\u0012n\n1\u0013\n(b\u22121)+\u0012n\n2\u0013\n(b\u22121)2+\u00b7\u00b7\u00b7+\u0012n\nt\u0013\n(b\u22121)t.\nDefinition 8.6 At-error correcting (n, b)-code Cisper-\nfectif|C|=bn/s, where sis given by the above the-\norem. (That is, for every n-word wover the alphabet\n{0,1, . . . , b \u22121}, there is exactly one code word in C\nwithin a distance of at most tfrom w.)\nA graphical representation of codes\nConsider the graph Gon{0,1, . . . , b \u22121}nwhere there\nis an edge between vertices u= (u1, u2, . . . , u n) and v=\n(v1, v2, . . . , v n) if and only if ui\u0338=vifor exactly one i\n(1\u2264i\u2264n). A code can be considered as a subset of G.\nExample 8.15 How many vertices does Ghave? De-\nscribe the graph when b= 2.\nThe Hamming distance between two code words is the\nsame as the length of the shortest path in Gbetween the\ntwo corresponding vertices. For a good code (i.e., one\nwith a large distance), the code words are placed at suit-\nably selected vertices of Gso that the minimum distance\namong all pairs of code words is as large as possible.\n\n\n\n\n8.3. RSA PUBLIC-KEY CRYPTOSYSTEM 137\n8.3 RSA public-key cryptosystem\nConsider the following problems:\n1. PRIME: Is na prime number?\n2. COMPOSITE: Is na composite number?\n3. FACTORIZE: Find a, b < n , if possible, such that\nn=ab. Otherwise report that none exist (and\nthat, for n\u22652,nis prime.)\nWe have listed problems in this form in order to pinpoint\nthe difference between COMPOSITE and FACTORIZE,\nwhich at first sight look as if they might be the same.\nActually it is the first two, PRIME and COMPOSITE\nthat are identical in their complexity.\nAlthough FACTORIZE may look the same as COMPOS-\nITE, it is in reality asking for a lot more, namely an ex-\nplicit factorization. If we can find aandbless than n\nsuch that n=ab, then we automatically know that nis\ncomposite, but the point is that there are circumstances\nunder which we are able to assert that nis composite\nwithout any factors being explicitly given.\nFermat\u2019s little theorem\nA standard result in elementary number theory, known as\n\u2019Fermat\u2019s little theorem\u2019, illustrates how this can happen.\nTheorem 8.4 Ifpis a prime number, then for any in-\nteger a,ap\u2261amod p, and if pdoes not divide athen\nap\u22121\u22611 mod p.\nExample 8.16 Suppose that, for some nanda, we find\nthatan\u0338\u2261amod n. It immediately follows from Fer-\nmat\u2019s little theorem that ncannot be prime, so (if n\u22652)\nit must be composite. But the method of showing this\nis rather indirect, and the computation that an\u22121\u0338\u22611\nmod nmay not itself tell us anything about the factor-\nization of n.\nExample 8.17 Show that if an\u22121\u22611 (mod n)then\nan\u2261a(mod n). Find a counterexample to the converse\nof this statement.\nThe theorem and example show that it is sometimes pos-\nsible to discover that a number nis composite without\nactually finding any of its factors. A more elaborate ver-\nsion of these ideas leads to the Miller-Rabin primality\ntest which, assuming the Riemann hypothesis is true,\n\n\n\n\n138 TOPIC 8. CODES\ndetermines whether an integer is prime or composite in\npolynomial time. A different method, which determines\nprimality in polynomial time without any assumptions,\nis due to Agrawal, Kayal and Saxena.\nPublic-key cryptosystems\nThe apparent difficulty of factorizing large numbers, and\nthe comparative ease of producing large primes, has given\nrise to one of the most popular \u2019public-key cryptosys-\ntems\u2019, called the RSA system after its inventors Ronald\nRivest, Adi Shamir and Leonard Adleman.\nThe idea of a public-key cryptosystem is that there is a\npublic key and a private key. Everyone can know the\npublic key, but the private key must be kept secret. Us-\ning the public key, anyone can encrypt a message to get\na ciphertext. Determining the message in a given cipher-\ntext should be extremely hard without the private key.\nThe important mathematical notion is that of a \u2019trap-\ndoor\u2019 or one-way function: namely a function which is\neasy to compute, but whose inverse is hard to compute\nwithout some additional information.\nMost importantly, public key cryptography can be used\nfor digital signatures, which solve the authentication prob-\nlem. For example, how do you know that your automatic\nsoftware updates are not a virus? The software update\ncomes with a digital signature (generated by the soft-\nware vendor) which can be verified using a public key\n\u201chard-wired\u201d into the operating system/application. En-\nabling secure automatic updates would have been a real\nheadache without public key cryptography.\nThe private key\nSuppose that pandqare chosen as two distinct \u2018large\u2019\nprime numbers, and let n=pq. Once the encryption\nprocedure has been carried out (that is, input has been\nstored in a coded, \u2019secret\u2019 form), the special knowledge\nneeded for decryption (or recovering the input), called\naprivate key , is a number dbetween 1 and nwhich is\ncoprime with ( p\u22121)(q\u22121), that is, dand ( p\u22121)(q\u22121)\nshare no common factor,\nThe public key\nAs gcd( d,(p\u22121)(q\u22121)) = 1, by Euclid\u2019s algorithm there\nare integers eandbsuch that ed+b(p\u22121)(q\u22121) = 1.\nWe assume that 0 \u2264e <(p\u22121)(q\u22121). The public key ,\nthe information required for encryption is then the pair\n(e, n).\nThe encryption function\nNow we describe how an integer Min the range 0 to\nn\u22121 (public key cryptography is mainly used to transmit\nsymmetric session keys; so there is no loss of generality\nin assuming the message is a moderate-sized integer) is\nencrypted using the public key. We write the encrypted\n\n\n\n\n8.3. RSA PUBLIC-KEY CRYPTOSYSTEM 139\nversion as f(M), so that fis the trapdoor function men-\ntioned above. We let\nf(M) =Memod n\nSuppose that we are also in possession of the private key,\nd. This may then be used to \u2018decrypt\u2019 the original value\nMfrom its encrypted version f(M) by using\nM= (f(M))dmod n\nTo check the truth of this equation, since 0 \u2264M\u2264n\u22121\nit is enough to show that Med\u2261Mmod n. Now pand\nqare distinct primes and so this amounts to show that\nMed\u2261Mmod pandMed\u2261Mmod q.\nExample 8.18 Show that Med\u2261Mmod pandMed\u2261\nMmod q.\nThe signature function\nNow we describe how to make digital signatures using\nRSA. A document or file is passed through a \u201chash func-\ntion\u201d to obtain an integer M. A signature is generated\n(by the user who knows the private key) as\nS=Mdmod n\nThe receiver gets the document and S, as well as the\npublic key ( n, e). They also use the hash function to\ncompute Mand then verify the equation\nM=Semod n\nEfficiency and Security\nFor the method to be useful, two properties are required:\n1. (Efficiency) It must be possible to carry out the\narithmetic involved in selecting p, qandd, and in\ncalculating the encrypted and decrypted numbers\nreasonably quickly (by computer), given the rele-\nvant keys.\n2. (Security) It must be prohibitively costly to de-\ncrypt the encrypted version of the message without\npossession of the private key.\nSelecting p, qand d\nFirst, one selects pandqof the desired size using the\nprimality test mentioned above. Next, to select d, it is\nsufficient to take a prime number larger than pandq\n(and below pq) since all prime factors of ( p\u22121)(q\u22121)\nmust be less than any number so chosen.\n\n\n\n\n140 TOPIC 8. CODES\nTo perform the encryption and decryption, we have to\nsee how powers mod ncan be rapidly computed.\nExample 8.19 Compute 107mod 3233 using just 9 mul-\ntiplications.\nIn general, if ehaskbinary digits, lof them 1s, in its\nbinary expansion, then it will require k+l\u22122 multiplica-\ntions mod nto evaluate Memod nwhich is O(logn).\nCost to decrypt without private key?\nA justification of property 2 is more a matter of faith at\npresent, but certainly no easy method of decryption is\nknown which does not essentially involve factorization of\nn.\nGiven that the system stands or falls on the difficulty\nof factorizing large numbers, how large do pandqhave\nto be to make it reasonably secure? At present there\nare algorithms known which will factorize numbers of\nover 200 digits using massive distributed computation,\nso allowing for possible improvements in this it seems\nsafe for the moment to employ primes pandqof at least\n1000 bits (i.e., 300 digits; so that nwill have about 600\ndigits).\n\n\n\n\nIndex\naccepting states, 121\nadjacent vertices, 76\nalphabet, 119\nand (\u2227), 2\nantisymmetric, 49\narrangements with\nrepetitions,\n108\narrangements with\nreplacement,\n107\nassociative laws, 6\nbijection, 65\nbinary relation, 48\nbinomial coefficients,\n110, 113\nbinomial theorem, 114\nbipartite graph, 82\nbound variable, 17\nCartesian product\n(A\u00d7B), 47\ncircuit in graph, 90\ncodewords, 129\ncoding theory, 133\ncodomain, 62\ncommutative laws, 6\ncomplete bipartite\ngraph, 82\ncomplete graph, 79\ncomponent of graph, 91\ncomposition of\nfunctions, 64\ncompound proposition,\n1, 4\nconcatenation, 119, 120\nconclusion, 3, 8\ncongruence, 29\ncongruence class, 30\nconnected graph, 91\nconnectives ( \u00ac,\u2227,\u2228,\n\u2192,\u2194,\u2295,\nnand ,nor),\n2, 5\ncontingent proposition,\n5\ncontradiction, 5\ncontrapositive, 10\ncounterexample, 13\ncounting lemma, 107\ncycle graph, 80cycle in graph, 90\nDe Morgan\u2019s laws, 6\ndecryption, 139\ndegree of vertex, 76\ndeterministic finite\nautomaton,\n121\nDFA, 121\nDFA recognizable, 123\ndigital signature, 139\ndirected graph, 73\ndisjoint sets, 107\ndistance of a code, 134\ndistributive laws, 6\ndivisor, 21\ndomain, 62\ndouble negation, 6\nencryption, 138\nequivalence class, 51\nequivalence relation, 50\nerror correcting codes,\n135\nEuclidean algorithm, 26\nEuler circuit, 99\nEuler walk, 99\nexistential quantifier, 16\nexists ( \u2203), 16\nfactor, 21\nfor all ( \u2200), 16\nfree variable, 17\nfunction, 62\ncomposition, 64\ndomain, 62\nidentity, 66\nimage, 63\ninjective, 65\ninverse, 66\nrange, 63\nsurjective, 65\ngraph, 70\nadjacency list, 86\nadjacency matrix,\n87\nadjacent, 76\ndegree, 76\nedge, 70\nendpoints, 76\nincident, 76\nneighbour, 76\n141\n\n\n\n\n142 INDEX\nvertex, 70\ngreatest element, 59\nHamilton cycle, 103\nHamilton path, 103\nHamming distance, 134\nhandshaking theorem,\n77\nHasse diagram, 58\nHuffman\u2019s algorithm,\n132\nhypothesis, 3, 8\nidempotent laws, 6\nidentity function, 66\nimage (function), 62, 63\nimplication laws, 6\nin-degree, 78\nincident edge, 76\ninclusion/exclusion\nprinciple,\n114\u2013116\ninclusive or ( \u2228), 3\ninitial state, 121\ninjective, 65\nintegers ( Z), 21\ninverse function, 66\nlanguage, 120\nlanguage accepted, 123\nlattice diagram, 58\nlaws\nassociative, 6\ncommutative, 6\nDe Morgan\u2019s, 6\ndistributive, 6\nidempotent, 6\nimplication, 6\nleast element, 59\nlexicographic ordering,\n55\nlogical connectives\n(\u00ac,\u2227,\u2228,\u2192,\u2194), 2\n(\u2295,nand ,nor), 5\nlogical equivalence ( \u21d4),\n5\nlogical implication ( \u21d2),\n7\nloop, 72\nloop invariant, 39\nlower bound, 61\nmaximal, 59\nminimal, 59\nmodus ponens, 3\nmultigraph, 71\nn-cube, 81\nnatural numbers ( N),\n21\nnot (\u00ac), 2\none-to-one, 65onto, 65\nor (\u2228), 2\nordered pair, 47\nout-degree, 78\npartial order, 53\npartition, 52\nPascal\u2019s identity, 114\npath in graph, 90\npermutation, 108\nr-permutation, 108\npigeonhole principle,\n116\u2013118\nposet, 53\npower set, 48\npredicate, 15\nprefix, 119\nprefix property, 130\npreimage ( f\u2190(y)), 67\nprime, 21\nprivate key, 138\nproduct rule\n(enumeration),\n107\nproof by contradiction,\n11\nproposition, 1\ncompound, 1, 4\ncontingent, 5\ncontradiction, 5\nsimple, 1\ntautology, 5\npseudograph, 72\npublic key, 138\nquantifier, 16\nquotient, 26\nr-permutation, 108\nrange (function), 63\nrational numbers ( Q),\n21\nreflexive, 49\nremainder, 26\nselections, 109, 112\nselections with\nrepetitions,\n111\nset\ndisjoint, 107\nsimple graph, 70\nsimple proposition, 1\nstate, 121\nstatement, 1\nstrongly connected, 93\nsubgraph, 83\nsubstring, 119\nsurjective, 65\nsymmetric, 49\ntautology, 5, 18\ntotal order, 54\n\n\n\n\nINDEX 143\ntransition diagram, 120,\n121\ntransition function, 121\ntransitive, 49\ntruth table, 3\u20135\ntruth value, 2\nunion of graphs, 86\nunion rule\n(enumeration),107\nuniversal quantifier, 16\nupper bound, 61\nvariable, 21\nwalk in graph, 89\nwell-ordered, 55\nwheel graph, 80\nword, 119\n\n\n\n\n",
      },
      {
        name: "Introduction to error-correcting codes",
        content:
          "8.2. INTRODUCTION TO ERROR-CORRECTING CODES 133\nExample 8.6 Construct the optimal binary tree for the\nweights 2, 3, 4, 7, 8. What is the total weight of this\ntree?\nIn order to find codewords with the prefix property such\nthat the most frequently used symbols are assigned the\nshortest codewords, we construct an optimal binary tree\nwith the stated frequencies of the symbols as its weights.\nThen by assigning 0\u2019s and 1\u2019s to the edges of this tree\nas described previously, codewords can be efficiently as-\nsigned to the various symbols.\nExample 8.7 Suppose the characters E, T, A, Q, and Z\nhave expected usage rates of 32, 28, 20, 4, and 1, respec-\ntively. Construct an efficient assignment of prefix codes\nto these characters.\nExample 8.8 Given a text, let wibe the number of oc-\ncurrences of the i-th symbol. Suppose a binary tree for\nthose weights has total weight W=P\nidiwi. If we en-\ncode our text using the corresponding prefix code, then\nthe resulting file has length W. (So it is shortest when\nwe minimize W.)\n8.2 Introduction to error-correcting codes\nWhen a radio message is sent through space, interference\nwith the transmission of a single letter or character may\nresult in the receipt of an incorrect communication.\nIf the message NEXT STOP JOME is received, it may\nbe clear that this was not the intended message. Perhaps\nthe actual message was NEXT STOP ROME or NEXT\nSTOP NOME, or something else.\nIt is often essential that a message be received as in-\ntended. For this reason, such messages are rarely sent\nin English (or French or German or any other common\nlanguage), since transmission error often results in a mis-\ninterpretation.\nAlphabets and words\nTo ensure the accuracy of a message, it is useful to encode\nit, that is, to use a new language in which it is less likely\nthat two words will be confused with each other.\nDefinition 8.1 For an integer b\u22652, the set\nA={0,1, . . . , b \u22121}\nofbsymbols is an alphabet . An ordered n-tuple of sym-\nbols in Ais called a word of length nor simply an n-word\n(over A.)\n\n\n\n\n134 TOPIC 8. CODES\nThe Hamming distance\nDefinition 8.2 For two n-words xandy, the distance\nd(x, y), often called the Hamming distance , between x\nandyis the number of coordinates at which xandy\ndiffer.\nExample 8.9 Letx= 0101101 ,y= 1011110 andz=\n0111101 . Then d(x, y) = 5 , d(x, z) = 1 , d(y, z) = 4 .\nTheorem 8.1 The Hamming distance has the following\nproperties.\n1.d(u, v)\u22650, and d(u, v) = 0 if and only if u=v;\n2.d(u, v) =d(v, u)for all u, v\u2208V(G);\n3.d(u, v)\u2264d(u, w) +d(w, v)for all u, v, w \u2208V(G)\n(The triangle inequality)\nProof: See lecture.\nCodes\nDefinition 8.3 Letnbe a positive integer and Aan al-\nphabet of belements. A fixed-length code Cis a collec-\ntion of words of length noverA. The fixed-length code C\nis also called an (n, b)-code. Ifb= 2, then Cis abinary\ncode.\nExample 8.10 Give an example of a (6,2)-code.\nDistance of a code\nDefinition 8.4 Thedistance d(C)ofCis\nd(C) = min {d(x, y)},\nwhere the minimum is taken over all pairs x, yof distinct\ncode words.\n\n\n\n\n8.2. INTRODUCTION TO ERROR-CORRECTING CODES 135\nExample 8.11 What is the distance of the following\ncode?\nC={000000 ,001101 ,010011 ,100101 }.\nThe challenge in coding theory is to construct a code that\n1. uses as simple an alphabet as possible to facilitate\ntransmission of messages,\n2. uses a sufficiently large nso that many code words\nare available and so that there is a great enough\ndistance between every two code words, and\n3. uses a sufficiently small nto simplify transmission\nof messages.\nExample 8.12 Suppose a code word of the code in the\nprevious example is transmitted, but that one symbol gets\nchanged. If the received word is\n110011\nthen what word was sent?\nt-error correcting codes\nWe now turn to the problem of constructing codes. Ide-\nally, a code should be constructed so that even if a small\nnumber of errors do occur due to interference, the mes-\nsage can still be understood.\nDefinition 8.5 A code is t-error correcting if, whenever\na code word xis transmitted, then xis the unique code\nword closest to the word received, even when up to ter-\nrors have occurred in the transmission of x.\nExample 8.13 LetC={00000 ,11111}. Then Cis a\n2-error correcting code. (This is not an efficient code!)\nWe assume that if there is a unique code word at mini-\nmum distance from the received word, then the received\nword was intended to be the code word.\n\n\n\n\n136 TOPIC 8. CODES\nWhat can we say about d(C)?\nExample 8.14 Suppose that an (n, b)-code is 1-error\ncorrecting. Is it possible for two code words to be at dis-\ntance 1? Is it possible for two code words to be at distance\n2?\nTheorem 8.2 A code Cist-error correcting if and only\nifd(C)\u22652t+ 1.\nProof: See lecture.\nPerfect codes\nIf an ( n, b)-code Cist-error correcting, there is a limit\non how many code words Ccan contain.\nTheorem 8.3 IfCis a t-error correcting (n, b)-code,\nthen\n|C| \u2264\u0016bn\ns\u0017\n,\nwhere\ns=\u0012n\n0\u0013\n+\u0012n\n1\u0013\n(b\u22121)+\u0012n\n2\u0013\n(b\u22121)2+\u00b7\u00b7\u00b7+\u0012n\nt\u0013\n(b\u22121)t.\nDefinition 8.6 At-error correcting (n, b)-code Cisper-\nfectif|C|=bn/s, where sis given by the above the-\norem. (That is, for every n-word wover the alphabet\n{0,1, . . . , b \u22121}, there is exactly one code word in C\nwithin a distance of at most tfrom w.)\nA graphical representation of codes\nConsider the graph Gon{0,1, . . . , b \u22121}nwhere there\nis an edge between vertices u= (u1, u2, . . . , u n) and v=\n(v1, v2, . . . , v n) if and only if ui\u0338=vifor exactly one i\n(1\u2264i\u2264n). A code can be considered as a subset of G.\nExample 8.15 How many vertices does Ghave? De-\nscribe the graph when b= 2.\nThe Hamming distance between two code words is the\nsame as the length of the shortest path in Gbetween the\ntwo corresponding vertices. For a good code (i.e., one\nwith a large distance), the code words are placed at suit-\nably selected vertices of Gso that the minimum distance\namong all pairs of code words is as large as possible.\n\n\n\n\n8.3. RSA PUBLIC-KEY CRYPTOSYSTEM 137\n8.3 RSA public-key cryptosystem\nConsider the following problems:\n1. PRIME: Is na prime number?\n2. COMPOSITE: Is na composite number?\n3. FACTORIZE: Find a, b < n , if possible, such that\nn=ab. Otherwise report that none exist (and\nthat, for n\u22652,nis prime.)\nWe have listed problems in this form in order to pinpoint\nthe difference between COMPOSITE and FACTORIZE,\nwhich at first sight look as if they might be the same.\nActually it is the first two, PRIME and COMPOSITE\nthat are identical in their complexity.\nAlthough FACTORIZE may look the same as COMPOS-\nITE, it is in reality asking for a lot more, namely an ex-\nplicit factorization. If we can find aandbless than n\nsuch that n=ab, then we automatically know that nis\ncomposite, but the point is that there are circumstances\nunder which we are able to assert that nis composite\nwithout any factors being explicitly given.\nFermat\u2019s little theorem\nA standard result in elementary number theory, known as\n\u2019Fermat\u2019s little theorem\u2019, illustrates how this can happen.\nTheorem 8.4 Ifpis a prime number, then for any in-\nteger a,ap\u2261amod p, and if pdoes not divide athen\nap\u22121\u22611 mod p.\nExample 8.16 Suppose that, for some nanda, we find\nthatan\u0338\u2261amod n. It immediately follows from Fer-\nmat\u2019s little theorem that ncannot be prime, so (if n\u22652)\nit must be composite. But the method of showing this\nis rather indirect, and the computation that an\u22121\u0338\u22611\nmod nmay not itself tell us anything about the factor-\nization of n.\nExample 8.17 Show that if an\u22121\u22611 (mod n)then\nan\u2261a(mod n). Find a counterexample to the converse\nof this statement.\nThe theorem and example show that it is sometimes pos-\nsible to discover that a number nis composite without\nactually finding any of its factors. A more elaborate ver-\nsion of these ideas leads to the Miller-Rabin primality\ntest which, assuming the Riemann hypothesis is true,\n\n\n\n\n138 TOPIC 8. CODES\ndetermines whether an integer is prime or composite in\npolynomial time. A different method, which determines\nprimality in polynomial time without any assumptions,\nis due to Agrawal, Kayal and Saxena.\nPublic-key cryptosystems\nThe apparent difficulty of factorizing large numbers, and\nthe comparative ease of producing large primes, has given\nrise to one of the most popular \u2019public-key cryptosys-\ntems\u2019, called the RSA system after its inventors Ronald\nRivest, Adi Shamir and Leonard Adleman.\nThe idea of a public-key cryptosystem is that there is a\npublic key and a private key. Everyone can know the\npublic key, but the private key must be kept secret. Us-\ning the public key, anyone can encrypt a message to get\na ciphertext. Determining the message in a given cipher-\ntext should be extremely hard without the private key.\nThe important mathematical notion is that of a \u2019trap-\ndoor\u2019 or one-way function: namely a function which is\neasy to compute, but whose inverse is hard to compute\nwithout some additional information.\nMost importantly, public key cryptography can be used\nfor digital signatures, which solve the authentication prob-\nlem. For example, how do you know that your automatic\nsoftware updates are not a virus? The software update\ncomes with a digital signature (generated by the soft-\nware vendor) which can be verified using a public key\n\u201chard-wired\u201d into the operating system/application. En-\nabling secure automatic updates would have been a real\nheadache without public key cryptography.\nThe private key\nSuppose that pandqare chosen as two distinct \u2018large\u2019\nprime numbers, and let n=pq. Once the encryption\nprocedure has been carried out (that is, input has been\nstored in a coded, \u2019secret\u2019 form), the special knowledge\nneeded for decryption (or recovering the input), called\naprivate key , is a number dbetween 1 and nwhich is\ncoprime with ( p\u22121)(q\u22121), that is, dand ( p\u22121)(q\u22121)\nshare no common factor,\nThe public key\nAs gcd( d,(p\u22121)(q\u22121)) = 1, by Euclid\u2019s algorithm there\nare integers eandbsuch that ed+b(p\u22121)(q\u22121) = 1.\nWe assume that 0 \u2264e <(p\u22121)(q\u22121). The public key ,\nthe information required for encryption is then the pair\n(e, n).\nThe encryption function\nNow we describe how an integer Min the range 0 to\nn\u22121 (public key cryptography is mainly used to transmit\nsymmetric session keys; so there is no loss of generality\nin assuming the message is a moderate-sized integer) is\nencrypted using the public key. We write the encrypted\n\n\n\n\n8.3. RSA PUBLIC-KEY CRYPTOSYSTEM 139\nversion as f(M), so that fis the trapdoor function men-\ntioned above. We let\nf(M) =Memod n\nSuppose that we are also in possession of the private key,\nd. This may then be used to \u2018decrypt\u2019 the original value\nMfrom its encrypted version f(M) by using\nM= (f(M))dmod n\nTo check the truth of this equation, since 0 \u2264M\u2264n\u22121\nit is enough to show that Med\u2261Mmod n. Now pand\nqare distinct primes and so this amounts to show that\nMed\u2261Mmod pandMed\u2261Mmod q.\nExample 8.18 Show that Med\u2261Mmod pandMed\u2261\nMmod q.\nThe signature function\nNow we describe how to make digital signatures using\nRSA. A document or file is passed through a \u201chash func-\ntion\u201d to obtain an integer M. A signature is generated\n(by the user who knows the private key) as\nS=Mdmod n\nThe receiver gets the document and S, as well as the\npublic key ( n, e). They also use the hash function to\ncompute Mand then verify the equation\nM=Semod n\nEfficiency and Security\nFor the method to be useful, two properties are required:\n1. (Efficiency) It must be possible to carry out the\narithmetic involved in selecting p, qandd, and in\ncalculating the encrypted and decrypted numbers\nreasonably quickly (by computer), given the rele-\nvant keys.\n2. (Security) It must be prohibitively costly to de-\ncrypt the encrypted version of the message without\npossession of the private key.\nSelecting p, qand d\nFirst, one selects pandqof the desired size using the\nprimality test mentioned above. Next, to select d, it is\nsufficient to take a prime number larger than pandq\n(and below pq) since all prime factors of ( p\u22121)(q\u22121)\nmust be less than any number so chosen.\n\n\n\n\n140 TOPIC 8. CODES\nTo perform the encryption and decryption, we have to\nsee how powers mod ncan be rapidly computed.\nExample 8.19 Compute 107mod 3233 using just 9 mul-\ntiplications.\nIn general, if ehaskbinary digits, lof them 1s, in its\nbinary expansion, then it will require k+l\u22122 multiplica-\ntions mod nto evaluate Memod nwhich is O(logn).\nCost to decrypt without private key?\nA justification of property 2 is more a matter of faith at\npresent, but certainly no easy method of decryption is\nknown which does not essentially involve factorization of\nn.\nGiven that the system stands or falls on the difficulty\nof factorizing large numbers, how large do pandqhave\nto be to make it reasonably secure? At present there\nare algorithms known which will factorize numbers of\nover 200 digits using massive distributed computation,\nso allowing for possible improvements in this it seems\nsafe for the moment to employ primes pandqof at least\n1000 bits (i.e., 300 digits; so that nwill have about 600\ndigits).\n\n\n\n\nIndex\naccepting states, 121\nadjacent vertices, 76\nalphabet, 119\nand (\u2227), 2\nantisymmetric, 49\narrangements with\nrepetitions,\n108\narrangements with\nreplacement,\n107\nassociative laws, 6\nbijection, 65\nbinary relation, 48\nbinomial coefficients,\n110, 113\nbinomial theorem, 114\nbipartite graph, 82\nbound variable, 17\nCartesian product\n(A\u00d7B), 47\ncircuit in graph, 90\ncodewords, 129\ncoding theory, 133\ncodomain, 62\ncommutative laws, 6\ncomplete bipartite\ngraph, 82\ncomplete graph, 79\ncomponent of graph, 91\ncomposition of\nfunctions, 64\ncompound proposition,\n1, 4\nconcatenation, 119, 120\nconclusion, 3, 8\ncongruence, 29\ncongruence class, 30\nconnected graph, 91\nconnectives ( \u00ac,\u2227,\u2228,\n\u2192,\u2194,\u2295,\nnand ,nor),\n2, 5\ncontingent proposition,\n5\ncontradiction, 5\ncontrapositive, 10\ncounterexample, 13\ncounting lemma, 107\ncycle graph, 80cycle in graph, 90\nDe Morgan\u2019s laws, 6\ndecryption, 139\ndegree of vertex, 76\ndeterministic finite\nautomaton,\n121\nDFA, 121\nDFA recognizable, 123\ndigital signature, 139\ndirected graph, 73\ndisjoint sets, 107\ndistance of a code, 134\ndistributive laws, 6\ndivisor, 21\ndomain, 62\ndouble negation, 6\nencryption, 138\nequivalence class, 51\nequivalence relation, 50\nerror correcting codes,\n135\nEuclidean algorithm, 26\nEuler circuit, 99\nEuler walk, 99\nexistential quantifier, 16\nexists ( \u2203), 16\nfactor, 21\nfor all ( \u2200), 16\nfree variable, 17\nfunction, 62\ncomposition, 64\ndomain, 62\nidentity, 66\nimage, 63\ninjective, 65\ninverse, 66\nrange, 63\nsurjective, 65\ngraph, 70\nadjacency list, 86\nadjacency matrix,\n87\nadjacent, 76\ndegree, 76\nedge, 70\nendpoints, 76\nincident, 76\nneighbour, 76\n141\n\n\n\n\n142 INDEX\nvertex, 70\ngreatest element, 59\nHamilton cycle, 103\nHamilton path, 103\nHamming distance, 134\nhandshaking theorem,\n77\nHasse diagram, 58\nHuffman\u2019s algorithm,\n132\nhypothesis, 3, 8\nidempotent laws, 6\nidentity function, 66\nimage (function), 62, 63\nimplication laws, 6\nin-degree, 78\nincident edge, 76\ninclusion/exclusion\nprinciple,\n114\u2013116\ninclusive or ( \u2228), 3\ninitial state, 121\ninjective, 65\nintegers ( Z), 21\ninverse function, 66\nlanguage, 120\nlanguage accepted, 123\nlattice diagram, 58\nlaws\nassociative, 6\ncommutative, 6\nDe Morgan\u2019s, 6\ndistributive, 6\nidempotent, 6\nimplication, 6\nleast element, 59\nlexicographic ordering,\n55\nlogical connectives\n(\u00ac,\u2227,\u2228,\u2192,\u2194), 2\n(\u2295,nand ,nor), 5\nlogical equivalence ( \u21d4),\n5\nlogical implication ( \u21d2),\n7\nloop, 72\nloop invariant, 39\nlower bound, 61\nmaximal, 59\nminimal, 59\nmodus ponens, 3\nmultigraph, 71\nn-cube, 81\nnatural numbers ( N),\n21\nnot (\u00ac), 2\none-to-one, 65onto, 65\nor (\u2228), 2\nordered pair, 47\nout-degree, 78\npartial order, 53\npartition, 52\nPascal\u2019s identity, 114\npath in graph, 90\npermutation, 108\nr-permutation, 108\npigeonhole principle,\n116\u2013118\nposet, 53\npower set, 48\npredicate, 15\nprefix, 119\nprefix property, 130\npreimage ( f\u2190(y)), 67\nprime, 21\nprivate key, 138\nproduct rule\n(enumeration),\n107\nproof by contradiction,\n11\nproposition, 1\ncompound, 1, 4\ncontingent, 5\ncontradiction, 5\nsimple, 1\ntautology, 5\npseudograph, 72\npublic key, 138\nquantifier, 16\nquotient, 26\nr-permutation, 108\nrange (function), 63\nrational numbers ( Q),\n21\nreflexive, 49\nremainder, 26\nselections, 109, 112\nselections with\nrepetitions,\n111\nset\ndisjoint, 107\nsimple graph, 70\nsimple proposition, 1\nstate, 121\nstatement, 1\nstrongly connected, 93\nsubgraph, 83\nsubstring, 119\nsurjective, 65\nsymmetric, 49\ntautology, 5, 18\ntotal order, 54\n\n\n\n\nINDEX 143\ntransition diagram, 120,\n121\ntransition function, 121\ntransitive, 49\ntruth table, 3\u20135\ntruth value, 2\nunion of graphs, 86\nunion rule\n(enumeration),107\nuniversal quantifier, 16\nupper bound, 61\nvariable, 21\nwalk in graph, 89\nwell-ordered, 55\nwheel graph, 80\nword, 119\n\n\n\n\n",
      },
      {
        name: "RSA public-key cryptosystem",
        content:
          "8.3. RSA PUBLIC-KEY CRYPTOSYSTEM 137\n8.3 RSA public-key cryptosystem\nConsider the following problems:\n1. PRIME: Is na prime number?\n2. COMPOSITE: Is na composite number?\n3. FACTORIZE: Find a, b < n , if possible, such that\nn=ab. Otherwise report that none exist (and\nthat, for n\u22652,nis prime.)\nWe have listed problems in this form in order to pinpoint\nthe difference between COMPOSITE and FACTORIZE,\nwhich at first sight look as if they might be the same.\nActually it is the first two, PRIME and COMPOSITE\nthat are identical in their complexity.\nAlthough FACTORIZE may look the same as COMPOS-\nITE, it is in reality asking for a lot more, namely an ex-\nplicit factorization. If we can find aandbless than n\nsuch that n=ab, then we automatically know that nis\ncomposite, but the point is that there are circumstances\nunder which we are able to assert that nis composite\nwithout any factors being explicitly given.\nFermat\u2019s little theorem\nA standard result in elementary number theory, known as\n\u2019Fermat\u2019s little theorem\u2019, illustrates how this can happen.\nTheorem 8.4 Ifpis a prime number, then for any in-\nteger a,ap\u2261amod p, and if pdoes not divide athen\nap\u22121\u22611 mod p.\nExample 8.16 Suppose that, for some nanda, we find\nthatan\u0338\u2261amod n. It immediately follows from Fer-\nmat\u2019s little theorem that ncannot be prime, so (if n\u22652)\nit must be composite. But the method of showing this\nis rather indirect, and the computation that an\u22121\u0338\u22611\nmod nmay not itself tell us anything about the factor-\nization of n.\nExample 8.17 Show that if an\u22121\u22611 (mod n)then\nan\u2261a(mod n). Find a counterexample to the converse\nof this statement.\nThe theorem and example show that it is sometimes pos-\nsible to discover that a number nis composite without\nactually finding any of its factors. A more elaborate ver-\nsion of these ideas leads to the Miller-Rabin primality\ntest which, assuming the Riemann hypothesis is true,\n\n\n\n\n138 TOPIC 8. CODES\ndetermines whether an integer is prime or composite in\npolynomial time. A different method, which determines\nprimality in polynomial time without any assumptions,\nis due to Agrawal, Kayal and Saxena.\nPublic-key cryptosystems\nThe apparent difficulty of factorizing large numbers, and\nthe comparative ease of producing large primes, has given\nrise to one of the most popular \u2019public-key cryptosys-\ntems\u2019, called the RSA system after its inventors Ronald\nRivest, Adi Shamir and Leonard Adleman.\nThe idea of a public-key cryptosystem is that there is a\npublic key and a private key. Everyone can know the\npublic key, but the private key must be kept secret. Us-\ning the public key, anyone can encrypt a message to get\na ciphertext. Determining the message in a given cipher-\ntext should be extremely hard without the private key.\nThe important mathematical notion is that of a \u2019trap-\ndoor\u2019 or one-way function: namely a function which is\neasy to compute, but whose inverse is hard to compute\nwithout some additional information.\nMost importantly, public key cryptography can be used\nfor digital signatures, which solve the authentication prob-\nlem. For example, how do you know that your automatic\nsoftware updates are not a virus? The software update\ncomes with a digital signature (generated by the soft-\nware vendor) which can be verified using a public key\n\u201chard-wired\u201d into the operating system/application. En-\nabling secure automatic updates would have been a real\nheadache without public key cryptography.\nThe private key\nSuppose that pandqare chosen as two distinct \u2018large\u2019\nprime numbers, and let n=pq. Once the encryption\nprocedure has been carried out (that is, input has been\nstored in a coded, \u2019secret\u2019 form), the special knowledge\nneeded for decryption (or recovering the input), called\naprivate key , is a number dbetween 1 and nwhich is\ncoprime with ( p\u22121)(q\u22121), that is, dand ( p\u22121)(q\u22121)\nshare no common factor,\nThe public key\nAs gcd( d,(p\u22121)(q\u22121)) = 1, by Euclid\u2019s algorithm there\nare integers eandbsuch that ed+b(p\u22121)(q\u22121) = 1.\nWe assume that 0 \u2264e <(p\u22121)(q\u22121). The public key ,\nthe information required for encryption is then the pair\n(e, n).\nThe encryption function\nNow we describe how an integer Min the range 0 to\nn\u22121 (public key cryptography is mainly used to transmit\nsymmetric session keys; so there is no loss of generality\nin assuming the message is a moderate-sized integer) is\nencrypted using the public key. We write the encrypted\n\n\n\n\n8.3. RSA PUBLIC-KEY CRYPTOSYSTEM 139\nversion as f(M), so that fis the trapdoor function men-\ntioned above. We let\nf(M) =Memod n\nSuppose that we are also in possession of the private key,\nd. This may then be used to \u2018decrypt\u2019 the original value\nMfrom its encrypted version f(M) by using\nM= (f(M))dmod n\nTo check the truth of this equation, since 0 \u2264M\u2264n\u22121\nit is enough to show that Med\u2261Mmod n. Now pand\nqare distinct primes and so this amounts to show that\nMed\u2261Mmod pandMed\u2261Mmod q.\nExample 8.18 Show that Med\u2261Mmod pandMed\u2261\nMmod q.\nThe signature function\nNow we describe how to make digital signatures using\nRSA. A document or file is passed through a \u201chash func-\ntion\u201d to obtain an integer M. A signature is generated\n(by the user who knows the private key) as\nS=Mdmod n\nThe receiver gets the document and S, as well as the\npublic key ( n, e). They also use the hash function to\ncompute Mand then verify the equation\nM=Semod n\nEfficiency and Security\nFor the method to be useful, two properties are required:\n1. (Efficiency) It must be possible to carry out the\narithmetic involved in selecting p, qandd, and in\ncalculating the encrypted and decrypted numbers\nreasonably quickly (by computer), given the rele-\nvant keys.\n2. (Security) It must be prohibitively costly to de-\ncrypt the encrypted version of the message without\npossession of the private key.\nSelecting p, qand d\nFirst, one selects pandqof the desired size using the\nprimality test mentioned above. Next, to select d, it is\nsufficient to take a prime number larger than pandq\n(and below pq) since all prime factors of ( p\u22121)(q\u22121)\nmust be less than any number so chosen.\n\n\n\n\n140 TOPIC 8. CODES\nTo perform the encryption and decryption, we have to\nsee how powers mod ncan be rapidly computed.\nExample 8.19 Compute 107mod 3233 using just 9 mul-\ntiplications.\nIn general, if ehaskbinary digits, lof them 1s, in its\nbinary expansion, then it will require k+l\u22122 multiplica-\ntions mod nto evaluate Memod nwhich is O(logn).\nCost to decrypt without private key?\nA justification of property 2 is more a matter of faith at\npresent, but certainly no easy method of decryption is\nknown which does not essentially involve factorization of\nn.\nGiven that the system stands or falls on the difficulty\nof factorizing large numbers, how large do pandqhave\nto be to make it reasonably secure? At present there\nare algorithms known which will factorize numbers of\nover 200 digits using massive distributed computation,\nso allowing for possible improvements in this it seems\nsafe for the moment to employ primes pandqof at least\n1000 bits (i.e., 300 digits; so that nwill have about 600\ndigits).\n\n\n\n\nIndex\naccepting states, 121\nadjacent vertices, 76\nalphabet, 119\nand (\u2227), 2\nantisymmetric, 49\narrangements with\nrepetitions,\n108\narrangements with\nreplacement,\n107\nassociative laws, 6\nbijection, 65\nbinary relation, 48\nbinomial coefficients,\n110, 113\nbinomial theorem, 114\nbipartite graph, 82\nbound variable, 17\nCartesian product\n(A\u00d7B), 47\ncircuit in graph, 90\ncodewords, 129\ncoding theory, 133\ncodomain, 62\ncommutative laws, 6\ncomplete bipartite\ngraph, 82\ncomplete graph, 79\ncomponent of graph, 91\ncomposition of\nfunctions, 64\ncompound proposition,\n1, 4\nconcatenation, 119, 120\nconclusion, 3, 8\ncongruence, 29\ncongruence class, 30\nconnected graph, 91\nconnectives ( \u00ac,\u2227,\u2228,\n\u2192,\u2194,\u2295,\nnand ,nor),\n2, 5\ncontingent proposition,\n5\ncontradiction, 5\ncontrapositive, 10\ncounterexample, 13\ncounting lemma, 107\ncycle graph, 80cycle in graph, 90\nDe Morgan\u2019s laws, 6\ndecryption, 139\ndegree of vertex, 76\ndeterministic finite\nautomaton,\n121\nDFA, 121\nDFA recognizable, 123\ndigital signature, 139\ndirected graph, 73\ndisjoint sets, 107\ndistance of a code, 134\ndistributive laws, 6\ndivisor, 21\ndomain, 62\ndouble negation, 6\nencryption, 138\nequivalence class, 51\nequivalence relation, 50\nerror correcting codes,\n135\nEuclidean algorithm, 26\nEuler circuit, 99\nEuler walk, 99\nexistential quantifier, 16\nexists ( \u2203), 16\nfactor, 21\nfor all ( \u2200), 16\nfree variable, 17\nfunction, 62\ncomposition, 64\ndomain, 62\nidentity, 66\nimage, 63\ninjective, 65\ninverse, 66\nrange, 63\nsurjective, 65\ngraph, 70\nadjacency list, 86\nadjacency matrix,\n87\nadjacent, 76\ndegree, 76\nedge, 70\nendpoints, 76\nincident, 76\nneighbour, 76\n141\n\n\n\n\n142 INDEX\nvertex, 70\ngreatest element, 59\nHamilton cycle, 103\nHamilton path, 103\nHamming distance, 134\nhandshaking theorem,\n77\nHasse diagram, 58\nHuffman\u2019s algorithm,\n132\nhypothesis, 3, 8\nidempotent laws, 6\nidentity function, 66\nimage (function), 62, 63\nimplication laws, 6\nin-degree, 78\nincident edge, 76\ninclusion/exclusion\nprinciple,\n114\u2013116\ninclusive or ( \u2228), 3\ninitial state, 121\ninjective, 65\nintegers ( Z), 21\ninverse function, 66\nlanguage, 120\nlanguage accepted, 123\nlattice diagram, 58\nlaws\nassociative, 6\ncommutative, 6\nDe Morgan\u2019s, 6\ndistributive, 6\nidempotent, 6\nimplication, 6\nleast element, 59\nlexicographic ordering,\n55\nlogical connectives\n(\u00ac,\u2227,\u2228,\u2192,\u2194), 2\n(\u2295,nand ,nor), 5\nlogical equivalence ( \u21d4),\n5\nlogical implication ( \u21d2),\n7\nloop, 72\nloop invariant, 39\nlower bound, 61\nmaximal, 59\nminimal, 59\nmodus ponens, 3\nmultigraph, 71\nn-cube, 81\nnatural numbers ( N),\n21\nnot (\u00ac), 2\none-to-one, 65onto, 65\nor (\u2228), 2\nordered pair, 47\nout-degree, 78\npartial order, 53\npartition, 52\nPascal\u2019s identity, 114\npath in graph, 90\npermutation, 108\nr-permutation, 108\npigeonhole principle,\n116\u2013118\nposet, 53\npower set, 48\npredicate, 15\nprefix, 119\nprefix property, 130\npreimage ( f\u2190(y)), 67\nprime, 21\nprivate key, 138\nproduct rule\n(enumeration),\n107\nproof by contradiction,\n11\nproposition, 1\ncompound, 1, 4\ncontingent, 5\ncontradiction, 5\nsimple, 1\ntautology, 5\npseudograph, 72\npublic key, 138\nquantifier, 16\nquotient, 26\nr-permutation, 108\nrange (function), 63\nrational numbers ( Q),\n21\nreflexive, 49\nremainder, 26\nselections, 109, 112\nselections with\nrepetitions,\n111\nset\ndisjoint, 107\nsimple graph, 70\nsimple proposition, 1\nstate, 121\nstatement, 1\nstrongly connected, 93\nsubgraph, 83\nsubstring, 119\nsurjective, 65\nsymmetric, 49\ntautology, 5, 18\ntotal order, 54\n\n\n\n\nINDEX 143\ntransition diagram, 120,\n121\ntransition function, 121\ntransitive, 49\ntruth table, 3\u20135\ntruth value, 2\nunion of graphs, 86\nunion rule\n(enumeration),107\nuniversal quantifier, 16\nupper bound, 61\nvariable, 21\nwalk in graph, 89\nwell-ordered, 55\nwheel graph, 80\nword, 119\n\n\n\n\n",
      },
    ],
  },
];

import cs220Notes from "../../../api/example_output/out2023-03-10 21_42_44.975319.json";
import cs225Notes from "../../../api/example_output/out2023-03-10 22_18_17.900999.json";

export let courses = [
  { id: "COMPSCI220", outline: cs220Notes },
  { id: "COMPSCI225", outline: cs225Notes },
];
